# The file was automatically generated by Lark v1.0.0a
__version__ = "1.0.0a"

#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark,
#    and are subject to the terms of the Mozilla Public License, v. 2.0.
#    If a copy of the MPL was not distributed with this
#    file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, you may contact me via email or otherwise.
#
#    If MPL2 is incompatible with your free or open-source project,
#    contact me and we'll work it out.
#
#

from abc import ABC, abstractmethod
from collections.abc import Sequence
from types import ModuleType
from typing import (
    TypeVar, Generic, Type, Tuple, List, Dict, Iterator, Collection, Callable, Optional, FrozenSet, Any,
    Union, Iterable, IO, TYPE_CHECKING,
    Pattern as REPattern, ClassVar, Set, Mapping
)


class LarkError(Exception):
    pass


class ConfigurationError(LarkError, ValueError):
    pass


def assert_config(value, options: Collection, msg='Got %r, expected one of %s'):
    if value not in options:
        raise ConfigurationError(msg % (value, options))


class GrammarError(LarkError):
    pass


class ParseError(LarkError):
    pass


class LexError(LarkError):
    pass

T = TypeVar('T')

class UnexpectedInput(LarkError):
    #--
    line: int
    column: int
    pos_in_stream = None
    state: Any
    _terminals_by_name = None

    def get_context(self, text: str, span: int=40) -> str:
        #--
        assert self.pos_in_stream is not None, self
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        if not isinstance(text, bytes):
            before = text[start:pos].rsplit('\n', 1)[-1]
            after = text[pos:end].split('\n', 1)[0]
            return before + after + '\n' + ' ' * len(before.expandtabs()) + '^\n'
        else:
            before = text[start:pos].rsplit(b'\n', 1)[-1]
            after = text[pos:end].split(b'\n', 1)[0]
            return (before + after + b'\n' + b' ' * len(before.expandtabs()) + b'^\n').decode("ascii", "backslashreplace")

    def match_examples(self, parse_fn: 'Callable[[str], Tree]', 
                             examples: Union[Mapping[T, Iterable[str]], Iterable[Tuple[T, Iterable[str]]]],
                             token_type_match_fallback: bool=False,
                             use_accepts: bool=True
                         ) -> Optional[T]:
        #--
        assert self.state is not None, "Not supported for this exception"

        if isinstance(examples, dict):
            examples = examples.items()

        candidate = (None, False)
        for i, (label, example) in enumerate(examples):
            assert not isinstance(example, str), "Expecting a list"

            for j, malformed in enumerate(example):
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        if use_accepts and hasattr(self, 'accepts') and hasattr(ut, 'accepts') and ut.accepts != self.accepts:
                            logger.debug("Different accepts with same state[%d]: %s != %s at example [%s][%s]" %
                                         (self.state, self.accepts, ut.accepts, i, j))
                            continue
                        try:
                            if ut.token == self.token:  ##

                                logger.debug("Exact Match at example [%s][%s]" % (i, j))
                                return label

                            if token_type_match_fallback:
                                ##

                                if (ut.token.type == self.token.type) and not candidate[-1]:
                                    logger.debug("Token Type Fallback at example [%s][%s]" % (i, j))
                                    candidate = label, True

                        except AttributeError:
                            pass
                        if candidate[0] is None:
                            logger.debug("Same State match at example [%s][%s]" % (i, j))
                            candidate = label, False

        return candidate[0]

    def _format_expected(self, expected):
        if self._terminals_by_name:
            d = self._terminals_by_name
            expected = [d[t_name].user_repr() if t_name in d else t_name for t_name in expected]
        return "Expected one of: \n\t* %s\n" % '\n\t* '.join(expected)


class UnexpectedEOF(ParseError, UnexpectedInput):
    #--
    expected: 'List[Token]'

    def __init__(self, expected, state=None, terminals_by_name=None):
        super(UnexpectedEOF, self).__init__()

        self.expected = expected
        self.state = state
        from .lexer import Token
        self.token = Token("<EOF>", "")  ##

        self.pos_in_stream = -1
        self.line = -1
        self.column = -1
        self._terminals_by_name = terminals_by_name


    def __str__(self):
        message = "Unexpected end-of-input. "
        message += self._format_expected(self.expected)
        return message


class UnexpectedCharacters(LexError, UnexpectedInput):
    #--

    allowed: Set[str]
    considered_tokens: Set[Any]

    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None,
                 terminals_by_name=None, considered_rules=None):
        super(UnexpectedCharacters, self).__init__()

        ##

        self.line = line
        self.column = column
        self.pos_in_stream = lex_pos
        self.state = state
        self._terminals_by_name = terminals_by_name

        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.considered_rules = considered_rules
        self.token_history = token_history

        if isinstance(seq, bytes):
            self.char = seq[lex_pos:lex_pos + 1].decode("ascii", "backslashreplace")
        else:
            self.char = seq[lex_pos]
        self._context = self.get_context(seq)


    def __str__(self):
        message = "No terminal matches '%s' in the current parser context, at line %d col %d" % (self.char, self.line, self.column)
        message += '\n\n' + self._context
        if self.allowed:
            message += self._format_expected(self.allowed)
        if self.token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in self.token_history)
        return message


class UnexpectedToken(ParseError, UnexpectedInput):
    #--

    expected: Set[str]
    considered_rules: Set[str]
    interactive_parser: 'InteractiveParser'

    def __init__(self, token, expected, considered_rules=None, state=None, interactive_parser=None, terminals_by_name=None, token_history=None):
        super(UnexpectedToken, self).__init__()
        
        ##

        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.pos_in_stream = getattr(token, 'start_pos', None)
        self.state = state

        self.token = token
        self.expected = expected  ##

        self._accepts = NO_VALUE
        self.considered_rules = considered_rules
        self.interactive_parser = interactive_parser
        self._terminals_by_name = terminals_by_name
        self.token_history = token_history


    @property
    def accepts(self) -> Set[str]:
        if self._accepts is NO_VALUE:
            self._accepts = self.interactive_parser and self.interactive_parser.accepts()
        return self._accepts

    def __str__(self):
        message = ("Unexpected token %r at line %s, column %s.\n%s"
                   % (self.token, self.line, self.column, self._format_expected(self.accepts or self.expected)))
        if self.token_history:
            message += "Previous tokens: %r\n" % self.token_history

        return message



class VisitError(LarkError):
    #--

    obj: 'Union[Tree, Token]'
    orig_exc: Exception

    def __init__(self, rule, obj, orig_exc):
        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)

        self.rule = rule
        self.obj = obj
        self.orig_exc = orig_exc


import sys, re
import logging
logger: logging.Logger = logging.getLogger("lark")
logger.addHandler(logging.StreamHandler())
##

##

logger.setLevel(logging.CRITICAL)


NO_VALUE = object()


def classify(seq, key=None, value=None):
    d = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        if k in d:
            d[k].append(v)
        else:
            d[k] = [v]
    return d


def _deserialize(data, namespace, memo):
    if isinstance(data, dict):
        if '__type__' in data:  ##

            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


class Serialize:
    #--

    def memo_serialize(self, types_to_memoize):
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo=None):
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        if hasattr(self, '_serialize'):
            self._serialize(res, memo)
        return res

    @classmethod
    def deserialize(cls, data, memo):
        namespace = getattr(cls, '__serialize_namespace__', [])
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)

        if hasattr(inst, '_deserialize'):
            inst._deserialize()

        return inst


class SerializeMemoizer(Serialize):
    #--

    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize):
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value):
        return isinstance(value, self.types_to_memoize)

    def serialize(self):
        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data, namespace, memo):
        return _deserialize(data, namespace, memo)


try:
    import regex  ##

except ImportError:
    regex = None

import sre_parse
import sre_constants
categ_pattern = re.compile(r'\\p{[A-Za-z_]+}')

def get_regexp_width(expr):
    if regex:
        ##

        ##

        ##

        regexp_final = re.sub(categ_pattern, 'A', expr)
    else:
        if re.search(categ_pattern, expr):
            raise ImportError('`regex` module must be installed in order to use Unicode categories.', expr)
        regexp_final = expr
    try:
        return [int(x) for x in sre_parse.parse(regexp_final).getwidth()]
    except sre_constants.error:
        if not regex:
            raise ValueError(expr)
        else:
            ##

            ##

            c = regex.compile(regexp_final)
            if c.match('') is None:
                return 1, sre_constants.MAXREPEAT
            else:
                return 0, sre_constants.MAXREPEAT


from collections import OrderedDict

class Meta:

    empty: bool
    line: int
    column: int
    start_pos: int
    end_line: int
    end_column: int
    end_pos: int
    orig_expansion: 'List[TerminalDef]'
    match_tree: bool

    def __init__(self):
        self.empty = True


class Tree:
    #--

    data: str
    children: 'List[Union[str, Tree]]'

    def __init__(self, data: str, children: 'List[Union[str, Tree]]', meta: Optional[Meta]=None) -> None:
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self) -> Meta:
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%r, %r)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [indent_str*level, self._pretty_label(), '\n']
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [indent_str*(level+1), '%s' % (n,), '\n']

        return l

    def pretty(self, indent_str: str='  ') -> str:
        #--
        return ''.join(self._pretty(0, indent_str))

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self) -> int:
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self) -> 'Iterator[Tree]':
        #--
        queue = [self]
        subtrees = OrderedDict()
        for subtree in queue:
            subtrees[id(subtree)] = subtree
            queue += [c for c in reversed(subtree.children)
                      if isinstance(c, Tree) and id(c) not in subtrees]

        del queue
        return reversed(list(subtrees.values()))

    def find_pred(self, pred: 'Callable[[Tree], bool]') -> 'Iterator[Tree]':
        #--
        return filter(pred, self.iter_subtrees())

    def find_data(self, data: str) -> 'Iterator[Tree]':
        #--
        return self.find_pred(lambda t: t.data == data)


from inspect import getmembers, getmro

_T = TypeVar('_T')
_R = TypeVar('_R')
_FUNC = Callable[..., _T]
_DECORATED = Union[_FUNC, type]

class _DiscardType:
    #--

    def __repr__(self):
        return "lark.visitors.Discard"

Discard = _DiscardType()

##


class _Decoratable:
    #--

    @classmethod
    def _apply_v_args(cls, visit_wrapper):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            ##

            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(value):
                continue

            ##

            if isinstance(cls.__dict__[name], _VArgsWrapper):
                continue

            setattr(cls, name, _VArgsWrapper(cls.__dict__[name], visit_wrapper))
        return cls

    def __class_getitem__(cls, _):
        return cls


class Transformer(_Decoratable, ABC, Generic[_T]):
    #--
    __visit_tokens__ = True   ##


    def __init__(self,  visit_tokens: bool=True) -> None:
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)

    def _transform_children(self, children):
        for c in children:
            if isinstance(c, Tree):
                res = self._transform_tree(c)
            elif self.__visit_tokens__ and isinstance(c, Token):
                res = self._call_userfunc_token(c)
            else:
                res = c

            if res is not Discard:
                yield res

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree: Tree) -> _T:
        #--
        return self._transform_tree(tree)

    def __mul__(self, other: 'Transformer[_T]') -> 'TransformerChain[_T]':
        #--
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        #--
        return Tree(data, children, meta)

    def __default_token__(self, token):
        #--
        return token


def merge_transformers(base_transformer=None, **transformers_to_merge):
    #--
    if base_transformer is None:
        base_transformer = Transformer()
    for prefix, transformer in transformers_to_merge.items():
        for method_name in dir(transformer):
            method = getattr(transformer, method_name)
            if not callable(method):
                continue
            if method_name.startswith("_") or method_name == "transform":
                continue
            prefixed_method = prefix + "__" + method_name
            if hasattr(base_transformer, prefixed_method):
                raise AttributeError("Cannot merge: method '%s' appears more than once" % prefixed_method)

            setattr(base_transformer, prefixed_method, method)

    return base_transformer


class InlineTransformer(Transformer):   ##

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)

class TransformerChain(Generic[_T]):

    transformers: Tuple[Transformer[_T], ...]

    def __init__(self, *transformers: Transformer[_T]) -> None:
        self.transformers = transformers

    def transform(self, tree: Tree) -> _T:
        for t in self.transformers:
            tree = t.transform(tree)
        return tree

    def __mul__(self, other: Transformer[_T]) -> 'TransformerChain[_T]':
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    #--
    def _transform_tree(self, tree):           ##

        return self._call_userfunc(tree)

    def transform(self, tree):
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_NonRecursive(Transformer):
    #--

    def transform(self, tree):
        ##

        rev_postfix = []
        q = [tree]
        while q:
            t = q.pop()
            rev_postfix.append(t)
            if isinstance(t, Tree):
                q += t.children

        ##

        stack = []
        for x in reversed(rev_postfix):
            if isinstance(x, Tree):
                size = len(x.children)
                if size:
                    args = stack[-size:]
                    del stack[-size:]
                else:
                    args = []

                res = self._call_userfunc(x, args)
                if res is not Discard:
                    stack.append(res)

            elif self.__visit_tokens__ and isinstance(x, Token):
                res = self._call_userfunc_token(x)
                if res is not Discard:
                    stack.append(res)
            else:
                stack.append(x)

        t ,= stack  ##

        return t


class Transformer_InPlaceRecursive(Transformer):
    #--
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)


##


class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        #--
        return tree

    def __class_getitem__(cls, _):
        return cls


class Visitor(VisitorBase, ABC, Generic[_T]):
    #--

    def visit(self, tree: Tree) -> Tree:
        #--
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self, tree: Tree) -> Tree:
        #--
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree


class Visitor_Recursive(VisitorBase):
    #--

    def visit(self, tree: Tree) -> Tree:
        #--
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self,tree: Tree) -> Tree:
        #--
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree


class Interpreter(_Decoratable, ABC, Generic[_T]):
    #--

    def visit(self, tree: Tree) -> _T:
        f = getattr(self, tree.data)
        wrapper = getattr(f, 'visit_wrapper', None)
        if wrapper is not None:
            return f.visit_wrapper(f, tree.data, tree.children, tree.meta)
        else:
            return f(tree)

    def visit_children(self, tree: Tree) -> List[_T]:
        return [self.visit(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)


_InterMethod = Callable[[Type[Interpreter], _T], _R]

def visit_children_decor(func: _InterMethod) -> _InterMethod:
    #--
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner

##


def _apply_v_args(obj, visit_wrapper):
    try:
        _apply = obj._apply_v_args
    except AttributeError:
        return _VArgsWrapper(obj, visit_wrapper)
    else:
        return _apply(visit_wrapper)


class _VArgsWrapper:
    #--
    def __init__(self, func: Callable, visit_wrapper: Callable[[Callable, str, list, Any], Any]):
        if isinstance(func, _VArgsWrapper):
            func = func.base_func
        self.base_func = func
        self.visit_wrapper = visit_wrapper
        update_wrapper(self, func)

    def __call__(self, *args, **kwargs):
        return self.base_func(*args, **kwargs)

    def __get__(self, instance, owner=None):
        try:
            g = self.base_func.__get__
        except AttributeError:
            return self
        else:
            return _VArgsWrapper(g(instance, owner), self.visit_wrapper)

    def __set_name__(self, owner, name):
        try:
            f = self.base_func.__set_name__
        except AttributeError:
            return
        else:
            f(owner, name)


def _vargs_inline(f, _data, children, _meta):
    return f(*children)
def _vargs_meta_inline(f, _data, children, meta):
    return f(meta, *children)
def _vargs_meta(f, _data, children, meta):
    return f(meta, children)
def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))


def v_args(inline: bool = False, meta: bool = False, tree: bool = False, wrapper: Optional[Callable] = None) -> Callable[[_DECORATED], _DECORATED]:
    #--
    if tree and (meta or inline):
        raise ValueError("Visitor functions cannot combine 'tree' with 'meta' or 'inline'.")

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError("Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'.")
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_v_args(obj, func)
    return _visitor_args_dec



TOKEN_DEFAULT_PRIORITY = 0


class Symbol(Serialize):
    __slots__ = ('name',)

    name: str
    is_term: ClassVar[bool] = NotImplemented

    def __init__(self, name: str) -> None:
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)

    def renamed(self, f):
        return type(self)(f(self.name))


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term: ClassVar[bool] = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)

    def renamed(self, f):
        return type(self)(f(self.name), self.filter_out)


class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term: ClassVar[bool] = False


class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'template_source', 'empty_indices'

    keep_all_tokens: bool
    expand1: bool
    priority: Optional[int]
    template_source: Optional[str]
    empty_indices: Tuple[bool, ...]

    def __init__(self, keep_all_tokens: bool=False, expand1: bool=False, priority: Optional[int]=None, template_source: Optional[str]=None, empty_indices: Tuple[bool, ...]=()) -> None:
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.template_source = template_source
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
            self.template_source
        )


class Rule(Serialize):
    #--
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    def __init__(self, origin, expansion, order=0, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion



from copy import copy


class Pattern(Serialize, ABC):

    value: str
    flags: Collection[str]
    raw: Optional[str]
    type: ClassVar[str]

    def __init__(self, value: str, flags: Collection[str]=(), raw: Optional[str]=None) -> None:
        self.value = value
        self.flags = frozenset(flags)
        self.raw = raw

    def __repr__(self):
        return repr(self.to_regexp())

    ##

    def __hash__(self):
        return hash((type(self), self.value, self.flags))

    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    @abstractmethod
    def to_regexp(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def min_width(self) -> int:
        raise NotImplementedError()

    @property
    @abstractmethod
    def max_width(self) -> int:
        raise NotImplementedError()

    def _get_flags(self, value):
        for f in self.flags:
            value = ('(?%s:%s)' % (f, value))
        return value


class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags'

    type: ClassVar[str] = "str"

    def to_regexp(self) -> str:
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self) -> int:
        return len(self.value)

    @property
    def max_width(self) -> int:
        return len(self.value)


class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', '_width'

    type: ClassVar[str] = "re"

    def to_regexp(self) -> str:
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self) -> int:
        return self._get_width()[0]

    @property
    def max_width(self) -> int:
        return self._get_width()[1]


class TerminalDef(Serialize):
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    name: str
    pattern: Pattern
    priority: int

    def __init__(self, name: str, pattern: Pattern, priority: int=TOKEN_DEFAULT_PRIORITY) -> None:
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)

    def user_repr(self) -> str:
        if self.name.startswith('__'): ##

            return self.pattern.raw or self.name
        else:
            return self.name

_T = TypeVar('_T')

class Token(str):
    #--
    __slots__ = ('type', 'start_pos', 'value', 'line', 'column', 'end_line', 'end_column', 'end_pos')

    type: str
    start_pos: int
    value: Any
    line: int
    column: int
    end_line: int
    end_column: int
    end_pos: int

    def __new__(cls, type_, value, start_pos=None, line=None, column=None, end_line=None, end_column=None, end_pos=None):
        inst = super(Token, cls).__new__(cls, value)
        inst.type = type_
        inst.start_pos = start_pos
        inst.value = value
        inst.line = line
        inst.column = column
        inst.end_line = end_line
        inst.end_column = end_column
        inst.end_pos = end_pos
        return inst

    def update(self, type_: Optional[str]=None, value: Optional[Any]=None) -> 'Token':
        return Token.new_borrow_pos(
            type_ if type_ is not None else self.type,
            value if value is not None else self.value,
            self
        )

    @classmethod
    def new_borrow_pos(cls: Type[_T], type_: str, value: Any, borrow_t: 'Token') -> _T:
        return cls(type_, value, borrow_t.start_pos, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column, borrow_t.end_pos)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.start_pos, self.line, self.column))

    def __repr__(self):
        return 'Token(%r, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.start_pos, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return str.__eq__(self, other)

    __hash__ = str.__hash__


class LineCounter:
    __slots__ = 'char_pos', 'line', 'column', 'line_start_pos', 'newline_char'

    def __init__(self, newline_char):
        self.newline_char = newline_char
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def __eq__(self, other):
        if not isinstance(other, LineCounter):
            return NotImplemented

        return self.char_pos == other.char_pos and self.newline_char == other.newline_char

    def feed(self, token: Token, test_newline=True):
        #--
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1


class UnlessCallback:
    def __init__(self, scanner):
        self.scanner = scanner

    def __call__(self, t):
        res = self.scanner.match(t.value, 0)
        if res:
            _value, t.type = res
        return t


class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2


def _get_match(re_, regexp, s, flags):
    m = re_.match(regexp, s, flags)
    if m:
        return m.group(0)

def _create_unless(terminals, g_regex_flags, re_, use_bytes):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = []
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority != retok.priority:
                continue
            s = strtok.pattern.value
            if s == _get_match(re_, retok.pattern.to_regexp(), s, g_regex_flags):
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(Scanner(unless, g_regex_flags, re_, match_whole=True, use_bytes=use_bytes))

    new_terminals = [t for t in terminals if t not in embedded_strs]
    return new_terminals, callback


class Scanner:
    def __init__(self, terminals, g_regex_flags, re_, use_bytes, match_whole=False):
        self.terminals = terminals
        self.g_regex_flags = g_regex_flags
        self.re_ = re_
        self.use_bytes = use_bytes
        self.match_whole = match_whole

        self.allowed_types = {t.name for t in self.terminals}

        self._mres = self._build_mres(terminals, len(terminals))

    def _build_mres(self, terminals, max_size):
        ##

        ##

        ##

        postfix = '$' if self.match_whole else ''
        mres = []
        while terminals:
            pattern = u'|'.join(u'(?P<%s>%s)' % (t.name, t.pattern.to_regexp() + postfix) for t in terminals[:max_size])
            if self.use_bytes:
                pattern = pattern.encode('latin-1')
            try:
                mre = self.re_.compile(pattern, self.g_regex_flags)
            except AssertionError:  ##

                return self._build_mres(terminals, max_size//2)

            mres.append((mre, {i: n for n, i in mre.groupindex.items()}))
            terminals = terminals[max_size:]
        return mres

    def match(self, text, pos):
        for mre, type_from_index in self._mres:
            m = mre.match(text, pos)
            if m:
                return m.group(0), type_from_index[m.lastindex]


def _regexp_has_newline(r: str):
    #--
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)


class LexerState:
    __slots__ = 'text', 'line_ctr', 'last_token'

    def __init__(self, text, line_ctr, last_token=None):
        self.text = text
        self.line_ctr = line_ctr
        self.last_token = last_token

    def __eq__(self, other):
        if not isinstance(other, LexerState):
            return NotImplemented

        return self.text is other.text and self.line_ctr == other.line_ctr and self.last_token == other.last_token

    def __copy__(self):
        return type(self)(self.text, copy(self.line_ctr), self.last_token)


_Callback = Callable[[Token], Token]

class Lexer(ABC):
    #--
    @abstractmethod
    def lex(self, lexer_state: LexerState, parser_state: Any) -> Iterator[Token]:
        return NotImplemented

    def make_lexer_state(self, text):
        line_ctr = LineCounter(b'\n' if isinstance(text, bytes) else '\n')
        return LexerState(text, line_ctr)


class BasicLexer(Lexer):

    terminals: Collection[TerminalDef]
    ignore_types: FrozenSet[str]
    newline_types: FrozenSet[str]
    user_callbacks: Dict[str, _Callback]
    callback: Dict[str, _Callback]
    re: ModuleType

    def __init__(self, conf: 'LexerConf') -> None:
        terminals = list(conf.terminals)
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        self.re = conf.re_module

        if not conf.skip_validation:
            ##

            for t in terminals:
                try:
                    self.re.compile(t.pattern.to_regexp(), conf.g_regex_flags)
                except self.re.error:
                    raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

                if t.pattern.min_width == 0:
                    raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))

            if not (set(conf.ignore) <= {t.name for t in terminals}):
                raise LexError("Ignore terminals are not defined: %s" % (set(conf.ignore) - {t.name for t in terminals}))

        ##

        self.newline_types = frozenset(t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp()))
        self.ignore_types = frozenset(conf.ignore)

        terminals.sort(key=lambda x: (-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = conf.callbacks
        self.g_regex_flags = conf.g_regex_flags
        self.use_bytes = conf.use_bytes
        self.terminals_by_name = conf.terminals_by_name

        self._scanner = None

    def _build_scanner(self):
        terminals, self.callback = _create_unless(self.terminals, self.g_regex_flags, self.re, self.use_bytes)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                ##

                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self._scanner = Scanner(terminals, self.g_regex_flags, self.re, self.use_bytes)

    @property
    def scanner(self):
        if self._scanner is None:
            self._build_scanner()
        return self._scanner

    def match(self, text, pos):
        return self.scanner.match(text, pos)

    def lex(self, state: LexerState, parser_state: Any) -> Iterator[Token]:
        with suppress(EOFError):
            while True:
                yield self.next_token(state, parser_state)

    def next_token(self, lex_state: LexerState, parser_state: Any=None) -> Token:
        line_ctr = lex_state.line_ctr
        while line_ctr.char_pos < len(lex_state.text):
            res = self.match(lex_state.text, line_ctr.char_pos)
            if not res:
                allowed = self.scanner.allowed_types - self.ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(lex_state.text, line_ctr.char_pos, line_ctr.line, line_ctr.column,
                                           allowed=allowed, token_history=lex_state.last_token and [lex_state.last_token],
                                           state=parser_state, terminals_by_name=self.terminals_by_name)

            value, type_ = res

            if type_ not in self.ignore_types:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                line_ctr.feed(value, type_ in self.newline_types)
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in self.callback:
                    t = self.callback[t.type](t)
                    if not isinstance(t, Token):
                        raise LexError("Callbacks must return a token (returned %r)" % t)
                lex_state.last_token = t
                return t
            else:
                if type_ in self.callback:
                    t2 = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                    self.callback[type_](t2)
                line_ctr.feed(value, type_ in self.newline_types)

        ##

        raise EOFError(self)


class ContextualLexer(Lexer):

    lexers: Dict[str, BasicLexer]
    root_lexer: BasicLexer

    def __init__(self, conf: 'LexerConf', states: Dict[str, Collection[str]], always_accept: Collection[str]=()) -> None:
        terminals = list(conf.terminals)
        terminals_by_name = conf.terminals_by_name

        trad_conf = copy(conf)
        trad_conf.terminals = terminals

        lexer_by_tokens = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(conf.ignore) | set(always_accept)
                lexer_conf = copy(trad_conf)
                lexer_conf.terminals = [terminals_by_name[n] for n in accepts if n in terminals_by_name]
                lexer = BasicLexer(lexer_conf)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        assert trad_conf.terminals is terminals
        self.root_lexer = BasicLexer(trad_conf)

    def make_lexer_state(self, text):
        return self.root_lexer.make_lexer_state(text)

    def lex(self, lexer_state: LexerState, parser_state: Any) -> Iterator[Token]:
        try:
            while True:
                lexer = self.lexers[parser_state.position]
                yield lexer.next_token(lexer_state, parser_state)
        except EOFError:
            pass
        except UnexpectedCharacters as e:
            ##

            ##

            try:
                last_token = lexer_state.last_token  ##

                token = self.root_lexer.next_token(lexer_state, parser_state)
                raise UnexpectedToken(token, e.allowed, state=parser_state, token_history=[last_token], terminals_by_name=self.root_lexer.terminals_by_name)
            except UnexpectedCharacters:
                raise e  ##


class LexerThread:
    #--

    def __init__(self, lexer, text):
        self.lexer = lexer
        self.state = lexer.make_lexer_state(text)

    def lex(self, parser_state):
        return self.lexer.lex(self.state, parser_state)

    def __copy__(self):
        copied = object.__new__(LexerThread)
        copied.lexer = self.lexer
        copied.state = copy(self.state)
        return copied


_Callback = Callable[[Token], Token]

class LexerConf(Serialize):
    __serialize_fields__ = 'terminals', 'ignore', 'g_regex_flags', 'use_bytes', 'lexer_type'
    __serialize_namespace__ = TerminalDef,

    terminals: Collection[TerminalDef]
    re_module: ModuleType
    ignore: Collection[str]
    postlex: 'Optional[PostLex]'
    callbacks: Dict[str, _Callback]
    g_regex_flags: int
    skip_validation: bool
    use_bytes: bool

    def __init__(self, terminals: Collection[TerminalDef], re_module: ModuleType, ignore: Collection[str]=(), postlex: 'Optional[PostLex]'=None, callbacks: Optional[Dict[str, _Callback]]=None, g_regex_flags: int=0, skip_validation: bool=False, use_bytes: bool=False):
        self.terminals = terminals
        self.terminals_by_name = {t.name: t for t in self.terminals}
        assert len(self.terminals) == len(self.terminals_by_name)
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}
        self.g_regex_flags = g_regex_flags
        self.re_module = re_module
        self.skip_validation = skip_validation
        self.use_bytes = use_bytes
        self.lexer_type = None

    def _deserialize(self):
        self.terminals_by_name = {t.name: t for t in self.terminals}

    def __deepcopy__(self, memo=None):
        return type(self)(
            deepcopy(self.terminals, memo),
            self.re_module,
            deepcopy(self.ignore, memo),
            deepcopy(self.postlex, memo),
            deepcopy(self.callbacks, memo),
            deepcopy(self.g_regex_flags, memo),
            deepcopy(self.skip_validation, memo),
            deepcopy(self.use_bytes, memo),
        )


class ParserConf(Serialize):
    __serialize_fields__ = 'rules', 'start', 'parser_type'

    def __init__(self, rules, callbacks, start):
        assert isinstance(start, list)
        self.rules = rules
        self.callbacks = callbacks
        self.start = start

        self.parser_type = None


from functools import partial, wraps
from itertools import repeat, product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)



class PropagatePositions:
    def __init__(self, node_builder, node_filter=None):
        self.node_builder = node_builder
        self.node_filter = node_filter

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            ##

            ##

            ##

            ##


            res_meta = res.meta

            first_meta = self._pp_get_meta(children)
            if first_meta is not None:
                if not hasattr(res_meta, 'line'):
                    ##

                    res_meta.line = getattr(first_meta, 'container_line', first_meta.line)
                    res_meta.column = getattr(first_meta, 'container_column', first_meta.column)
                    res_meta.start_pos = getattr(first_meta, 'container_start_pos', first_meta.start_pos)
                    res_meta.empty = False

                res_meta.container_line = getattr(first_meta, 'container_line', first_meta.line)
                res_meta.container_column = getattr(first_meta, 'container_column', first_meta.column)

            last_meta = self._pp_get_meta(reversed(children))
            if last_meta is not None:
                if not hasattr(res_meta, 'end_line'):
                    res_meta.end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
                    res_meta.end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)
                    res_meta.end_pos = getattr(last_meta, 'container_end_pos', last_meta.end_pos)
                    res_meta.empty = False

                res_meta.container_end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
                res_meta.container_end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)

        return res

    def _pp_get_meta(self, children):
        for c in children:
            if self.node_filter is not None and not self.node_filter(c):
                continue
            if isinstance(c, Tree):
                if not c.meta.empty:
                    return c.meta
            elif isinstance(c, Token):
                return c

def make_propagate_positions(option):
    if callable(option):
        return partial(PropagatePositions, node_filter=option)
    elif option is True:
        return PropagatePositions
    elif option is False:
        return None

    raise ConfigurationError('Invalid option for propagate_positions: %r' % option)


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR(ChildFilter):
    #--

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR_NoPlaceholders(ChildFilter):
    #--
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)


def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')


def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices: List[bool]):
    ##

    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            ##

            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])


class AmbiguousExpander:
    #--
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(t):
            return hasattr(t, 'data') and t.data == '_ambig'

        ##

        ##

        ##

        ##

        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                child.expand_kids_by_data('_ambig')

        if not ambiguous:
            return self.node_builder(children)

        expand = [iter(child.children) if i in ambiguous else repeat(child) for i, child in enumerate(children)]
        return self.tree_class('_ambig', [self.node_builder(list(f[0])) for f in product(zip(*expand))])


def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)


class AmbiguousIntermediateExpander:
    #--

    def __init__(self, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class

    def __call__(self, children):
        def _is_iambig_tree(child):
            return hasattr(child, 'data') and child.data == '_iambig'

        def _collapse_iambig(children):
            #--

            ##

            ##

            if children and _is_iambig_tree(children[0]):
                iambig_node = children[0]
                result = []
                for grandchild in iambig_node.children:
                    collapsed = _collapse_iambig(grandchild.children)
                    if collapsed:
                        for child in collapsed:
                            child.children += children[1:]
                        result += collapsed
                    else:
                        new_tree = self.tree_class('_inter', grandchild.children + children[1:])
                        result.append(new_tree)
                return result

        collapsed = _collapse_iambig(children)
        if collapsed:
            processed_nodes = [self.node_builder(c.children) for c in collapsed]
            return self.tree_class('_ambig', processed_nodes)

        return self.node_builder(children)



def inplace_transformer(func):
    @wraps(func)
    def f(children):
        ##

        tree = Tree(func.__name__, children)
        return func(tree)
    return f


def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")

    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)
    return f


class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        propagate_positions = make_propagate_positions(self.propagate_positions)

        for rule in rules:
            options = rule.options
            keep_all_tokens = options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders else None),
                propagate_positions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
                self.ambiguous and partial(AmbiguousIntermediateExpander, self.tree_class)
            ]))

            yield rule, wrapper_chain

    def create_callback(self, transformer=None):
        callbacks = {}

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.options.template_source or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                elif isinstance(transformer, Transformer_InPlace):
                    f = inplace_transformer(f)
            except AttributeError:
                f = partial(self.tree_class, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks



class LALR_Parser(Serialize):
    def __init__(self, parser_conf, debug=False):
        analysis = LALR_Analyzer(parser_conf, debug=debug)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks, debug)

    @classmethod
    def deserialize(cls, data, memo, callbacks, debug=False):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks, debug)
        return inst

    def serialize(self, memo):
        return self._parse_table.serialize(memo)
    
    def parse_interactive(self, lexer, start):
        return self.parser.parse(lexer, start, start_interactive=True)

    def parse(self, lexer, start, on_error=None):
        try:
            return self.parser.parse(lexer, start)
        except UnexpectedInput as e:
            if on_error is None:
                raise

            while True:
                if isinstance(e, UnexpectedCharacters):
                    s = e.interactive_parser.lexer_state.state
                    p = s.line_ctr.char_pos

                if not on_error(e):
                    raise e

                if isinstance(e, UnexpectedCharacters):
                    ##

                    if p == s.line_ctr.char_pos:
                        s.line_ctr.feed(s.text[p:p+1])

                try:
                    return e.interactive_parser.resume_parse()
                except UnexpectedToken as e2:
                    if (isinstance(e, UnexpectedToken)
                        and e.token.type == e2.token.type == '$END'
                        and e.interactive_parser == e2.interactive_parser):
                        ##

                        raise e2
                    e = e2
                except UnexpectedCharacters as e2:
                    e = e2


class ParseConf:
    __slots__ = 'parse_table', 'callbacks', 'start', 'start_state', 'end_state', 'states'

    def __init__(self, parse_table, callbacks, start):
        self.parse_table = parse_table

        self.start_state = self.parse_table.start_states[start]
        self.end_state = self.parse_table.end_states[start]
        self.states = self.parse_table.states

        self.callbacks = callbacks
        self.start = start


class ParserState:
    __slots__ = 'parse_conf', 'lexer', 'state_stack', 'value_stack'

    def __init__(self, parse_conf, lexer, state_stack=None, value_stack=None):
        self.parse_conf = parse_conf
        self.lexer = lexer
        self.state_stack = state_stack or [self.parse_conf.start_state]
        self.value_stack = value_stack or []

    @property
    def position(self):
        return self.state_stack[-1]

    ##

    def __eq__(self, other):
        if not isinstance(other, ParserState):
            return NotImplemented
        return len(self.state_stack) == len(other.state_stack) and self.position == other.position

    def __copy__(self):
        return type(self)(
            self.parse_conf,
            self.lexer, ##

            copy(self.state_stack),
            deepcopy(self.value_stack),
        )

    def copy(self):
        return copy(self)

    def feed_token(self, token, is_end=False):
        state_stack = self.state_stack
        value_stack = self.value_stack
        states = self.parse_conf.states
        end_state = self.parse_conf.end_state
        callbacks = self.parse_conf.callbacks

        while True:
            state = state_stack[-1]
            try:
                action, arg = states[state][token.type]
            except KeyError:
                expected = {s for s in states[state].keys() if s.isupper()}
                raise UnexpectedToken(token, expected, state=self, interactive_parser=None)

            assert arg != end_state

            if action is Shift:
                ##

                assert not is_end
                state_stack.append(arg)
                value_stack.append(token if token.type not in callbacks else callbacks[token.type](token))
                return
            else:
                ##

                rule = arg
                size = len(rule.expansion)
                if size:
                    s = value_stack[-size:]
                    del state_stack[-size:]
                    del value_stack[-size:]
                else:
                    s = []

                value = callbacks[rule](s)

                _action, new_state = states[state_stack[-1]][rule.origin.name]
                assert _action is Shift
                state_stack.append(new_state)
                value_stack.append(value)

                if is_end and state_stack[-1] == end_state:
                    return value_stack[-1]

class _Parser:
    def __init__(self, parse_table, callbacks, debug=False):
        self.parse_table = parse_table
        self.callbacks = callbacks
        self.debug = debug

    def parse(self, lexer, start, value_stack=None, state_stack=None, start_interactive=False):
        parse_conf = ParseConf(self.parse_table, self.callbacks, start)
        parser_state = ParserState(parse_conf, lexer, state_stack, value_stack)
        if start_interactive:
            return InteractiveParser(self, parser_state, parser_state.lexer)
        return self.parse_from_state(parser_state)
    

    def parse_from_state(self, state):
        ##

        try:
            token = None
            for token in state.lexer.lex(state):
                state.feed_token(token)

            end_token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
            return state.feed_token(end_token, True)
        except UnexpectedInput as e:
            try:
                e.interactive_parser = InteractiveParser(self, state, state.lexer)
            except NameError:
                pass
            raise e
        except Exception as e:
            if self.debug:
                print("")
                print("STATE STACK DUMP")
                print("----------------")
                for i, s in enumerate(state.state_stack):
                    print('%d)' % i , s)
                print("")

            raise


class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')


class ParseTable:
    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()
        rules = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])


class IntParseTable(ParseTable):

    @classmethod
    def from_ParseTable(cls, parse_table):
        enum = list(parse_table.states)
        state_to_idx = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



def _wrap_lexer(lexer_class):
    future_interface = getattr(lexer_class, '__future_interface__', False)
    if future_interface:
        return lexer_class
    else:
        class CustomLexerWrapper(Lexer):
            def __init__(self, lexer_conf):
                self.lexer = lexer_class(lexer_conf)
            def lex(self, lexer_state, parser_state):
                return self.lexer.lex(lexer_state.text)
        return CustomLexerWrapper


class MakeParsingFrontend:
    def __init__(self, parser_type, lexer_type):
        self.parser_type = parser_type
        self.lexer_type = lexer_type

    def deserialize(self, data, memo, lexer_conf, callbacks, options):
        parser_conf = ParserConf.deserialize(data['parser_conf'], memo)
        parser = LALR_Parser.deserialize(data['parser'], memo, callbacks, options.debug)
        parser_conf.callbacks = callbacks
        return ParsingFrontend(lexer_conf, parser_conf, options, parser=parser)

    ##



class ParsingFrontend(Serialize):
    __serialize_fields__ = 'lexer_conf', 'parser_conf', 'parser'

    def __init__(self, lexer_conf, parser_conf, options, parser=None):
        self.parser_conf = parser_conf
        self.lexer_conf = lexer_conf
        self.options = options

        ##

        if parser:  ##

            self.parser = parser
        else:
            create_parser = {
                'lalr': create_lalr_parser,
                'earley': create_earley_parser,
                'cyk': CYK_FrontEnd,
            }[parser_conf.parser_type]
            self.parser = create_parser(lexer_conf, parser_conf, options)

        ##

        lexer_type = lexer_conf.lexer_type
        self.skip_lexer = False
        if lexer_type in ('dynamic', 'dynamic_complete'):
            assert lexer_conf.postlex is None
            self.skip_lexer = True
            return

        try:
            create_lexer = {
                'basic': create_basic_lexer,
                'contextual': create_contextual_lexer,
            }[lexer_type]
        except KeyError:
            assert issubclass(lexer_type, Lexer), lexer_type
            self.lexer = _wrap_lexer(lexer_type)(lexer_conf)
        else:
            self.lexer = create_lexer(lexer_conf, self.parser, lexer_conf.postlex)

        if lexer_conf.postlex:
            self.lexer = PostLexConnector(self.lexer, lexer_conf.postlex)
    
    def _verify_start(self, start=None):
        if start is None:
            start_decls = self.parser_conf.start
            if len(start_decls) > 1:
                raise ConfigurationError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start_decls)
            start ,= start_decls
        elif start not in self.parser_conf.start:
            raise ConfigurationError("Unknown start rule %s. Must be one of %r" % (start, self.parser_conf.start))
        return start

    def parse(self, text, start=None, on_error=None):
        chosen_start = self._verify_start(start)
        stream = text if self.skip_lexer else LexerThread(self.lexer, text)
        kw = {} if on_error is None else {'on_error': on_error}
        return self.parser.parse(stream, chosen_start, **kw)
    
    def parse_interactive(self, text=None, start=None):
        chosen_start = self._verify_start(start)
        if self.parser_conf.parser_type != 'lalr':
            raise ConfigurationError("parse_interactive() currently only works with parser='lalr' ")
        stream = text if self.skip_lexer else LexerThread(self.lexer, text)
        return self.parser.parse_interactive(stream, chosen_start)


def get_frontend(parser, lexer):
    assert_config(parser, ('lalr', 'earley', 'cyk'))
    if not isinstance(lexer, type):     ##

        expected = {
            'lalr': ('basic', 'contextual'),
            'earley': ('basic', 'dynamic', 'dynamic_complete'),
            'cyk': ('basic', ),
         }[parser]
        assert_config(lexer, expected, 'Parser %r does not support lexer %%r, expected one of %%s' % parser)

    return MakeParsingFrontend(parser, lexer)


def _get_lexer_callbacks(transformer, terminals):
    result = {}
    for terminal in terminals:
        callback = getattr(transformer, terminal.name, None)
        if callback is not None:
            result[terminal.name] = callback
    return result

class PostLexConnector:
    def __init__(self, lexer, postlexer):
        self.lexer = lexer
        self.postlexer = postlexer

    def make_lexer_state(self, text):
        return self.lexer.make_lexer_state(text)

    def lex(self, lexer_state, parser_state):
        i = self.lexer.lex(lexer_state, parser_state)
        return self.postlexer.process(i)



def create_basic_lexer(lexer_conf, parser, postlex):
    return BasicLexer(lexer_conf)

def create_contextual_lexer(lexer_conf, parser, postlex):
    states = {idx:list(t.keys()) for idx, t in parser._parse_table.states.items()}
    always_accept = postlex.always_accept if postlex else ()
    return ContextualLexer(lexer_conf, states, always_accept=always_accept)

def create_lalr_parser(lexer_conf, parser_conf, options=None):
    debug = options.debug if options else False
    return LALR_Parser(parser_conf, debug=debug)


create_earley_parser = NotImplemented
CYK_FrontEnd = NotImplemented



class PostLex(ABC):
    @abstractmethod
    def process(self, stream: Iterator[Token]) -> Iterator[Token]:
        return stream

    always_accept: Iterable[str] = ()

class LarkOptions(Serialize):
    #--

    start: List[str]
    debug: bool
    transformer: 'Optional[Transformer]'
    propagate_positions: Union[bool, str]
    maybe_placeholders: bool
    cache: Union[bool, str]
    regex: bool
    g_regex_flags: int
    keep_all_tokens: bool
    tree_class: Any
    parser: 'Literal["earley", "lalr", "cyk", "auto"]'
    lexer: 'Union[Literal["auto", "basic", "contextual", "dynamic", "dynamic_complete"], Type[Lexer]]'
    ambiguity: 'Literal["auto", "resolve", "explicit", "forest"]'
    postlex: Optional[PostLex]
    priority: 'Optional[Literal["auto", "normal", "invert"]]'
    lexer_callbacks: Dict[str, Callable[[Token], Token]]
    use_bytes: bool
    edit_terminals: Optional[Callable[[TerminalDef], TerminalDef]]
    import_paths: 'List[Union[str, Callable[[Union[None, str, PackageResource], str], Tuple[str, str]]]]'
    source_path: Optional[str]

    OPTIONS_DOC = """
    **===  General Options  ===**

    start
            The start symbol. Either a string, or a list of strings for multiple possible starts (Default: "start")
    debug
            Display debug information and extra warnings. Use only when debugging (Default: ``False``)
            When used with Earley, it generates a forest graph as "sppf.png", if 'dot' is installed.
    transformer
            Applies the transformer to every parse tree (equivalent to applying it after the parse, but faster)
    propagate_positions
            Propagates (line, column, end_line, end_column) attributes into all tree branches.
            Accepts ``False``, ``True``, or a callable, which will filter which nodes to ignore when propagating.
    maybe_placeholders
            When ``True``, the ``[]`` operator returns ``None`` when not matched.
            When ``False``,  ``[]`` behaves like the ``?`` operator, and returns no value at all.
            (default= ``True``)
    cache
            Cache the results of the Lark grammar analysis, for x2 to x3 faster loading. LALR only for now.

            - When ``False``, does nothing (default)
            - When ``True``, caches to a temporary file in the local directory
            - When given a string, caches to the path pointed by the string
    regex
            When True, uses the ``regex`` module instead of the stdlib ``re``.
    g_regex_flags
            Flags that are applied to all terminals (both regex and strings)
    keep_all_tokens
            Prevent the tree builder from automagically removing "punctuation" tokens (Default: ``False``)
    tree_class
            Lark will produce trees comprised of instances of this class instead of the default ``lark.Tree``.

    **=== Algorithm Options ===**

    parser
            Decides which parser engine to use. Accepts "earley" or "lalr". (Default: "earley").
            (there is also a "cyk" option for legacy)
    lexer
            Decides whether or not to use a lexer stage

            - "auto" (default): Choose for me based on the parser
            - "basic": Use a basic lexer
            - "contextual": Stronger lexer (only works with parser="lalr")
            - "dynamic": Flexible and powerful (only with parser="earley")
            - "dynamic_complete": Same as dynamic, but tries *every* variation of tokenizing possible.
    ambiguity
            Decides how to handle ambiguity in the parse. Only relevant if parser="earley"

            - "resolve": The parser will automatically choose the simplest derivation
              (it chooses consistently: greedy for tokens, non-greedy for rules)
            - "explicit": The parser will return all derivations wrapped in "_ambig" tree nodes (i.e. a forest).
            - "forest": The parser will return the root of the shared packed parse forest.

    **=== Misc. / Domain Specific Options ===**

    postlex
            Lexer post-processing (Default: ``None``) Only works with the basic and contextual lexers.
    priority
            How priorities should be evaluated - "auto", ``None``, "normal", "invert" (Default: "auto")
    lexer_callbacks
            Dictionary of callbacks for the lexer. May alter tokens during lexing. Use with caution.
    use_bytes
            Accept an input of type ``bytes`` instead of ``str``.
    edit_terminals
            A callback for editing the terminals before parse.
    import_paths
            A List of either paths or loader functions to specify from where grammars are imported
    source_path
            Override the source of from where the grammar was loaded. Useful for relative imports and unconventional grammar loading
    **=== End of Options ===**
    """
    if __doc__:
        __doc__ += OPTIONS_DOC


    ##

    ##

    ##

    ##

    ##

    ##

    _defaults: Dict[str, Any] = {
        'debug': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'priority': 'auto',
        'ambiguity': 'auto',
        'regex': False,
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': True,
        'edit_terminals': None,
        'g_regex_flags': 0,
        'use_bytes': False,
        'import_paths': [],
        'source_path': None,
    }

    def __init__(self, options_dict):
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool) and name not in ('cache', 'use_bytes', 'propagate_positions'):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], str):
            options['start'] = [options['start']]

        self.__dict__['options'] = options


        assert_config(self.parser, ('earley', 'lalr', 'cyk', None))

        if self.parser == 'earley' and self.transformer:
            raise ConfigurationError('Cannot specify an embedded transformer when using the Earley algorithm. '
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ConfigurationError("Unknown options: %s" % o.keys())

    def __getattr__(self, name):
        try:
            return self.__dict__['options'][name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name, value):
        assert_config(name, self.options.keys(), "%r isn't a valid option. Expected one of: %s")
        self.options[name] = value

    def serialize(self, memo):
        return self.options

    @classmethod
    def deserialize(cls, data, memo):
        return cls(data)


##

##

_LOAD_ALLOWED_OPTIONS = {'postlex', 'transformer', 'lexer_callbacks', 'use_bytes', 'debug', 'g_regex_flags', 'regex', 'propagate_positions', 'tree_class'}

_VALID_PRIORITY_OPTIONS = ('auto', 'normal', 'invert', None)
_VALID_AMBIGUITY_OPTIONS = ('auto', 'resolve', 'explicit', 'forest')


_T = TypeVar('_T')

class Lark(Serialize):
    #--

    source_path: str
    source_grammar: str
    grammar: 'Grammar'
    options: LarkOptions
    lexer: Lexer
    terminals: List[TerminalDef]

    def __init__(self, grammar: 'Union[Grammar, str, IO[str]]', **options) -> None:
        self.options = LarkOptions(options)

        ##

        use_regex = self.options.regex
        if use_regex:
            if regex:
                re_module = regex
            else:
                raise ImportError('`regex` module must be installed if calling `Lark(regex=True)`.')
        else:
            re_module = re

        ##

        if self.options.source_path is None:
            try:
                self.source_path = grammar.name
            except AttributeError:
                self.source_path = '<string>'
        else:
            self.source_path = self.options.source_path

        ##

        try:
            read = grammar.read
        except AttributeError:
            pass
        else:
            grammar = read()

        cache_fn = None
        cache_md5 = None
        if isinstance(grammar, str):
            self.source_grammar = grammar
            if self.options.use_bytes:
                if not isascii(grammar):
                    raise ConfigurationError("Grammar must be ascii only, when use_bytes=True")

            if self.options.cache:
                if self.options.parser != 'lalr':
                    raise ConfigurationError("cache only works with parser='lalr' for now")

                unhashable = ('transformer', 'postlex', 'lexer_callbacks', 'edit_terminals')
                options_str = ''.join(k+str(v) for k, v in options.items() if k not in unhashable)
                from . import __version__
                s = grammar + options_str + __version__ + str(sys.version_info[:2])
                cache_md5 = hashlib.md5(s.encode('utf8')).hexdigest()

                if isinstance(self.options.cache, str):
                    cache_fn = self.options.cache
                else:
                    if self.options.cache is not True:
                        raise ConfigurationError("cache argument must be bool or str")
                        
                    cache_fn = tempfile.gettempdir() + '/.lark_cache_%s_%s_%s.tmp' % (cache_md5, *sys.version_info[:2])

                if FS.exists(cache_fn):
                    logger.debug('Loading grammar from cache: %s', cache_fn)
                    ##

                    for name in (set(options) - _LOAD_ALLOWED_OPTIONS):
                        del options[name]
                    with FS.open(cache_fn, 'rb') as f:
                        old_options = self.options
                        try:
                            file_md5 = f.readline().rstrip(b'\n')
                            cached_used_files = pickle.load(f)
                            if file_md5 == cache_md5.encode('utf8') and verify_used_files(cached_used_files):
                                cached_parser_data = pickle.load(f)
                                self._load(cached_parser_data, **options)
                                return
                        except Exception: ##

                            logger.exception("Failed to load Lark from cache: %r. We will try to carry on." % cache_fn)
                            
                            ##

                            ##

                            self.options = old_options


            ##

            self.grammar, used_files = load_grammar(grammar, self.source_path, self.options.import_paths, self.options.keep_all_tokens)
        else:
            assert isinstance(grammar, Grammar)
            self.grammar = grammar


        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                if self.options.postlex is not None:
                    logger.info("postlex can't be used with the dynamic lexer, so we use 'basic' instead. "
                                "Consider using lalr with contextual instead of earley")
                    self.options.lexer = 'basic'
                else:
                    self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'basic'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        if isinstance(lexer, type):
            assert issubclass(lexer, Lexer)     ##

        else:
            assert_config(lexer, ('basic', 'contextual', 'dynamic', 'dynamic_complete'))
            if self.options.postlex is not None and 'dynamic' in lexer:
                raise ConfigurationError("Can't use postlex with a dynamic lexer. Use basic or contextual instead")

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            assert_config(self.options.parser, ('earley', 'cyk'), "%r doesn't support disambiguation. Use one of these parsers instead: %s")

        if self.options.priority == 'auto':
            self.options.priority = 'normal'

        if self.options.priority not in _VALID_PRIORITY_OPTIONS:
            raise ConfigurationError("invalid priority option: %r. Must be one of %r" % (self.options.priority, _VALID_PRIORITY_OPTIONS))
        if self.options.ambiguity not in _VALID_AMBIGUITY_OPTIONS:
            raise ConfigurationError("invalid ambiguity option: %r. Must be one of %r" % (self.options.ambiguity, _VALID_AMBIGUITY_OPTIONS))

        if self.options.parser is None:
            terminals_to_keep = '*'
        elif self.options.postlex is not None:
            terminals_to_keep = set(self.options.postlex.always_accept)
        else:
            terminals_to_keep = set()

        ##

        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start, terminals_to_keep)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name: t for t in self.terminals}

        ##

        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
            for term in self.terminals:
                term.priority = -term.priority
        ##

        ##

        ##

        elif self.options.priority is None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None
            for term in self.terminals:
                term.priority = 0

        ##

        self.lexer_conf = LexerConf(
                self.terminals, re_module, self.ignore_tokens, self.options.postlex,
                self.options.lexer_callbacks, self.options.g_regex_flags, use_bytes=self.options.use_bytes
            )

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

        if cache_fn:
            logger.debug('Saving grammar to cache: %s', cache_fn)
            with FS.open(cache_fn, 'wb') as f:
                assert cache_md5 is not None
                f.write(cache_md5.encode('utf8') + b'\n')
                pickle.dump(used_files, f)
                self.save(f, _LOAD_ALLOWED_OPTIONS)

    if __doc__:
        __doc__ += "\n\n" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self, dont_ignore=False):
        lexer_conf = self.lexer_conf
        if dont_ignore:
            from copy import copy
            lexer_conf = copy(lexer_conf)
            lexer_conf.ignore = ()
        return BasicLexer(lexer_conf)

    def _prepare_callbacks(self):
        self._callbacks = {}
        ##

        if self.options.ambiguity != 'forest':
            self._parse_tree_builder = ParseTreeBuilder(
                    self.rules,
                    self.options.tree_class or Tree,
                    self.options.propagate_positions,
                    self.options.parser != 'lalr' and self.options.ambiguity == 'explicit',
                    self.options.maybe_placeholders
                )
            self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)
        self._callbacks.update(_get_lexer_callbacks(self.options.transformer, self.terminals))

    def _build_parser(self):
        self._prepare_callbacks()
        parser_class = get_frontend(self.options.parser, self.options.lexer)
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return parser_class(self.lexer_conf, parser_conf, options=self.options)

    def save(self, f, exclude_options: Collection[str] = ()):
        #--
        data, m = self.memo_serialize([TerminalDef, Rule])
        if exclude_options:
            data["options"] = {n: v for n, v in data["options"].items() if n not in exclude_options}
        pickle.dump({'data': data, 'memo': m}, f, protocol=pickle.HIGHEST_PROTOCOL)

    @classmethod
    def load(cls, f):
        #--
        inst = cls.__new__(cls)
        return inst._load(f)

    def _deserialize_lexer_conf(self, data, memo, options):
        lexer_conf = LexerConf.deserialize(data['lexer_conf'], memo)
        lexer_conf.callbacks = options.lexer_callbacks or {}
        lexer_conf.re_module = regex if options.regex else re
        lexer_conf.use_bytes = options.use_bytes
        lexer_conf.g_regex_flags = options.g_regex_flags
        lexer_conf.skip_validation = True
        lexer_conf.postlex = options.postlex
        return lexer_conf

    def _load(self, f, **kwargs):
        if isinstance(f, dict):
            d = f
        else:
            d = pickle.load(f)
        memo_json = d['memo']
        data = d['data']

        assert memo_json
        memo = SerializeMemoizer.deserialize(memo_json, {'Rule': Rule, 'TerminalDef': TerminalDef}, {})
        options = dict(data['options'])
        if (set(kwargs) - _LOAD_ALLOWED_OPTIONS) & set(LarkOptions._defaults):
            raise ConfigurationError("Some options are not allowed when loading a Parser: {}"
                             .format(set(kwargs) - _LOAD_ALLOWED_OPTIONS))
        options.update(kwargs)
        self.options = LarkOptions.deserialize(options, memo)
        self.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        self.source_path = '<deserialized>'
        parser_class = get_frontend(self.options.parser, self.options.lexer)
        self.lexer_conf = self._deserialize_lexer_conf(data['parser'], memo, self.options)
        self.terminals = self.lexer_conf.terminals
        self._prepare_callbacks()
        self._terminals_dict = {t.name: t for t in self.terminals}
        self.parser = parser_class.deserialize(
            data['parser'],
            memo,
            self.lexer_conf,
            self._callbacks,
            self.options,  ##

        )
        return self

    @classmethod
    def _load_from_dict(cls, data, memo, **kwargs):
        inst = cls.__new__(cls)
        return inst._load({'data': data, 'memo': memo}, **kwargs)

    @classmethod
    def open(cls: Type[_T], grammar_filename: str, rel_to: Optional[str]=None, **options) -> _T:
        #--
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    @classmethod
    def open_from_package(cls: Type[_T], package: str, grammar_path: str, search_paths: Tuple[str, ...]=("",), **options) -> _T:
        #--
        package_loader = FromPackageLoader(package, search_paths)
        full_path, text = package_loader(None, grammar_path)
        options.setdefault('source_path', full_path)
        options.setdefault('import_paths', [])
        options['import_paths'].append(package_loader)
        return cls(text, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source_path, self.options.parser, self.options.lexer)


    def lex(self, text: str, dont_ignore: bool=False) -> Iterator[Token]:
        #--
        if not hasattr(self, 'lexer') or dont_ignore:
            lexer = self._build_lexer(dont_ignore)
        else:
            lexer = self.lexer
        lexer_thread = LexerThread(lexer, text)
        stream = lexer_thread.lex(None)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name: str) -> TerminalDef:
        #--
        return self._terminals_dict[name]
    
    def parse_interactive(self, text: Optional[str]=None, start: Optional[str]=None) -> 'InteractiveParser':
        #--
        return self.parser.parse_interactive(text, start=start)

    def parse(self, text: str, start: Optional[str]=None, on_error: 'Optional[Callable[[UnexpectedInput], bool]]'=None) -> Tree:
        #--
        return self.parser.parse(text, start=start, on_error=on_error)




class DedentError(LarkError):
    pass

class Indenter(PostLex, ABC):
    paren_level: int
    indent_level: List[int]

    def __init__(self) -> None:
        self.paren_level = 0
        self.indent_level = [0]
        assert self.tab_len > 0

    def handle_NL(self, token: Token) -> Iterator[Token]:
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] ##

        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            if indent != self.indent_level[-1]:
                raise DedentError('Unexpected dedent to column %s. Expected dedent to %s' % (indent, self.indent_level[-1]))

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                yield from self.handle_NL(token)
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    ##

    @property
    def always_accept(self):
        return (self.NL_type,)

    @property
    @abstractmethod
    def NL_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def OPEN_PAREN_types(self) -> List[str]:
        raise NotImplementedError()

    @property
    @abstractmethod
    def CLOSE_PAREN_types(self) -> List[str]:
        raise NotImplementedError()

    @property
    @abstractmethod
    def INDENT_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def DEDENT_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def tab_len(self) -> int:
        raise NotImplementedError()


class PythonIndenter(Indenter):
    NL_type = '_NEWLINE'
    OPEN_PAREN_types = ['LPAR', 'LSQB', 'LBRACE']
    CLOSE_PAREN_types = ['RPAR', 'RSQB', 'RBRACE']
    INDENT_type = '_INDENT'
    DEDENT_type = '_DEDENT'
    tab_len = 8


import pickle, zlib, base64
DATA = (
{'parser': {'lexer_conf': {'terminals': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}, {'@': 29}, {'@': 30}, {'@': 31}, {'@': 32}, {'@': 33}, {'@': 34}, {'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}, {'@': 40}, {'@': 41}, {'@': 42}, {'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}, {'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}, {'@': 66}, {'@': 67}, {'@': 68}, {'@': 69}, {'@': 70}, {'@': 71}, {'@': 72}, {'@': 73}, {'@': 74}, {'@': 75}, {'@': 76}, {'@': 77}, {'@': 78}, {'@': 79}, {'@': 80}, {'@': 81}, {'@': 82}, {'@': 83}, {'@': 84}, {'@': 85}, {'@': 86}, {'@': 87}, {'@': 88}, {'@': 89}, {'@': 90}, {'@': 91}, {'@': 92}, {'@': 93}, {'@': 94}, {'@': 95}, {'@': 96}, {'@': 97}, {'@': 98}, {'@': 99}, {'@': 100}, {'@': 101}, {'@': 102}, {'@': 103}, {'@': 104}, {'@': 105}, {'@': 106}, {'@': 107}, {'@': 108}, {'@': 109}, {'@': 110}, {'@': 111}], 'ignore': ['__IGNORE_0', '__IGNORE_1', 'COMMENT'], 'g_regex_flags': 0, 'use_bytes': False, 'lexer_type': 'contextual', '__type__': 'LexerConf'}, 'parser_conf': {'rules': [{'@': 112}, {'@': 113}, {'@': 114}, {'@': 115}, {'@': 116}, {'@': 117}, {'@': 118}, {'@': 119}, {'@': 120}, {'@': 121}, {'@': 122}, {'@': 123}, {'@': 124}, {'@': 125}, {'@': 126}, {'@': 127}, {'@': 128}, {'@': 129}, {'@': 130}, {'@': 131}, {'@': 132}, {'@': 133}, {'@': 134}, {'@': 135}, {'@': 136}, {'@': 137}, {'@': 138}, {'@': 139}, {'@': 140}, {'@': 141}, {'@': 142}, {'@': 143}, {'@': 144}, {'@': 145}, {'@': 146}, {'@': 147}, {'@': 148}, {'@': 149}, {'@': 150}, {'@': 151}, {'@': 152}, {'@': 153}, {'@': 154}, {'@': 155}, {'@': 156}, {'@': 157}, {'@': 158}, {'@': 159}, {'@': 160}, {'@': 161}, {'@': 162}, {'@': 163}, {'@': 164}, {'@': 165}, {'@': 166}, {'@': 167}, {'@': 168}, {'@': 169}, {'@': 170}, {'@': 171}, {'@': 172}, {'@': 173}, {'@': 174}, {'@': 175}, {'@': 176}, {'@': 177}, {'@': 178}, {'@': 179}, {'@': 180}, {'@': 181}, {'@': 182}, {'@': 183}, {'@': 184}, {'@': 185}, {'@': 186}, {'@': 187}, {'@': 188}, {'@': 189}, {'@': 190}, {'@': 191}, {'@': 192}, {'@': 193}, {'@': 194}, {'@': 195}, {'@': 196}, {'@': 197}, {'@': 198}, {'@': 199}, {'@': 200}, {'@': 201}, {'@': 202}, {'@': 203}, {'@': 204}, {'@': 205}, {'@': 206}, {'@': 207}, {'@': 208}, {'@': 209}, {'@': 210}, {'@': 211}, {'@': 212}, {'@': 213}, {'@': 214}, {'@': 215}, {'@': 216}, {'@': 217}, {'@': 218}, {'@': 219}, {'@': 220}, {'@': 221}, {'@': 222}, {'@': 223}, {'@': 224}, {'@': 225}, {'@': 226}, {'@': 227}, {'@': 228}, {'@': 229}, {'@': 230}, {'@': 231}, {'@': 232}, {'@': 233}, {'@': 234}, {'@': 235}, {'@': 236}, {'@': 237}, {'@': 238}, {'@': 239}, {'@': 240}, {'@': 241}, {'@': 242}, {'@': 243}, {'@': 244}, {'@': 245}, {'@': 246}, {'@': 247}, {'@': 248}, {'@': 249}, {'@': 250}, {'@': 251}, {'@': 252}, {'@': 253}, {'@': 254}, {'@': 255}, {'@': 256}, {'@': 257}, {'@': 258}, {'@': 259}, {'@': 260}, {'@': 261}, {'@': 262}, {'@': 263}, {'@': 264}, {'@': 265}, {'@': 266}, {'@': 267}, {'@': 268}, {'@': 269}, {'@': 270}, {'@': 271}, {'@': 272}, {'@': 273}, {'@': 274}, {'@': 275}, {'@': 276}, {'@': 277}, {'@': 278}, {'@': 279}, {'@': 280}, {'@': 281}, {'@': 282}, {'@': 283}, {'@': 284}, {'@': 285}, {'@': 286}, {'@': 287}, {'@': 288}, {'@': 289}, {'@': 290}, {'@': 291}, {'@': 292}, {'@': 293}, {'@': 294}, {'@': 295}, {'@': 296}, {'@': 297}, {'@': 298}, {'@': 299}, {'@': 300}, {'@': 301}, {'@': 302}, {'@': 303}, {'@': 304}, {'@': 305}, {'@': 306}, {'@': 307}, {'@': 308}, {'@': 309}, {'@': 310}, {'@': 311}, {'@': 312}, {'@': 313}, {'@': 314}, {'@': 315}, {'@': 316}, {'@': 317}, {'@': 318}, {'@': 319}, {'@': 320}, {'@': 321}, {'@': 322}, {'@': 323}, {'@': 324}, {'@': 325}, {'@': 326}, {'@': 327}, {'@': 328}, {'@': 329}, {'@': 330}, {'@': 331}, {'@': 332}, {'@': 333}, {'@': 334}, {'@': 335}, {'@': 336}, {'@': 337}, {'@': 338}, {'@': 339}, {'@': 340}, {'@': 341}, {'@': 342}, {'@': 343}, {'@': 344}, {'@': 345}, {'@': 346}, {'@': 347}, {'@': 348}, {'@': 349}, {'@': 350}, {'@': 351}, {'@': 352}, {'@': 353}, {'@': 354}, {'@': 355}, {'@': 356}, {'@': 357}, {'@': 358}, {'@': 359}, {'@': 360}, {'@': 361}, {'@': 362}, {'@': 363}, {'@': 364}, {'@': 365}, {'@': 366}, {'@': 367}, {'@': 368}, {'@': 369}, {'@': 370}, {'@': 371}, {'@': 372}, {'@': 373}, {'@': 374}, {'@': 375}, {'@': 376}, {'@': 377}, {'@': 378}, {'@': 379}, {'@': 380}, {'@': 381}, {'@': 382}, {'@': 383}, {'@': 384}, {'@': 385}, {'@': 386}, {'@': 387}, {'@': 388}, {'@': 389}, {'@': 390}, {'@': 391}, {'@': 392}, {'@': 393}, {'@': 394}, {'@': 395}, {'@': 396}, {'@': 397}, {'@': 398}, {'@': 399}, {'@': 400}, {'@': 401}, {'@': 402}, {'@': 403}, {'@': 404}, {'@': 405}, {'@': 406}, {'@': 407}, {'@': 408}, {'@': 409}, {'@': 410}, {'@': 411}, {'@': 412}, {'@': 413}, {'@': 414}, {'@': 415}, {'@': 416}, {'@': 417}, {'@': 418}, {'@': 419}, {'@': 420}, {'@': 421}, {'@': 422}, {'@': 423}, {'@': 424}, {'@': 425}, {'@': 426}, {'@': 427}, {'@': 428}, {'@': 429}, {'@': 430}, {'@': 431}, {'@': 432}, {'@': 433}, {'@': 434}, {'@': 435}, {'@': 436}, {'@': 437}, {'@': 438}, {'@': 439}, {'@': 440}, {'@': 441}, {'@': 442}, {'@': 443}, {'@': 444}, {'@': 445}, {'@': 446}, {'@': 447}, {'@': 448}, {'@': 449}, {'@': 450}, {'@': 451}, {'@': 452}, {'@': 453}, {'@': 454}, {'@': 455}, {'@': 456}, {'@': 457}, {'@': 458}, {'@': 459}, {'@': 460}, {'@': 461}, {'@': 462}, {'@': 463}, {'@': 464}, {'@': 465}, {'@': 466}, {'@': 467}, {'@': 468}, {'@': 469}, {'@': 470}, {'@': 471}, {'@': 472}, {'@': 473}, {'@': 474}, {'@': 475}, {'@': 476}, {'@': 477}, {'@': 478}, {'@': 479}, {'@': 480}, {'@': 481}, {'@': 482}, {'@': 483}, {'@': 484}, {'@': 485}, {'@': 486}, {'@': 487}, {'@': 488}, {'@': 489}, {'@': 490}, {'@': 491}, {'@': 492}, {'@': 493}, {'@': 494}, {'@': 495}, {'@': 496}, {'@': 497}, {'@': 498}, {'@': 499}, {'@': 500}, {'@': 501}, {'@': 502}, {'@': 503}, {'@': 504}, {'@': 505}, {'@': 506}, {'@': 507}, {'@': 508}, {'@': 509}, {'@': 510}, {'@': 511}, {'@': 512}, {'@': 513}, {'@': 514}, {'@': 515}, {'@': 516}, {'@': 517}, {'@': 518}, {'@': 519}, {'@': 520}, {'@': 521}, {'@': 522}, {'@': 523}, {'@': 524}, {'@': 525}, {'@': 526}, {'@': 527}, {'@': 528}, {'@': 529}, {'@': 530}, {'@': 531}, {'@': 532}, {'@': 533}, {'@': 534}, {'@': 535}, {'@': 536}, {'@': 537}, {'@': 538}, {'@': 539}, {'@': 540}, {'@': 541}, {'@': 542}, {'@': 543}, {'@': 544}, {'@': 545}, {'@': 546}, {'@': 547}, {'@': 548}, {'@': 549}, {'@': 550}, {'@': 551}, {'@': 552}, {'@': 553}, {'@': 554}, {'@': 555}, {'@': 556}, {'@': 557}, {'@': 558}, {'@': 559}, {'@': 560}, {'@': 561}, {'@': 562}, {'@': 563}, {'@': 564}, {'@': 565}, {'@': 566}, {'@': 567}, {'@': 568}, {'@': 569}, {'@': 570}, {'@': 571}, {'@': 572}, {'@': 573}, {'@': 574}, {'@': 575}, {'@': 576}, {'@': 577}, {'@': 578}, {'@': 579}, {'@': 580}, {'@': 581}, {'@': 582}, {'@': 583}, {'@': 584}, {'@': 585}, {'@': 586}, {'@': 587}, {'@': 588}, {'@': 589}, {'@': 590}, {'@': 591}, {'@': 592}, {'@': 593}, {'@': 594}, {'@': 595}, {'@': 596}, {'@': 597}, {'@': 598}, {'@': 599}, {'@': 600}, {'@': 601}, {'@': 602}, {'@': 603}, {'@': 604}, {'@': 605}, {'@': 606}, {'@': 607}, {'@': 608}, {'@': 609}, {'@': 610}, {'@': 611}, {'@': 612}, {'@': 613}, {'@': 614}, {'@': 615}], 'start': ['start'], 'parser_type': 'lalr', '__type__': 'ParserConf'}, 'parser': {'tokens': {0: 'SEMICOLON', 1: '_NEWLINE', 2: 'COMMA', 3: 'RPAR', 4: 'FOR', 5: 'ASYNC', 6: 'RSQB', 7: 'ELSE', 8: '__ANON_2', 9: 'RBRACE', 10: '__ANON_10', 11: 'OR', 12: '__ANON_7', 13: '__ANON_5', 14: 'IF', 15: 'COLON', 16: '__ANON_12', 17: 'AS', 18: '__ANON_8', 19: 'EQUAL', 20: '__ANON_9', 21: '__ANON_13', 22: '__ANON_6', 23: '__ANON_4', 24: 'FROM', 25: '__ANON_14', 26: '__ANON_11', 27: 'AND', 28: '__ANON_3', 29: 'shift_expr', 30: 'string_concat', 31: 'NAME', 32: 'HEX_NUMBER', 33: 'BIN_NUMBER', 34: 'PLUS', 35: '__string_concat_plus_27', 36: 'and_test', 37: 'QLONG_STRING', 38: 'AWAIT', 39: 'string', 40: 'QSTRING', 41: 'power', 42: 'arith_expr', 43: 'LPAR', 44: 'LBRACE', 45: '_unary_op', 46: 'lambdef', 47: 'LSQB', 48: 'xor_expr', 49: 'and_expr', 50: 'factor', 51: 'comparison', 52: 'or_test', 53: 'STRING', 54: 'atom_expr', 55: 'TRUE', 56: 'FSTRING', 57: 'await_expr', 58: 'NOT', 59: 'term', 60: '__ANON_23', 61: 'number', 62: 'not_test_', 63: 'or_expr', 64: 'test', 65: 'FALSE', 66: 'IMAG_NUMBER', 67: 'LAMBDA', 68: 'DEC_NUMBER', 69: 'atom', 70: 'MINUS', 71: 'TILDE', 72: 'OCT_NUMBER', 73: 'FLOAT_NUMBER', 74: 'expr', 75: 'LONG_STRING', 76: 'LONG_FSTRING', 77: 'NONE', 78: 'typedparam', 79: 'paramvalue', 80: '__ANON_1', 81: 'STAR', 82: 'SLASH', 83: 'kwparams', 84: 'starparams', 85: 'MORETHAN', 86: 'VBAR', 87: '__ANON_22', 88: 'IS', 89: 'CIRCUMFLEX', 90: '__ANON_18', 91: 'AMPERSAND', 92: '__ANON_19', 93: 'IN', 94: '__ANON_15', 95: '__ANON_20', 96: 'LESSTHAN', 97: '__ANON_16', 98: '__ANON_21', 99: 'key_value', 100: 'NONLOCAL', 101: 'testlist_star_expr', 102: 'CURSOR', 103: 'import_stmt', 104: 'continue_stmt', 105: 'break_stmt', 106: 'ASSERT', 107: 'YIELD', 108: 'test_or_star_expr', 109: 'small_stmt', 110: 'suite', 111: 'return_stmt', 112: 'nonlocal_stmt', 113: 'VAR', 114: 'var_stmt', 115: 'type_stmt', 116: 'CONTINUE', 117: 'TYPE', 118: 'assert_stmt', 119: 'pass_stmt', 120: 'augassign', 121: 'EXCEPTION', 122: 'CONST', 123: 'import_name', 124: 'RAISE', 125: 'DEL', 126: 'BREAK', 127: 'cursor_stmt', 128: 'del_stmt', 129: 'star_expr', 130: 'flow_stmt', 131: 'exception_stmt', 132: 'assign', 133: 'const_stmt', 134: 'GLOBAL', 135: 'simple_stmt', 136: 'RETURN', 137: 'assign_stmt', 138: 'PASS', 139: 'yield_expr', 140: 'global_stmt', 141: 'yield_stmt', 142: 'SUBTYPE', 143: 'annassign', 144: 'subtype_stmt', 145: 'FETCH', 146: 'IMPORT', 147: 'fetchinto_stmt', 148: 'expr_stmt', 149: 'raise_stmt', 150: 'import_from', 151: 'TRY', 152: 'FORALL', 153: 'AT', 154: 'DEF', 155: 'WHILE', 156: 'WITH', 157: 'CLASS', 158: '$END', 159: 'import_as_name', 160: 'import_as_names', 161: '__import_as_names_star_9', 162: 'EXCEPT', 163: 'FINALLY', 164: '_DEDENT', 165: 'decl_type', 166: 'stararg', 167: 'argvalue', 168: 'kwargs', 169: 'starargs', 170: 'comprehension{test}', 171: 'arguments', 172: 'subscript', 173: 'subscriptlist', 174: 'DOT', 175: 'ELIF', 176: 'PERCENT', 177: '__ANON_17', 178: 'decl_fields', 179: 'comprehension{test_or_star_expr}', 180: 'decl_field', 181: 'decl_name', 182: '_tuple_inner', 183: 'elifs', 184: 'elif_', 185: '__elifs_star_14', 186: 'type_body', 187: 'dotted_name', 188: 'type_constraint', 189: 'lambda_paramvalue', 190: 'lambda_kwparams', 191: 'INTO', 192: 'comp_if', 193: '__arguments_star_32', 194: 'comp_for', 195: '__with_items_star_16', 196: 'exprlist', 197: '__dotted_as_names_star_10', 198: '__lambda_params_star_4', 199: 'testlist', 200: 'testlist_tuple', 201: 'sliceop', 202: '__parameters_star_3', 203: 'comp_op', 204: 'query', 205: '__starargs_star_33', 206: 'funcdef', 207: '___dict_exprlist_star_31', 208: '__comp_fors_plus_34', 209: 'comp_fors', 210: '__global_stmt_star_12', 211: 'finally', 212: 'except_clause', 213: 'with_item', 214: '__testlist_star_expr_plus_7', 215: '_testlist_comp', 216: '__decorators_plus_2', 217: 'try_stmt', 218: 'decorated', 219: 'with_stmt', 220: 'compound_stmt', 221: 'if_stmt', 222: '__suite_plus_17', 223: 'decorators', 224: 'classdef', 225: 'async_stmt', 226: 'decorator', 227: 'stmt', 228: 'while_stmt', 229: 'for_stmt', 230: 'forall_stmt', 231: 'parameters', 232: 'dotted_as_name', 233: 'lambda_starparams', 234: '_add_op', 235: '_mul_op', 236: 'OF', 237: '__and_test_star_19', 238: 'type_param', 239: '_dict_exprlist', 240: 'comprehension{key_value}', 241: '_set_exprlist', 242: 'async_funcdef', 243: 'start', 244: '__file_input_star_0', 245: 'file_input', 246: '__term_star_26', 247: '__assign_plus_6', 248: 'augassign_op', 249: 'lambdef_nocond', 250: 'test_nocond', 251: '__comparison_star_20', 252: '__decl_fields_star_13', 253: '__ANON_0', 254: 'lambda_params', 255: '__or_expr_star_21', 256: 'except_clauses', 257: '__except_clauses_plus_15', 258: '__xor_expr_star_22', 259: '_INDENT', 260: '__and_expr_star_23', 261: '__exprlist_plus_29', 262: 'type_size', 263: '__arith_expr_star_25', 264: 'names', 265: 'DICT', 266: 'type_selector', 267: 'ARRAY', 268: 'RECORD', 269: 'index_type', 270: '_shift_op', 271: 'with_items', 272: '__testlist_tuple_plus_30', 273: 'dotted_as_names', 274: '__or_test_star_18', 275: '__dotted_name_star_11', 276: '__shift_expr_star_24', 277: 'dots', 278: '__dots_plus_8', 279: '__subscriptlist_plus_28', 280: '__simple_stmt_star_5'}, 'states': {0: {0: (1, {'@': 281}), 1: (1, {'@': 281})}, 1: {2: (1, {'@': 155}), 3: (1, {'@': 155})}, 2: {2: (1, {'@': 446}), 4: (1, {'@': 446}), 5: (1, {'@': 446}), 6: (1, {'@': 441})}, 3: {7: (1, {'@': 581}), 8: (1, {'@': 581}), 9: (1, {'@': 581}), 10: (1, {'@': 581}), 11: (1, {'@': 581}), 12: (1, {'@': 581}), 13: (1, {'@': 581}), 14: (1, {'@': 581}), 15: (1, {'@': 581}), 16: (1, {'@': 581}), 0: (1, {'@': 581}), 17: (1, {'@': 581}), 18: (1, {'@': 581}), 19: (1, {'@': 581}), 4: (1, {'@': 581}), 1: (1, {'@': 581}), 20: (1, {'@': 581}), 6: (1, {'@': 581}), 21: (1, {'@': 581}), 22: (1, {'@': 581}), 23: (1, {'@': 581}), 24: (1, {'@': 581}), 2: (1, {'@': 581}), 25: (1, {'@': 581}), 26: (1, {'@': 581}), 27: (1, {'@': 581}), 28: (1, {'@': 581}), 3: (1, {'@': 581}), 5: (1, {'@': 581})}, 4: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 64: (0, 75), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 5: {78: (0, 216), 79: (0, 640), 80: (0, 255), 81: (0, 231), 82: (0, 643), 83: (0, 324), 31: (0, 270), 84: (0, 330), 3: (1, {'@': 133})}, 6: {2: (1, {'@': 265}), 0: (1, {'@': 265}), 1: (1, {'@': 265}), 3: (1, {'@': 265})}, 7: {85: (1, {'@': 591}), 8: (1, {'@': 591}), 9: (1, {'@': 591}), 11: (1, {'@': 591}), 12: (1, {'@': 591}), 86: (1, {'@': 591}), 87: (1, {'@': 591}), 15: (1, {'@': 591}), 0: (1, {'@': 591}), 88: (1, {'@': 591}), 4: (1, {'@': 591}), 58: (1, {'@': 591}), 89: (1, {'@': 591}), 90: (1, {'@': 591}), 20: (1, {'@': 591}), 6: (1, {'@': 591}), 91: (1, {'@': 591}), 92: (1, {'@': 591}), 21: (1, {'@': 591}), 2: (1, {'@': 591}), 25: (1, {'@': 591}), 26: (1, {'@': 591}), 27: (1, {'@': 591}), 5: (1, {'@': 591}), 3: (1, {'@': 591}), 7: (1, {'@': 591}), 10: (1, {'@': 591}), 13: (1, {'@': 591}), 14: (1, {'@': 591}), 93: (1, {'@': 591}), 16: (1, {'@': 591}), 17: (1, {'@': 591}), 18: (1, {'@': 591}), 19: (1, {'@': 591}), 94: (1, {'@': 591}), 22: (1, {'@': 591}), 23: (1, {'@': 591}), 24: (1, {'@': 591}), 95: (1, {'@': 591}), 28: (1, {'@': 591}), 96: (1, {'@': 591}), 97: (1, {'@': 591}), 98: (1, {'@': 591}), 1: (1, {'@': 591})}, 8: {93: (0, 151)}, 9: {2: (0, 569), 9: (1, {'@': 481})}, 10: {0: (1, {'@': 602}), 2: (1, {'@': 602}), 93: (1, {'@': 602}), 1: (1, {'@': 602})}, 11: {2: (0, 639), 3: (1, {'@': 138})}, 12: {0: (1, {'@': 262}), 1: (1, {'@': 262})}, 13: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 64: (0, 28), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596), 15: (1, {'@': 473}), 0: (1, {'@': 473}), 1: (1, {'@': 473}), 3: (1, {'@': 473}), 19: (1, {'@': 473})}, 14: {19: (0, 156)}, 15: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 99: (0, 27), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 64: (0, 33), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 80: (0, 40), 76: (0, 757), 77: (0, 596), 9: (1, {'@': 482})}, 16: {0: (1, {'@': 603}), 2: (1, {'@': 603}), 93: (1, {'@': 603}), 1: (1, {'@': 603})}, 17: {3: (1, {'@': 139})}, 18: {0: (1, {'@': 259}), 1: (1, {'@': 259})}, 19: {0: (1, {'@': 604}), 1: (1, {'@': 604}), 2: (1, {'@': 604}), 3: (1, {'@': 604}), 19: (1, {'@': 604}), 15: (1, {'@': 604})}, 20: {43: (0, 160), 15: (0, 165)}, 21: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 99: (0, 577), 68: (0, 697), 69: (0, 371), 77: (0, 596), 70: (0, 710), 71: (0, 716), 64: (0, 33), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 80: (0, 585), 9: (1, {'@': 476})}, 22: {100: (0, 353), 101: (0, 358), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 35: (0, 652), 34: (0, 645), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 24: (0, 715), 108: (0, 722), 45: (0, 736), 109: (0, 729), 110: (0, 85), 48: (0, 467), 49: (0, 483), 111: (0, 500), 29: (0, 514), 112: (0, 507), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 118: (0, 195), 119: (0, 205), 120: (0, 228), 47: (0, 244), 58: (0, 236), 121: (0, 260), 122: (0, 284), 43: (0, 300), 54: (0, 293), 62: (0, 308), 123: (0, 316), 44: (0, 321), 65: (0, 334), 50: (0, 337), 66: (0, 354), 57: (0, 359), 69: (0, 371), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 40: (0, 616), 129: (0, 613), 130: (0, 619), 131: (0, 622), 132: (0, 625), 46: (0, 631), 133: (0, 634), 134: (0, 637), 135: (0, 489), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 145: (0, 646), 146: (0, 661), 147: (0, 668), 63: (0, 675), 1: (0, 497), 148: (0, 682), 67: (0, 690), 68: (0, 697), 70: (0, 710), 71: (0, 716), 149: (0, 723), 73: (0, 737), 150: (0, 744), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 23: {2: (1, {'@': 546}), 3: (1, {'@': 546})}, 24: {100: (0, 353), 101: (0, 358), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 24: (0, 715), 108: (0, 722), 109: (0, 729), 45: (0, 736), 48: (0, 467), 49: (0, 483), 111: (0, 500), 112: (0, 507), 29: (0, 514), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 118: (0, 195), 119: (0, 205), 120: (0, 228), 47: (0, 244), 58: (0, 236), 121: (0, 260), 122: (0, 284), 54: (0, 293), 43: (0, 300), 62: (0, 308), 110: (0, 377), 123: (0, 316), 44: (0, 321), 65: (0, 334), 50: (0, 337), 66: (0, 354), 57: (0, 359), 69: (0, 371), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 40: (0, 616), 129: (0, 613), 130: (0, 619), 131: (0, 622), 132: (0, 625), 46: (0, 631), 133: (0, 634), 134: (0, 637), 135: (0, 489), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 145: (0, 646), 146: (0, 661), 147: (0, 668), 63: (0, 675), 1: (0, 497), 148: (0, 682), 67: (0, 690), 68: (0, 697), 70: (0, 710), 71: (0, 716), 149: (0, 723), 73: (0, 737), 150: (0, 744), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 25: {33: (1, {'@': 543}), 151: (1, {'@': 543}), 68: (1, {'@': 543}), 53: (1, {'@': 543}), 138: (1, {'@': 543}), 102: (1, {'@': 543}), 142: (1, {'@': 543}), 14: (1, {'@': 543}), 37: (1, {'@': 543}), 55: (1, {'@': 543}), 124: (1, {'@': 543}), 136: (1, {'@': 543}), 60: (1, {'@': 543}), 66: (1, {'@': 543}), 121: (1, {'@': 543}), 152: (1, {'@': 543}), 56: (1, {'@': 543}), 32: (1, {'@': 543}), 153: (1, {'@': 543}), 44: (1, {'@': 543}), 4: (1, {'@': 543}), 76: (1, {'@': 543}), 1: (1, {'@': 543}), 72: (1, {'@': 543}), 100: (1, {'@': 543}), 65: (1, {'@': 543}), 58: (1, {'@': 543}), 81: (1, {'@': 543}), 47: (1, {'@': 543}), 107: (1, {'@': 543}), 117: (1, {'@': 543}), 154: (1, {'@': 543}), 116: (1, {'@': 543}), 67: (1, {'@': 543}), 125: (1, {'@': 543}), 34: (1, {'@': 543}), 38: (1, {'@': 543}), 40: (1, {'@': 543}), 24: (1, {'@': 543}), 155: (1, {'@': 543}), 73: (1, {'@': 543}), 75: (1, {'@': 543}), 77: (1, {'@': 543}), 146: (1, {'@': 543}), 156: (1, {'@': 543}), 5: (1, {'@': 543}), 157: (1, {'@': 543}), 134: (1, {'@': 543}), 70: (1, {'@': 543}), 71: (1, {'@': 543}), 43: (1, {'@': 543}), 145: (1, {'@': 543}), 31: (1, {'@': 543}), 106: (1, {'@': 543}), 158: (1, {'@': 543}), 126: (1, {'@': 543}), 122: (1, {'@': 543}), 113: (1, {'@': 543})}, 26: {159: (0, 32), 160: (0, 34), 43: (0, 41), 31: (0, 36), 81: (0, 46)}, 27: {2: (1, {'@': 606}), 9: (1, {'@': 606})}, 28: {0: (1, {'@': 605}), 1: (1, {'@': 605}), 2: (1, {'@': 605}), 3: (1, {'@': 605}), 19: (1, {'@': 605}), 15: (1, {'@': 605})}, 29: {3: (1, {'@': 140})}, 30: {31: (0, 372)}, 31: {33: (1, {'@': 542}), 151: (1, {'@': 542}), 68: (1, {'@': 542}), 53: (1, {'@': 542}), 138: (1, {'@': 542}), 102: (1, {'@': 542}), 142: (1, {'@': 542}), 14: (1, {'@': 542}), 37: (1, {'@': 542}), 55: (1, {'@': 542}), 124: (1, {'@': 542}), 136: (1, {'@': 542}), 60: (1, {'@': 542}), 66: (1, {'@': 542}), 121: (1, {'@': 542}), 152: (1, {'@': 542}), 56: (1, {'@': 542}), 32: (1, {'@': 542}), 153: (1, {'@': 542}), 44: (1, {'@': 542}), 4: (1, {'@': 542}), 76: (1, {'@': 542}), 1: (1, {'@': 542}), 72: (1, {'@': 542}), 100: (1, {'@': 542}), 65: (1, {'@': 542}), 58: (1, {'@': 542}), 81: (1, {'@': 542}), 47: (1, {'@': 542}), 107: (1, {'@': 542}), 117: (1, {'@': 542}), 154: (1, {'@': 542}), 116: (1, {'@': 542}), 67: (1, {'@': 542}), 125: (1, {'@': 542}), 34: (1, {'@': 542}), 38: (1, {'@': 542}), 40: (1, {'@': 542}), 24: (1, {'@': 542}), 155: (1, {'@': 542}), 73: (1, {'@': 542}), 75: (1, {'@': 542}), 77: (1, {'@': 542}), 146: (1, {'@': 542}), 156: (1, {'@': 542}), 5: (1, {'@': 542}), 157: (1, {'@': 542}), 134: (1, {'@': 542}), 70: (1, {'@': 542}), 71: (1, {'@': 542}), 43: (1, {'@': 542}), 145: (1, {'@': 542}), 31: (1, {'@': 542}), 106: (1, {'@': 542}), 158: (1, {'@': 542}), 126: (1, {'@': 542}), 122: (1, {'@': 542}), 113: (1, {'@': 542})}, 32: {2: (0, 53), 161: (0, 59), 0: (1, {'@': 272}), 1: (1, {'@': 272}), 3: (1, {'@': 272})}, 33: {15: (0, 368)}, 34: {0: (1, {'@': 257}), 1: (1, {'@': 257})}, 35: {100: (0, 353), 101: (0, 358), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 35: (0, 652), 34: (0, 645), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 24: (0, 715), 108: (0, 722), 45: (0, 736), 109: (0, 729), 48: (0, 467), 49: (0, 483), 111: (0, 500), 29: (0, 514), 112: (0, 507), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 118: (0, 195), 119: (0, 205), 120: (0, 228), 47: (0, 244), 58: (0, 236), 121: (0, 260), 122: (0, 284), 43: (0, 300), 54: (0, 293), 62: (0, 308), 123: (0, 316), 44: (0, 321), 65: (0, 334), 50: (0, 337), 66: (0, 354), 57: (0, 359), 69: (0, 371), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 110: (0, 389), 38: (0, 601), 128: (0, 604), 39: (0, 608), 40: (0, 616), 129: (0, 613), 130: (0, 619), 131: (0, 622), 132: (0, 625), 46: (0, 631), 133: (0, 634), 134: (0, 637), 135: (0, 489), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 145: (0, 646), 146: (0, 661), 147: (0, 668), 63: (0, 675), 1: (0, 497), 148: (0, 682), 67: (0, 690), 68: (0, 697), 70: (0, 710), 71: (0, 716), 149: (0, 723), 73: (0, 737), 150: (0, 744), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 36: {17: (0, 66), 2: (1, {'@': 266}), 0: (1, {'@': 266}), 1: (1, {'@': 266}), 3: (1, {'@': 266})}, 37: {83: (0, 338), 78: (0, 216), 80: (0, 255), 79: (0, 640), 31: (0, 270)}, 38: {7: (1, {'@': 351}), 33: (1, {'@': 351}), 151: (1, {'@': 351}), 68: (1, {'@': 351}), 162: (1, {'@': 351}), 53: (1, {'@': 351}), 138: (1, {'@': 351}), 102: (1, {'@': 351}), 142: (1, {'@': 351}), 124: (1, {'@': 351}), 14: (1, {'@': 351}), 136: (1, {'@': 351}), 37: (1, {'@': 351}), 55: (1, {'@': 351}), 60: (1, {'@': 351}), 66: (1, {'@': 351}), 113: (1, {'@': 351}), 121: (1, {'@': 351}), 152: (1, {'@': 351}), 56: (1, {'@': 351}), 32: (1, {'@': 351}), 153: (1, {'@': 351}), 44: (1, {'@': 351}), 4: (1, {'@': 351}), 76: (1, {'@': 351}), 1: (1, {'@': 351}), 72: (1, {'@': 351}), 100: (1, {'@': 351}), 58: (1, {'@': 351}), 81: (1, {'@': 351}), 47: (1, {'@': 351}), 107: (1, {'@': 351}), 117: (1, {'@': 351}), 154: (1, {'@': 351}), 116: (1, {'@': 351}), 163: (1, {'@': 351}), 67: (1, {'@': 351}), 125: (1, {'@': 351}), 34: (1, {'@': 351}), 38: (1, {'@': 351}), 40: (1, {'@': 351}), 73: (1, {'@': 351}), 24: (1, {'@': 351}), 155: (1, {'@': 351}), 122: (1, {'@': 351}), 77: (1, {'@': 351}), 75: (1, {'@': 351}), 146: (1, {'@': 351}), 164: (1, {'@': 351}), 156: (1, {'@': 351}), 134: (1, {'@': 351}), 157: (1, {'@': 351}), 70: (1, {'@': 351}), 71: (1, {'@': 351}), 158: (1, {'@': 351}), 43: (1, {'@': 351}), 145: (1, {'@': 351}), 31: (1, {'@': 351}), 106: (1, {'@': 351}), 126: (1, {'@': 351}), 65: (1, {'@': 351}), 5: (1, {'@': 351})}, 39: {30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 563), 33: (0, 408), 35: (0, 652), 61: (0, 581), 43: (0, 300), 37: (0, 674), 39: (0, 608), 44: (0, 321), 40: (0, 616), 65: (0, 334), 47: (0, 244), 66: (0, 354), 68: (0, 697), 69: (0, 371), 165: (0, 170), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 40: {29: (0, 514), 59: (0, 557), 49: (0, 483), 30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 293), 61: (0, 581), 34: (0, 645), 43: (0, 300), 33: (0, 408), 35: (0, 652), 74: (0, 593), 37: (0, 674), 63: (0, 675), 38: (0, 601), 39: (0, 608), 44: (0, 321), 40: (0, 616), 41: (0, 689), 42: (0, 696), 65: (0, 334), 50: (0, 337), 45: (0, 736), 47: (0, 244), 48: (0, 467), 66: (0, 354), 68: (0, 697), 57: (0, 359), 69: (0, 371), 70: (0, 710), 71: (0, 716), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 41: {160: (0, 82), 159: (0, 32), 31: (0, 36)}, 42: {0: (1, {'@': 263}), 1: (1, {'@': 263})}, 43: {2: (0, 343), 3: (1, {'@': 146})}, 44: {31: (0, 175)}, 45: {9: (1, {'@': 536})}, 46: {0: (1, {'@': 255}), 1: (1, {'@': 255})}, 47: {19: (0, 385), 0: (1, {'@': 301}), 1: (1, {'@': 301})}, 48: {0: (1, {'@': 261}), 1: (1, {'@': 261})}, 49: {78: (0, 216), 80: (0, 255), 31: (0, 270), 83: (0, 348), 79: (0, 23)}, 50: {33: (1, {'@': 347}), 102: (1, {'@': 347}), 124: (1, {'@': 347}), 136: (1, {'@': 347}), 113: (1, {'@': 347}), 121: (1, {'@': 347}), 32: (1, {'@': 347}), 4: (1, {'@': 347}), 76: (1, {'@': 347}), 100: (1, {'@': 347}), 58: (1, {'@': 347}), 117: (1, {'@': 347}), 116: (1, {'@': 347}), 125: (1, {'@': 347}), 38: (1, {'@': 347}), 40: (1, {'@': 347}), 73: (1, {'@': 347}), 77: (1, {'@': 347}), 146: (1, {'@': 347}), 164: (1, {'@': 347}), 156: (1, {'@': 347}), 134: (1, {'@': 347}), 70: (1, {'@': 347}), 71: (1, {'@': 347}), 106: (1, {'@': 347}), 126: (1, {'@': 347}), 65: (1, {'@': 347}), 151: (1, {'@': 347}), 68: (1, {'@': 347}), 53: (1, {'@': 347}), 138: (1, {'@': 347}), 142: (1, {'@': 347}), 14: (1, {'@': 347}), 37: (1, {'@': 347}), 55: (1, {'@': 347}), 60: (1, {'@': 347}), 66: (1, {'@': 347}), 152: (1, {'@': 347}), 56: (1, {'@': 347}), 153: (1, {'@': 347}), 44: (1, {'@': 347}), 1: (1, {'@': 347}), 72: (1, {'@': 347}), 81: (1, {'@': 347}), 47: (1, {'@': 347}), 107: (1, {'@': 347}), 154: (1, {'@': 347}), 67: (1, {'@': 347}), 34: (1, {'@': 347}), 24: (1, {'@': 347}), 155: (1, {'@': 347}), 75: (1, {'@': 347}), 157: (1, {'@': 347}), 158: (1, {'@': 347}), 43: (1, {'@': 347}), 145: (1, {'@': 347}), 31: (1, {'@': 347}), 122: (1, {'@': 347}), 5: (1, {'@': 347})}, 51: {166: (0, 183), 29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 167: (0, 644), 37: (0, 674), 38: (0, 601), 168: (0, 651), 39: (0, 608), 80: (0, 658), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 64: (0, 666), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 169: (0, 672), 3: (0, 680), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 77: (0, 596), 70: (0, 710), 71: (0, 716), 170: (0, 688), 171: (0, 695), 72: (0, 390), 73: (0, 737), 81: (0, 702), 74: (0, 394), 75: (0, 399), 76: (0, 757)}, 52: {3: (1, {'@': 538}), 9: (1, {'@': 538})}, 53: {159: (0, 93), 31: (0, 36), 0: (1, {'@': 271}), 1: (1, {'@': 271}), 3: (1, {'@': 271})}, 54: {159: (0, 32), 31: (0, 36), 160: (0, 71)}, 55: {3: (1, {'@': 151})}, 56: {33: (1, {'@': 577}), 151: (1, {'@': 577}), 68: (1, {'@': 577}), 53: (1, {'@': 577}), 138: (1, {'@': 577}), 102: (1, {'@': 577}), 142: (1, {'@': 577}), 14: (1, {'@': 577}), 37: (1, {'@': 577}), 55: (1, {'@': 577}), 124: (1, {'@': 577}), 136: (1, {'@': 577}), 60: (1, {'@': 577}), 66: (1, {'@': 577}), 121: (1, {'@': 577}), 152: (1, {'@': 577}), 56: (1, {'@': 577}), 32: (1, {'@': 577}), 153: (1, {'@': 577}), 44: (1, {'@': 577}), 4: (1, {'@': 577}), 76: (1, {'@': 577}), 72: (1, {'@': 577}), 100: (1, {'@': 577}), 65: (1, {'@': 577}), 58: (1, {'@': 577}), 81: (1, {'@': 577}), 47: (1, {'@': 577}), 107: (1, {'@': 577}), 117: (1, {'@': 577}), 154: (1, {'@': 577}), 116: (1, {'@': 577}), 67: (1, {'@': 577}), 125: (1, {'@': 577}), 34: (1, {'@': 577}), 38: (1, {'@': 577}), 40: (1, {'@': 577}), 24: (1, {'@': 577}), 155: (1, {'@': 577}), 73: (1, {'@': 577}), 75: (1, {'@': 577}), 77: (1, {'@': 577}), 146: (1, {'@': 577}), 164: (1, {'@': 577}), 156: (1, {'@': 577}), 5: (1, {'@': 577}), 157: (1, {'@': 577}), 134: (1, {'@': 577}), 70: (1, {'@': 577}), 71: (1, {'@': 577}), 43: (1, {'@': 577}), 145: (1, {'@': 577}), 31: (1, {'@': 577}), 106: (1, {'@': 577}), 126: (1, {'@': 577}), 122: (1, {'@': 577}), 113: (1, {'@': 577})}, 57: {15: (0, 180), 29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 64: (0, 712), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 172: (0, 718), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 173: (0, 725), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 58: {2: (1, {'@': 484}), 9: (1, {'@': 484}), 4: (1, {'@': 484}), 5: (1, {'@': 484})}, 59: {2: (0, 98), 0: (1, {'@': 270}), 1: (1, {'@': 270}), 3: (1, {'@': 270})}, 60: {174: (1, {'@': 564}), 2: (1, {'@': 564}), 146: (1, {'@': 564}), 0: (1, {'@': 564}), 43: (1, {'@': 564}), 17: (1, {'@': 564}), 3: (1, {'@': 564}), 1: (1, {'@': 564})}, 61: {0: (1, {'@': 310}), 1: (1, {'@': 310})}, 62: {33: (1, {'@': 358}), 102: (1, {'@': 358}), 124: (1, {'@': 358}), 136: (1, {'@': 358}), 121: (1, {'@': 358}), 32: (1, {'@': 358}), 4: (1, {'@': 358}), 76: (1, {'@': 358}), 100: (1, {'@': 358}), 58: (1, {'@': 358}), 117: (1, {'@': 358}), 116: (1, {'@': 358}), 125: (1, {'@': 358}), 38: (1, {'@': 358}), 40: (1, {'@': 358}), 73: (1, {'@': 358}), 77: (1, {'@': 358}), 146: (1, {'@': 358}), 164: (1, {'@': 358}), 156: (1, {'@': 358}), 5: (1, {'@': 358}), 134: (1, {'@': 358}), 70: (1, {'@': 358}), 71: (1, {'@': 358}), 106: (1, {'@': 358}), 126: (1, {'@': 358}), 65: (1, {'@': 358}), 7: (1, {'@': 358}), 151: (1, {'@': 358}), 68: (1, {'@': 358}), 53: (1, {'@': 358}), 138: (1, {'@': 358}), 142: (1, {'@': 358}), 14: (1, {'@': 358}), 37: (1, {'@': 358}), 55: (1, {'@': 358}), 60: (1, {'@': 358}), 66: (1, {'@': 358}), 152: (1, {'@': 358}), 56: (1, {'@': 358}), 153: (1, {'@': 358}), 44: (1, {'@': 358}), 1: (1, {'@': 358}), 72: (1, {'@': 358}), 81: (1, {'@': 358}), 47: (1, {'@': 358}), 107: (1, {'@': 358}), 154: (1, {'@': 358}), 67: (1, {'@': 358}), 34: (1, {'@': 358}), 24: (1, {'@': 358}), 155: (1, {'@': 358}), 75: (1, {'@': 358}), 157: (1, {'@': 358}), 158: (1, {'@': 358}), 43: (1, {'@': 358}), 145: (1, {'@': 358}), 31: (1, {'@': 358}), 122: (1, {'@': 358}), 113: (1, {'@': 358}), 162: (1, {'@': 358}), 163: (1, {'@': 358}), 175: (1, {'@': 358})}, 63: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 62: (0, 3), 44: (0, 321), 45: (0, 736), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 63: (0, 675), 65: (0, 334), 66: (0, 354), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 64: {3: (0, 732), 2: (1, {'@': 446}), 4: (1, {'@': 446}), 5: (1, {'@': 446})}, 65: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 129: (0, 613), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 108: (0, 91), 56: (0, 517), 81: (0, 525), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596), 64: (0, 599), 9: (1, {'@': 485})}, 66: {31: (0, 6)}, 67: {31: (0, 78)}, 68: {3: (1, {'@': 153})}, 69: {3: (0, 739)}, 70: {85: (1, {'@': 595}), 8: (1, {'@': 595}), 9: (1, {'@': 595}), 11: (1, {'@': 595}), 12: (1, {'@': 595}), 176: (1, {'@': 595}), 86: (1, {'@': 595}), 87: (1, {'@': 595}), 15: (1, {'@': 595}), 0: (1, {'@': 595}), 88: (1, {'@': 595}), 4: (1, {'@': 595}), 58: (1, {'@': 595}), 89: (1, {'@': 595}), 90: (1, {'@': 595}), 20: (1, {'@': 595}), 6: (1, {'@': 595}), 91: (1, {'@': 595}), 92: (1, {'@': 595}), 21: (1, {'@': 595}), 82: (1, {'@': 595}), 2: (1, {'@': 595}), 25: (1, {'@': 595}), 26: (1, {'@': 595}), 27: (1, {'@': 595}), 70: (1, {'@': 595}), 3: (1, {'@': 595}), 7: (1, {'@': 595}), 10: (1, {'@': 595}), 13: (1, {'@': 595}), 14: (1, {'@': 595}), 93: (1, {'@': 595}), 177: (1, {'@': 595}), 16: (1, {'@': 595}), 153: (1, {'@': 595}), 17: (1, {'@': 595}), 18: (1, {'@': 595}), 19: (1, {'@': 595}), 1: (1, {'@': 595}), 94: (1, {'@': 595}), 81: (1, {'@': 595}), 34: (1, {'@': 595}), 22: (1, {'@': 595}), 23: (1, {'@': 595}), 24: (1, {'@': 595}), 95: (1, {'@': 595}), 28: (1, {'@': 595}), 96: (1, {'@': 595}), 97: (1, {'@': 595}), 98: (1, {'@': 595}), 5: (1, {'@': 595})}, 71: {3: (0, 12)}, 72: {3: (0, 325)}, 73: {178: (0, 395), 29: (0, 514), 30: (0, 404), 31: (0, 400), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 108: (0, 558), 37: (0, 674), 76: (0, 757), 38: (0, 601), 39: (0, 608), 40: (0, 616), 129: (0, 613), 41: (0, 689), 42: (0, 696), 43: (0, 300), 107: (0, 703), 64: (0, 64), 139: (0, 69), 45: (0, 736), 44: (0, 321), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 3: (0, 76), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 179: (0, 83), 81: (0, 525), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 180: (0, 405), 63: (0, 675), 181: (0, 410), 65: (0, 334), 66: (0, 354), 182: (0, 89), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 77: (0, 596)}, 74: {0: (1, {'@': 260}), 1: (1, {'@': 260})}, 75: {2: (1, {'@': 157}), 3: (1, {'@': 157}), 19: (1, {'@': 157})}, 76: {85: (1, {'@': 422}), 11: (1, {'@': 422}), 176: (1, {'@': 422}), 86: (1, {'@': 422}), 14: (1, {'@': 422}), 87: (1, {'@': 422}), 174: (1, {'@': 422}), 93: (1, {'@': 422}), 177: (1, {'@': 422}), 153: (1, {'@': 422}), 80: (1, {'@': 422}), 19: (1, {'@': 422}), 88: (1, {'@': 422}), 58: (1, {'@': 422}), 89: (1, {'@': 422}), 94: (1, {'@': 422}), 81: (1, {'@': 422}), 47: (1, {'@': 422}), 90: (1, {'@': 422}), 34: (1, {'@': 422}), 91: (1, {'@': 422}), 92: (1, {'@': 422}), 82: (1, {'@': 422}), 2: (1, {'@': 422}), 95: (1, {'@': 422}), 27: (1, {'@': 422}), 70: (1, {'@': 422}), 96: (1, {'@': 422}), 97: (1, {'@': 422}), 43: (1, {'@': 422}), 98: (1, {'@': 422}), 3: (1, {'@': 422}), 15: (1, {'@': 422}), 0: (1, {'@': 422}), 1: (1, {'@': 422}), 8: (1, {'@': 422}), 10: (1, {'@': 422}), 12: (1, {'@': 422}), 13: (1, {'@': 422}), 16: (1, {'@': 422}), 18: (1, {'@': 422}), 20: (1, {'@': 422}), 21: (1, {'@': 422}), 22: (1, {'@': 422}), 23: (1, {'@': 422}), 25: (1, {'@': 422}), 26: (1, {'@': 422}), 28: (1, {'@': 422}), 9: (1, {'@': 422}), 4: (1, {'@': 422}), 5: (1, {'@': 422}), 6: (1, {'@': 422}), 7: (1, {'@': 422}), 17: (1, {'@': 422}), 24: (1, {'@': 422})}, 77: {0: (1, {'@': 249}), 1: (1, {'@': 249})}, 78: {174: (1, {'@': 565}), 2: (1, {'@': 565}), 146: (1, {'@': 565}), 0: (1, {'@': 565}), 43: (1, {'@': 565}), 17: (1, {'@': 565}), 3: (1, {'@': 565}), 1: (1, {'@': 565})}, 79: {0: (1, {'@': 293}), 1: (1, {'@': 293})}, 80: {0: (1, {'@': 258}), 1: (1, {'@': 258})}, 81: {175: (0, 650), 183: (0, 657), 184: (0, 665), 185: (0, 671), 33: (1, {'@': 334}), 102: (1, {'@': 334}), 124: (1, {'@': 334}), 136: (1, {'@': 334}), 121: (1, {'@': 334}), 32: (1, {'@': 334}), 4: (1, {'@': 334}), 76: (1, {'@': 334}), 100: (1, {'@': 334}), 58: (1, {'@': 334}), 117: (1, {'@': 334}), 116: (1, {'@': 334}), 125: (1, {'@': 334}), 38: (1, {'@': 334}), 40: (1, {'@': 334}), 73: (1, {'@': 334}), 77: (1, {'@': 334}), 146: (1, {'@': 334}), 164: (1, {'@': 334}), 156: (1, {'@': 334}), 5: (1, {'@': 334}), 134: (1, {'@': 334}), 70: (1, {'@': 334}), 71: (1, {'@': 334}), 106: (1, {'@': 334}), 126: (1, {'@': 334}), 65: (1, {'@': 334}), 7: (1, {'@': 334}), 151: (1, {'@': 334}), 68: (1, {'@': 334}), 53: (1, {'@': 334}), 138: (1, {'@': 334}), 142: (1, {'@': 334}), 14: (1, {'@': 334}), 37: (1, {'@': 334}), 55: (1, {'@': 334}), 60: (1, {'@': 334}), 66: (1, {'@': 334}), 152: (1, {'@': 334}), 56: (1, {'@': 334}), 153: (1, {'@': 334}), 44: (1, {'@': 334}), 1: (1, {'@': 334}), 72: (1, {'@': 334}), 81: (1, {'@': 334}), 47: (1, {'@': 334}), 107: (1, {'@': 334}), 154: (1, {'@': 334}), 67: (1, {'@': 334}), 34: (1, {'@': 334}), 24: (1, {'@': 334}), 155: (1, {'@': 334}), 75: (1, {'@': 334}), 157: (1, {'@': 334}), 158: (1, {'@': 334}), 43: (1, {'@': 334}), 145: (1, {'@': 334}), 31: (1, {'@': 334}), 122: (1, {'@': 334}), 113: (1, {'@': 334})}, 82: {3: (0, 360)}, 83: {3: (0, 746)}, 84: {3: (0, 18)}, 85: {7: (0, 355), 33: (1, {'@': 339}), 151: (1, {'@': 339}), 68: (1, {'@': 339}), 53: (1, {'@': 339}), 138: (1, {'@': 339}), 102: (1, {'@': 339}), 142: (1, {'@': 339}), 14: (1, {'@': 339}), 37: (1, {'@': 339}), 55: (1, {'@': 339}), 124: (1, {'@': 339}), 136: (1, {'@': 339}), 60: (1, {'@': 339}), 66: (1, {'@': 339}), 121: (1, {'@': 339}), 152: (1, {'@': 339}), 56: (1, {'@': 339}), 32: (1, {'@': 339}), 153: (1, {'@': 339}), 44: (1, {'@': 339}), 4: (1, {'@': 339}), 76: (1, {'@': 339}), 72: (1, {'@': 339}), 100: (1, {'@': 339}), 65: (1, {'@': 339}), 58: (1, {'@': 339}), 81: (1, {'@': 339}), 47: (1, {'@': 339}), 107: (1, {'@': 339}), 117: (1, {'@': 339}), 154: (1, {'@': 339}), 116: (1, {'@': 339}), 67: (1, {'@': 339}), 125: (1, {'@': 339}), 34: (1, {'@': 339}), 38: (1, {'@': 339}), 40: (1, {'@': 339}), 24: (1, {'@': 339}), 155: (1, {'@': 339}), 73: (1, {'@': 339}), 75: (1, {'@': 339}), 77: (1, {'@': 339}), 146: (1, {'@': 339}), 164: (1, {'@': 339}), 156: (1, {'@': 339}), 5: (1, {'@': 339}), 157: (1, {'@': 339}), 134: (1, {'@': 339}), 70: (1, {'@': 339}), 71: (1, {'@': 339}), 43: (1, {'@': 339}), 145: (1, {'@': 339}), 31: (1, {'@': 339}), 106: (1, {'@': 339}), 126: (1, {'@': 339}), 122: (1, {'@': 339}), 113: (1, {'@': 339}), 1: (1, {'@': 339}), 158: (1, {'@': 339})}, 86: {0: (1, {'@': 284}), 1: (1, {'@': 284})}, 87: {159: (0, 32), 31: (0, 36), 160: (0, 84)}, 88: {3: (0, 678)}, 89: {3: (0, 753)}, 90: {15: (0, 24), 17: (0, 30)}, 91: {2: (1, {'@': 557}), 9: (1, {'@': 557}), 6: (1, {'@': 557}), 3: (1, {'@': 557}), 8: (1, {'@': 557}), 10: (1, {'@': 557}), 12: (1, {'@': 557}), 20: (1, {'@': 557}), 13: (1, {'@': 557}), 21: (1, {'@': 557}), 22: (1, {'@': 557}), 23: (1, {'@': 557}), 25: (1, {'@': 557}), 26: (1, {'@': 557}), 28: (1, {'@': 557}), 15: (1, {'@': 557}), 16: (1, {'@': 557}), 0: (1, {'@': 557}), 18: (1, {'@': 557}), 19: (1, {'@': 557}), 1: (1, {'@': 557})}, 92: {1: (0, 685)}, 93: {0: (1, {'@': 560}), 2: (1, {'@': 560}), 3: (1, {'@': 560}), 1: (1, {'@': 560})}, 94: {27: (0, 63), 19: (1, {'@': 366}), 2: (1, {'@': 366}), 3: (1, {'@': 366}), 11: (1, {'@': 366}), 14: (1, {'@': 366}), 15: (1, {'@': 366}), 0: (1, {'@': 366}), 1: (1, {'@': 366}), 8: (1, {'@': 366}), 10: (1, {'@': 366}), 12: (1, {'@': 366}), 20: (1, {'@': 366}), 13: (1, {'@': 366}), 21: (1, {'@': 366}), 22: (1, {'@': 366}), 23: (1, {'@': 366}), 25: (1, {'@': 366}), 26: (1, {'@': 366}), 28: (1, {'@': 366}), 16: (1, {'@': 366}), 18: (1, {'@': 366}), 4: (1, {'@': 366}), 5: (1, {'@': 366}), 6: (1, {'@': 366}), 9: (1, {'@': 366}), 24: (1, {'@': 366}), 17: (1, {'@': 366}), 7: (1, {'@': 366})}, 95: {100: (0, 353), 101: (0, 358), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 24: (0, 715), 108: (0, 722), 109: (0, 729), 45: (0, 736), 48: (0, 467), 49: (0, 483), 111: (0, 500), 112: (0, 507), 29: (0, 514), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 118: (0, 195), 119: (0, 205), 120: (0, 228), 47: (0, 244), 58: (0, 236), 121: (0, 260), 122: (0, 284), 54: (0, 293), 43: (0, 300), 62: (0, 308), 123: (0, 316), 44: (0, 321), 65: (0, 334), 50: (0, 337), 66: (0, 354), 57: (0, 359), 69: (0, 371), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 40: (0, 616), 129: (0, 613), 130: (0, 619), 131: (0, 622), 132: (0, 625), 46: (0, 631), 133: (0, 634), 134: (0, 637), 135: (0, 489), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 145: (0, 646), 146: (0, 661), 147: (0, 668), 110: (0, 38), 63: (0, 675), 1: (0, 497), 148: (0, 682), 67: (0, 690), 68: (0, 697), 70: (0, 710), 71: (0, 716), 149: (0, 723), 73: (0, 737), 150: (0, 744), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 96: {3: (1, {'@': 291})}, 97: {7: (1, {'@': 572}), 33: (1, {'@': 572}), 151: (1, {'@': 572}), 68: (1, {'@': 572}), 162: (1, {'@': 572}), 53: (1, {'@': 572}), 138: (1, {'@': 572}), 102: (1, {'@': 572}), 142: (1, {'@': 572}), 124: (1, {'@': 572}), 14: (1, {'@': 572}), 136: (1, {'@': 572}), 37: (1, {'@': 572}), 55: (1, {'@': 572}), 60: (1, {'@': 572}), 66: (1, {'@': 572}), 113: (1, {'@': 572}), 121: (1, {'@': 572}), 152: (1, {'@': 572}), 56: (1, {'@': 572}), 32: (1, {'@': 572}), 153: (1, {'@': 572}), 44: (1, {'@': 572}), 4: (1, {'@': 572}), 76: (1, {'@': 572}), 1: (1, {'@': 572}), 72: (1, {'@': 572}), 100: (1, {'@': 572}), 58: (1, {'@': 572}), 81: (1, {'@': 572}), 47: (1, {'@': 572}), 107: (1, {'@': 572}), 117: (1, {'@': 572}), 154: (1, {'@': 572}), 116: (1, {'@': 572}), 163: (1, {'@': 572}), 67: (1, {'@': 572}), 125: (1, {'@': 572}), 34: (1, {'@': 572}), 38: (1, {'@': 572}), 40: (1, {'@': 572}), 73: (1, {'@': 572}), 24: (1, {'@': 572}), 155: (1, {'@': 572}), 122: (1, {'@': 572}), 77: (1, {'@': 572}), 75: (1, {'@': 572}), 146: (1, {'@': 572}), 164: (1, {'@': 572}), 156: (1, {'@': 572}), 134: (1, {'@': 572}), 157: (1, {'@': 572}), 70: (1, {'@': 572}), 71: (1, {'@': 572}), 158: (1, {'@': 572}), 43: (1, {'@': 572}), 145: (1, {'@': 572}), 31: (1, {'@': 572}), 106: (1, {'@': 572}), 126: (1, {'@': 572}), 65: (1, {'@': 572}), 5: (1, {'@': 572})}, 98: {31: (0, 36), 159: (0, 366), 0: (1, {'@': 269}), 1: (1, {'@': 269}), 3: (1, {'@': 269})}, 99: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 63: (0, 675), 65: (0, 334), 66: (0, 354), 68: (0, 697), 62: (0, 323), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 100: {7: (1, {'@': 583}), 85: (1, {'@': 583}), 8: (1, {'@': 583}), 9: (1, {'@': 583}), 10: (1, {'@': 583}), 11: (1, {'@': 583}), 12: (1, {'@': 583}), 13: (1, {'@': 583}), 14: (1, {'@': 583}), 87: (1, {'@': 583}), 93: (1, {'@': 583}), 15: (1, {'@': 583}), 16: (1, {'@': 583}), 0: (1, {'@': 583}), 17: (1, {'@': 583}), 18: (1, {'@': 583}), 19: (1, {'@': 583}), 88: (1, {'@': 583}), 4: (1, {'@': 583}), 58: (1, {'@': 583}), 90: (1, {'@': 583}), 20: (1, {'@': 583}), 6: (1, {'@': 583}), 92: (1, {'@': 583}), 21: (1, {'@': 583}), 22: (1, {'@': 583}), 23: (1, {'@': 583}), 24: (1, {'@': 583}), 2: (1, {'@': 583}), 95: (1, {'@': 583}), 25: (1, {'@': 583}), 26: (1, {'@': 583}), 27: (1, {'@': 583}), 28: (1, {'@': 583}), 5: (1, {'@': 583}), 96: (1, {'@': 583}), 98: (1, {'@': 583}), 3: (1, {'@': 583}), 1: (1, {'@': 583})}, 101: {15: (0, 35)}, 102: {30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 563), 61: (0, 581), 43: (0, 73), 33: (0, 408), 35: (0, 652), 37: (0, 674), 39: (0, 608), 44: (0, 321), 40: (0, 616), 65: (0, 334), 186: (0, 332), 47: (0, 244), 165: (0, 79), 66: (0, 354), 68: (0, 697), 69: (0, 371), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 103: {33: (1, {'@': 399}), 68: (1, {'@': 399}), 53: (1, {'@': 399}), 37: (1, {'@': 399}), 55: (1, {'@': 399}), 60: (1, {'@': 399}), 66: (1, {'@': 399}), 56: (1, {'@': 399}), 32: (1, {'@': 399}), 44: (1, {'@': 399}), 76: (1, {'@': 399}), 72: (1, {'@': 399}), 47: (1, {'@': 399}), 34: (1, {'@': 399}), 38: (1, {'@': 399}), 40: (1, {'@': 399}), 73: (1, {'@': 399}), 75: (1, {'@': 399}), 77: (1, {'@': 399}), 71: (1, {'@': 399}), 70: (1, {'@': 399}), 43: (1, {'@': 399}), 31: (1, {'@': 399}), 65: (1, {'@': 399})}, 104: {4: (0, 656)}, 105: {68: (0, 532), 31: (0, 694), 187: (0, 524), 188: (0, 447)}, 106: {80: (0, 174), 31: (0, 159), 189: (0, 299), 190: (0, 749), 15: (1, {'@': 179})}, 107: {0: (1, {'@': 313}), 1: (1, {'@': 313}), 191: (1, {'@': 313})}, 108: {33: (1, {'@': 395}), 68: (1, {'@': 395}), 53: (1, {'@': 395}), 37: (1, {'@': 395}), 55: (1, {'@': 395}), 60: (1, {'@': 395}), 66: (1, {'@': 395}), 56: (1, {'@': 395}), 32: (1, {'@': 395}), 44: (1, {'@': 395}), 76: (1, {'@': 395}), 72: (1, {'@': 395}), 47: (1, {'@': 395}), 34: (1, {'@': 395}), 38: (1, {'@': 395}), 40: (1, {'@': 395}), 73: (1, {'@': 395}), 75: (1, {'@': 395}), 77: (1, {'@': 395}), 71: (1, {'@': 395}), 70: (1, {'@': 395}), 43: (1, {'@': 395}), 31: (1, {'@': 395}), 65: (1, {'@': 395})}, 109: {14: (0, 684), 192: (0, 692), 3: (1, {'@': 535}), 6: (1, {'@': 535})}, 110: {193: (0, 450), 2: (0, 453), 3: (1, {'@': 506})}, 111: {15: (1, {'@': 184})}, 112: {191: (0, 567)}, 113: {33: (1, {'@': 396}), 68: (1, {'@': 396}), 53: (1, {'@': 396}), 37: (1, {'@': 396}), 55: (1, {'@': 396}), 60: (1, {'@': 396}), 66: (1, {'@': 396}), 56: (1, {'@': 396}), 32: (1, {'@': 396}), 44: (1, {'@': 396}), 76: (1, {'@': 396}), 72: (1, {'@': 396}), 47: (1, {'@': 396}), 34: (1, {'@': 396}), 38: (1, {'@': 396}), 40: (1, {'@': 396}), 73: (1, {'@': 396}), 75: (1, {'@': 396}), 77: (1, {'@': 396}), 71: (1, {'@': 396}), 70: (1, {'@': 396}), 43: (1, {'@': 396}), 31: (1, {'@': 396}), 65: (1, {'@': 396})}, 114: {5: (0, 104), 4: (0, 119), 194: (0, 699), 9: (1, {'@': 515}), 14: (1, {'@': 515}), 6: (1, {'@': 515}), 3: (1, {'@': 515})}, 115: {2: (0, 456), 3: (1, {'@': 508})}, 116: {189: (0, 735), 190: (0, 756), 80: (0, 174), 31: (0, 159), 15: (1, {'@': 182})}, 117: {195: (0, 575), 2: (0, 583), 15: (1, {'@': 354})}, 118: {30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 293), 61: (0, 581), 34: (0, 645), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 38: (0, 601), 39: (0, 608), 44: (0, 321), 40: (0, 616), 41: (0, 689), 65: (0, 334), 45: (0, 736), 47: (0, 244), 66: (0, 354), 68: (0, 697), 57: (0, 359), 69: (0, 371), 77: (0, 596), 71: (0, 716), 70: (0, 710), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 50: (0, 406)}, 119: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 47: (0, 244), 48: (0, 467), 49: (0, 483), 129: (0, 520), 50: (0, 337), 53: (0, 485), 74: (0, 528), 54: (0, 293), 55: (0, 586), 56: (0, 517), 81: (0, 525), 57: (0, 359), 59: (0, 557), 60: (0, 573), 61: (0, 581), 63: (0, 675), 196: (0, 706), 65: (0, 334), 66: (0, 354), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 120: {166: (0, 459), 29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 168: (0, 466), 38: (0, 601), 39: (0, 608), 40: (0, 616), 80: (0, 658), 41: (0, 689), 42: (0, 696), 43: (0, 300), 64: (0, 474), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 167: (0, 482), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 81: (0, 702), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 121: {2: (1, {'@': 173}), 15: (1, {'@': 173})}, 122: {17: (0, 591), 2: (1, {'@': 356}), 15: (1, {'@': 356})}, 123: {15: (0, 463)}, 124: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 129: (0, 613), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 81: (0, 525), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 108: (0, 731), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596), 64: (0, 599), 3: (1, {'@': 445}), 6: (1, {'@': 445})}, 125: {2: (0, 490), 3: (1, {'@': 495})}, 126: {15: (1, {'@': 187})}, 127: {15: (0, 412)}, 128: {33: (1, {'@': 329}), 151: (1, {'@': 329}), 68: (1, {'@': 329}), 53: (1, {'@': 329}), 138: (1, {'@': 329}), 102: (1, {'@': 329}), 142: (1, {'@': 329}), 14: (1, {'@': 329}), 37: (1, {'@': 329}), 55: (1, {'@': 329}), 124: (1, {'@': 329}), 136: (1, {'@': 329}), 60: (1, {'@': 329}), 66: (1, {'@': 329}), 121: (1, {'@': 329}), 152: (1, {'@': 329}), 56: (1, {'@': 329}), 32: (1, {'@': 329}), 153: (1, {'@': 329}), 44: (1, {'@': 329}), 4: (1, {'@': 329}), 76: (1, {'@': 329}), 72: (1, {'@': 329}), 100: (1, {'@': 329}), 65: (1, {'@': 329}), 58: (1, {'@': 329}), 81: (1, {'@': 329}), 47: (1, {'@': 329}), 107: (1, {'@': 329}), 117: (1, {'@': 329}), 154: (1, {'@': 329}), 116: (1, {'@': 329}), 67: (1, {'@': 329}), 125: (1, {'@': 329}), 34: (1, {'@': 329}), 38: (1, {'@': 329}), 40: (1, {'@': 329}), 24: (1, {'@': 329}), 155: (1, {'@': 329}), 73: (1, {'@': 329}), 75: (1, {'@': 329}), 77: (1, {'@': 329}), 146: (1, {'@': 329}), 164: (1, {'@': 329}), 156: (1, {'@': 329}), 5: (1, {'@': 329}), 157: (1, {'@': 329}), 134: (1, {'@': 329}), 70: (1, {'@': 329}), 71: (1, {'@': 329}), 43: (1, {'@': 329}), 145: (1, {'@': 329}), 31: (1, {'@': 329}), 106: (1, {'@': 329}), 126: (1, {'@': 329}), 122: (1, {'@': 329}), 113: (1, {'@': 329}), 1: (1, {'@': 329}), 158: (1, {'@': 329})}, 129: {2: (0, 713), 3: (1, {'@': 444}), 6: (1, {'@': 444})}, 130: {166: (0, 183), 29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 80: (0, 658), 41: (0, 689), 42: (0, 696), 43: (0, 300), 64: (0, 474), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 167: (0, 482), 169: (0, 501), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 168: (0, 509), 72: (0, 390), 73: (0, 737), 81: (0, 702), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596), 3: (1, {'@': 498})}, 131: {2: (1, {'@': 159}), 3: (1, {'@': 159}), 19: (1, {'@': 159}), 0: (1, {'@': 159}), 1: (1, {'@': 159}), 15: (1, {'@': 159}), 8: (1, {'@': 159}), 10: (1, {'@': 159}), 12: (1, {'@': 159}), 20: (1, {'@': 159}), 13: (1, {'@': 159}), 21: (1, {'@': 159}), 22: (1, {'@': 159}), 23: (1, {'@': 159}), 25: (1, {'@': 159}), 26: (1, {'@': 159}), 28: (1, {'@': 159}), 16: (1, {'@': 159}), 18: (1, {'@': 159}), 5: (1, {'@': 159}), 4: (1, {'@': 159}), 6: (1, {'@': 159}), 9: (1, {'@': 159}), 17: (1, {'@': 159}), 24: (1, {'@': 159})}, 132: {2: (0, 415), 197: (0, 418), 0: (1, {'@': 274}), 1: (1, {'@': 274})}, 133: {33: (1, {'@': 328}), 151: (1, {'@': 328}), 68: (1, {'@': 328}), 53: (1, {'@': 328}), 138: (1, {'@': 328}), 102: (1, {'@': 328}), 142: (1, {'@': 328}), 14: (1, {'@': 328}), 37: (1, {'@': 328}), 55: (1, {'@': 328}), 124: (1, {'@': 328}), 136: (1, {'@': 328}), 60: (1, {'@': 328}), 66: (1, {'@': 328}), 121: (1, {'@': 328}), 152: (1, {'@': 328}), 56: (1, {'@': 328}), 32: (1, {'@': 328}), 153: (1, {'@': 328}), 44: (1, {'@': 328}), 4: (1, {'@': 328}), 76: (1, {'@': 328}), 72: (1, {'@': 328}), 100: (1, {'@': 328}), 65: (1, {'@': 328}), 58: (1, {'@': 328}), 81: (1, {'@': 328}), 47: (1, {'@': 328}), 107: (1, {'@': 328}), 117: (1, {'@': 328}), 154: (1, {'@': 328}), 116: (1, {'@': 328}), 67: (1, {'@': 328}), 125: (1, {'@': 328}), 34: (1, {'@': 328}), 38: (1, {'@': 328}), 40: (1, {'@': 328}), 24: (1, {'@': 328}), 155: (1, {'@': 328}), 73: (1, {'@': 328}), 75: (1, {'@': 328}), 77: (1, {'@': 328}), 146: (1, {'@': 328}), 164: (1, {'@': 328}), 156: (1, {'@': 328}), 5: (1, {'@': 328}), 157: (1, {'@': 328}), 134: (1, {'@': 328}), 70: (1, {'@': 328}), 71: (1, {'@': 328}), 43: (1, {'@': 328}), 145: (1, {'@': 328}), 31: (1, {'@': 328}), 106: (1, {'@': 328}), 126: (1, {'@': 328}), 122: (1, {'@': 328}), 113: (1, {'@': 328}), 1: (1, {'@': 328}), 158: (1, {'@': 328})}, 134: {14: (1, {'@': 614}), 9: (1, {'@': 614}), 4: (1, {'@': 614}), 5: (1, {'@': 614}), 6: (1, {'@': 614}), 3: (1, {'@': 614})}, 135: {3: (1, {'@': 512})}, 136: {2: (1, {'@': 567}), 0: (1, {'@': 567}), 1: (1, {'@': 567})}, 137: {0: (1, {'@': 254}), 1: (1, {'@': 254})}, 138: {33: (1, {'@': 327}), 151: (1, {'@': 327}), 68: (1, {'@': 327}), 53: (1, {'@': 327}), 138: (1, {'@': 327}), 102: (1, {'@': 327}), 142: (1, {'@': 327}), 14: (1, {'@': 327}), 37: (1, {'@': 327}), 55: (1, {'@': 327}), 124: (1, {'@': 327}), 136: (1, {'@': 327}), 60: (1, {'@': 327}), 66: (1, {'@': 327}), 121: (1, {'@': 327}), 152: (1, {'@': 327}), 56: (1, {'@': 327}), 32: (1, {'@': 327}), 153: (1, {'@': 327}), 44: (1, {'@': 327}), 4: (1, {'@': 327}), 76: (1, {'@': 327}), 72: (1, {'@': 327}), 100: (1, {'@': 327}), 65: (1, {'@': 327}), 58: (1, {'@': 327}), 81: (1, {'@': 327}), 47: (1, {'@': 327}), 107: (1, {'@': 327}), 117: (1, {'@': 327}), 154: (1, {'@': 327}), 116: (1, {'@': 327}), 67: (1, {'@': 327}), 125: (1, {'@': 327}), 34: (1, {'@': 327}), 38: (1, {'@': 327}), 40: (1, {'@': 327}), 24: (1, {'@': 327}), 155: (1, {'@': 327}), 73: (1, {'@': 327}), 75: (1, {'@': 327}), 77: (1, {'@': 327}), 146: (1, {'@': 327}), 164: (1, {'@': 327}), 156: (1, {'@': 327}), 5: (1, {'@': 327}), 157: (1, {'@': 327}), 134: (1, {'@': 327}), 70: (1, {'@': 327}), 71: (1, {'@': 327}), 43: (1, {'@': 327}), 145: (1, {'@': 327}), 31: (1, {'@': 327}), 106: (1, {'@': 327}), 126: (1, {'@': 327}), 122: (1, {'@': 327}), 113: (1, {'@': 327}), 1: (1, {'@': 327}), 158: (1, {'@': 327})}, 139: {85: (1, {'@': 426}), 11: (1, {'@': 426}), 176: (1, {'@': 426}), 86: (1, {'@': 426}), 14: (1, {'@': 426}), 87: (1, {'@': 426}), 174: (1, {'@': 426}), 93: (1, {'@': 426}), 177: (1, {'@': 426}), 153: (1, {'@': 426}), 80: (1, {'@': 426}), 19: (1, {'@': 426}), 88: (1, {'@': 426}), 58: (1, {'@': 426}), 89: (1, {'@': 426}), 94: (1, {'@': 426}), 81: (1, {'@': 426}), 47: (1, {'@': 426}), 90: (1, {'@': 426}), 34: (1, {'@': 426}), 91: (1, {'@': 426}), 92: (1, {'@': 426}), 82: (1, {'@': 426}), 2: (1, {'@': 426}), 95: (1, {'@': 426}), 27: (1, {'@': 426}), 70: (1, {'@': 426}), 96: (1, {'@': 426}), 97: (1, {'@': 426}), 43: (1, {'@': 426}), 98: (1, {'@': 426}), 3: (1, {'@': 426}), 15: (1, {'@': 426}), 0: (1, {'@': 426}), 1: (1, {'@': 426}), 8: (1, {'@': 426}), 10: (1, {'@': 426}), 12: (1, {'@': 426}), 13: (1, {'@': 426}), 16: (1, {'@': 426}), 18: (1, {'@': 426}), 20: (1, {'@': 426}), 21: (1, {'@': 426}), 22: (1, {'@': 426}), 23: (1, {'@': 426}), 25: (1, {'@': 426}), 26: (1, {'@': 426}), 28: (1, {'@': 426}), 9: (1, {'@': 426}), 4: (1, {'@': 426}), 5: (1, {'@': 426}), 6: (1, {'@': 426}), 7: (1, {'@': 426}), 17: (1, {'@': 426}), 24: (1, {'@': 426})}, 140: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 64: (0, 499), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 141: {0: (1, {'@': 215}), 1: (1, {'@': 215})}, 142: {17: (0, 421), 2: (1, {'@': 268}), 0: (1, {'@': 268}), 1: (1, {'@': 268})}, 143: {33: (1, {'@': 330}), 151: (1, {'@': 330}), 68: (1, {'@': 330}), 53: (1, {'@': 330}), 138: (1, {'@': 330}), 102: (1, {'@': 330}), 142: (1, {'@': 330}), 14: (1, {'@': 330}), 37: (1, {'@': 330}), 55: (1, {'@': 330}), 124: (1, {'@': 330}), 136: (1, {'@': 330}), 60: (1, {'@': 330}), 66: (1, {'@': 330}), 121: (1, {'@': 330}), 152: (1, {'@': 330}), 56: (1, {'@': 330}), 32: (1, {'@': 330}), 153: (1, {'@': 330}), 44: (1, {'@': 330}), 4: (1, {'@': 330}), 76: (1, {'@': 330}), 72: (1, {'@': 330}), 100: (1, {'@': 330}), 65: (1, {'@': 330}), 58: (1, {'@': 330}), 81: (1, {'@': 330}), 47: (1, {'@': 330}), 107: (1, {'@': 330}), 117: (1, {'@': 330}), 154: (1, {'@': 330}), 116: (1, {'@': 330}), 67: (1, {'@': 330}), 125: (1, {'@': 330}), 34: (1, {'@': 330}), 38: (1, {'@': 330}), 40: (1, {'@': 330}), 24: (1, {'@': 330}), 155: (1, {'@': 330}), 73: (1, {'@': 330}), 75: (1, {'@': 330}), 77: (1, {'@': 330}), 146: (1, {'@': 330}), 164: (1, {'@': 330}), 156: (1, {'@': 330}), 5: (1, {'@': 330}), 157: (1, {'@': 330}), 134: (1, {'@': 330}), 70: (1, {'@': 330}), 71: (1, {'@': 330}), 43: (1, {'@': 330}), 145: (1, {'@': 330}), 31: (1, {'@': 330}), 106: (1, {'@': 330}), 126: (1, {'@': 330}), 122: (1, {'@': 330}), 113: (1, {'@': 330}), 1: (1, {'@': 330}), 158: (1, {'@': 330})}, 144: {85: (1, {'@': 424}), 11: (1, {'@': 424}), 176: (1, {'@': 424}), 86: (1, {'@': 424}), 14: (1, {'@': 424}), 87: (1, {'@': 424}), 174: (1, {'@': 424}), 93: (1, {'@': 424}), 177: (1, {'@': 424}), 153: (1, {'@': 424}), 80: (1, {'@': 424}), 19: (1, {'@': 424}), 88: (1, {'@': 424}), 58: (1, {'@': 424}), 89: (1, {'@': 424}), 94: (1, {'@': 424}), 81: (1, {'@': 424}), 47: (1, {'@': 424}), 90: (1, {'@': 424}), 34: (1, {'@': 424}), 91: (1, {'@': 424}), 92: (1, {'@': 424}), 82: (1, {'@': 424}), 2: (1, {'@': 424}), 95: (1, {'@': 424}), 27: (1, {'@': 424}), 70: (1, {'@': 424}), 96: (1, {'@': 424}), 97: (1, {'@': 424}), 43: (1, {'@': 424}), 98: (1, {'@': 424}), 3: (1, {'@': 424}), 15: (1, {'@': 424}), 0: (1, {'@': 424}), 1: (1, {'@': 424}), 8: (1, {'@': 424}), 10: (1, {'@': 424}), 12: (1, {'@': 424}), 13: (1, {'@': 424}), 16: (1, {'@': 424}), 18: (1, {'@': 424}), 20: (1, {'@': 424}), 21: (1, {'@': 424}), 22: (1, {'@': 424}), 23: (1, {'@': 424}), 25: (1, {'@': 424}), 26: (1, {'@': 424}), 28: (1, {'@': 424}), 9: (1, {'@': 424}), 4: (1, {'@': 424}), 5: (1, {'@': 424}), 6: (1, {'@': 424}), 7: (1, {'@': 424}), 17: (1, {'@': 424}), 24: (1, {'@': 424})}, 145: {85: (1, {'@': 415}), 11: (1, {'@': 415}), 176: (1, {'@': 415}), 86: (1, {'@': 415}), 14: (1, {'@': 415}), 87: (1, {'@': 415}), 174: (1, {'@': 415}), 93: (1, {'@': 415}), 177: (1, {'@': 415}), 153: (1, {'@': 415}), 80: (1, {'@': 415}), 19: (1, {'@': 415}), 88: (1, {'@': 415}), 58: (1, {'@': 415}), 89: (1, {'@': 415}), 94: (1, {'@': 415}), 81: (1, {'@': 415}), 47: (1, {'@': 415}), 90: (1, {'@': 415}), 34: (1, {'@': 415}), 91: (1, {'@': 415}), 92: (1, {'@': 415}), 82: (1, {'@': 415}), 2: (1, {'@': 415}), 95: (1, {'@': 415}), 27: (1, {'@': 415}), 70: (1, {'@': 415}), 96: (1, {'@': 415}), 97: (1, {'@': 415}), 43: (1, {'@': 415}), 98: (1, {'@': 415}), 3: (1, {'@': 415}), 15: (1, {'@': 415}), 0: (1, {'@': 415}), 1: (1, {'@': 415}), 8: (1, {'@': 415}), 10: (1, {'@': 415}), 12: (1, {'@': 415}), 13: (1, {'@': 415}), 16: (1, {'@': 415}), 18: (1, {'@': 415}), 20: (1, {'@': 415}), 21: (1, {'@': 415}), 22: (1, {'@': 415}), 23: (1, {'@': 415}), 25: (1, {'@': 415}), 26: (1, {'@': 415}), 28: (1, {'@': 415}), 9: (1, {'@': 415}), 4: (1, {'@': 415}), 5: (1, {'@': 415}), 6: (1, {'@': 415}), 7: (1, {'@': 415}), 17: (1, {'@': 415}), 24: (1, {'@': 415})}, 146: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 64: (0, 1), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 147: {2: (0, 451), 0: (1, {'@': 279}), 1: (1, {'@': 279})}, 148: {2: (0, 5), 3: (1, {'@': 134})}, 149: {30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 293), 61: (0, 581), 50: (0, 471), 34: (0, 645), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 38: (0, 601), 39: (0, 608), 44: (0, 321), 40: (0, 616), 41: (0, 689), 65: (0, 334), 45: (0, 736), 47: (0, 244), 66: (0, 354), 68: (0, 697), 57: (0, 359), 69: (0, 371), 71: (0, 716), 70: (0, 710), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 150: {198: (0, 424), 2: (0, 427), 15: (1, {'@': 170})}, 151: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 199: (0, 720), 76: (0, 757), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 64: (0, 655), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 200: (0, 670), 77: (0, 596)}, 152: {2: (1, {'@': 511}), 3: (1, {'@': 511})}, 153: {82: (0, 11), 78: (0, 216), 81: (0, 231), 80: (0, 255), 84: (0, 17), 79: (0, 23), 83: (0, 29), 31: (0, 270), 3: (1, {'@': 141})}, 154: {43: (0, 479), 1: (0, 487)}, 155: {31: (0, 431), 2: (0, 434), 198: (0, 437), 15: (1, {'@': 186})}, 156: {29: (0, 514), 59: (0, 557), 49: (0, 483), 30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 293), 61: (0, 581), 34: (0, 645), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 63: (0, 675), 38: (0, 601), 39: (0, 608), 44: (0, 321), 40: (0, 616), 41: (0, 689), 42: (0, 696), 65: (0, 334), 50: (0, 337), 45: (0, 736), 47: (0, 244), 48: (0, 467), 66: (0, 354), 68: (0, 697), 57: (0, 359), 69: (0, 371), 70: (0, 710), 71: (0, 716), 74: (0, 727), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 157: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 64: (0, 521), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596), 2: (1, {'@': 462}), 6: (1, {'@': 462})}, 158: {24: (0, 495), 0: (1, {'@': 250}), 1: (1, {'@': 250})}, 159: {19: (0, 430), 2: (1, {'@': 174}), 15: (1, {'@': 174})}, 160: {166: (0, 183), 29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 167: (0, 644), 37: (0, 674), 38: (0, 601), 168: (0, 651), 39: (0, 608), 80: (0, 658), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 64: (0, 666), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 3: (0, 740), 50: (0, 337), 51: (0, 522), 169: (0, 672), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 171: (0, 747), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 77: (0, 596), 70: (0, 710), 71: (0, 716), 170: (0, 688), 72: (0, 390), 73: (0, 737), 81: (0, 702), 74: (0, 394), 75: (0, 399), 76: (0, 757)}, 161: {2: (1, {'@': 459}), 6: (1, {'@': 459})}, 162: {0: (1, {'@': 311}), 1: (1, {'@': 311})}, 163: {29: (0, 514), 59: (0, 557), 49: (0, 483), 30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 293), 61: (0, 581), 34: (0, 645), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 63: (0, 675), 38: (0, 601), 39: (0, 608), 44: (0, 321), 40: (0, 616), 41: (0, 689), 42: (0, 696), 65: (0, 334), 50: (0, 337), 45: (0, 736), 47: (0, 244), 48: (0, 467), 66: (0, 354), 74: (0, 504), 68: (0, 697), 57: (0, 359), 69: (0, 371), 70: (0, 710), 71: (0, 716), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 164: {15: (1, {'@': 172})}, 165: {100: (0, 353), 101: (0, 358), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 24: (0, 715), 108: (0, 722), 109: (0, 729), 45: (0, 736), 48: (0, 467), 49: (0, 483), 111: (0, 500), 112: (0, 507), 29: (0, 514), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 118: (0, 195), 110: (0, 754), 119: (0, 205), 120: (0, 228), 47: (0, 244), 58: (0, 236), 121: (0, 260), 122: (0, 284), 54: (0, 293), 43: (0, 300), 62: (0, 308), 123: (0, 316), 44: (0, 321), 65: (0, 334), 50: (0, 337), 66: (0, 354), 57: (0, 359), 69: (0, 371), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 40: (0, 616), 129: (0, 613), 130: (0, 619), 131: (0, 622), 132: (0, 625), 46: (0, 631), 133: (0, 634), 134: (0, 637), 135: (0, 489), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 145: (0, 646), 146: (0, 661), 147: (0, 668), 63: (0, 675), 1: (0, 497), 148: (0, 682), 67: (0, 690), 68: (0, 697), 70: (0, 710), 71: (0, 716), 149: (0, 723), 73: (0, 737), 150: (0, 744), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 166: {201: (0, 529), 15: (0, 157), 2: (1, {'@': 458}), 6: (1, {'@': 458})}, 167: {2: (0, 37), 3: (1, {'@': 150})}, 168: {33: (1, {'@': 401}), 68: (1, {'@': 401}), 53: (1, {'@': 401}), 37: (1, {'@': 401}), 55: (1, {'@': 401}), 60: (1, {'@': 401}), 66: (1, {'@': 401}), 56: (1, {'@': 401}), 32: (1, {'@': 401}), 44: (1, {'@': 401}), 76: (1, {'@': 401}), 72: (1, {'@': 401}), 47: (1, {'@': 401}), 34: (1, {'@': 401}), 38: (1, {'@': 401}), 40: (1, {'@': 401}), 73: (1, {'@': 401}), 75: (1, {'@': 401}), 77: (1, {'@': 401}), 70: (1, {'@': 401}), 71: (1, {'@': 401}), 43: (1, {'@': 401}), 31: (1, {'@': 401}), 65: (1, {'@': 401})}, 169: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 64: (0, 443), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 170: {19: (0, 734), 43: (0, 105)}, 171: {29: (0, 514), 30: (0, 404), 64: (0, 537), 31: (0, 382), 32: (0, 398), 15: (0, 157), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 76: (0, 757), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 201: (0, 545), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 77: (0, 596), 2: (1, {'@': 456}), 6: (1, {'@': 456})}, 172: {202: (0, 43), 2: (0, 49), 3: (1, {'@': 148})}, 173: {33: (1, {'@': 403}), 68: (1, {'@': 403}), 53: (1, {'@': 403}), 37: (1, {'@': 403}), 55: (1, {'@': 403}), 60: (1, {'@': 403}), 66: (1, {'@': 403}), 56: (1, {'@': 403}), 32: (1, {'@': 403}), 44: (1, {'@': 403}), 76: (1, {'@': 403}), 72: (1, {'@': 403}), 47: (1, {'@': 403}), 34: (1, {'@': 403}), 38: (1, {'@': 403}), 40: (1, {'@': 403}), 73: (1, {'@': 403}), 75: (1, {'@': 403}), 77: (1, {'@': 403}), 70: (1, {'@': 403}), 71: (1, {'@': 403}), 43: (1, {'@': 403}), 31: (1, {'@': 403}), 65: (1, {'@': 403})}, 174: {31: (0, 445)}, 175: {85: (1, {'@': 418}), 11: (1, {'@': 418}), 176: (1, {'@': 418}), 86: (1, {'@': 418}), 14: (1, {'@': 418}), 87: (1, {'@': 418}), 174: (1, {'@': 418}), 93: (1, {'@': 418}), 177: (1, {'@': 418}), 153: (1, {'@': 418}), 80: (1, {'@': 418}), 19: (1, {'@': 418}), 88: (1, {'@': 418}), 58: (1, {'@': 418}), 89: (1, {'@': 418}), 94: (1, {'@': 418}), 81: (1, {'@': 418}), 47: (1, {'@': 418}), 90: (1, {'@': 418}), 34: (1, {'@': 418}), 91: (1, {'@': 418}), 92: (1, {'@': 418}), 82: (1, {'@': 418}), 2: (1, {'@': 418}), 95: (1, {'@': 418}), 27: (1, {'@': 418}), 70: (1, {'@': 418}), 96: (1, {'@': 418}), 97: (1, {'@': 418}), 43: (1, {'@': 418}), 98: (1, {'@': 418}), 3: (1, {'@': 418}), 15: (1, {'@': 418}), 0: (1, {'@': 418}), 1: (1, {'@': 418}), 8: (1, {'@': 418}), 10: (1, {'@': 418}), 12: (1, {'@': 418}), 13: (1, {'@': 418}), 16: (1, {'@': 418}), 18: (1, {'@': 418}), 20: (1, {'@': 418}), 21: (1, {'@': 418}), 22: (1, {'@': 418}), 23: (1, {'@': 418}), 25: (1, {'@': 418}), 26: (1, {'@': 418}), 28: (1, {'@': 418}), 9: (1, {'@': 418}), 4: (1, {'@': 418}), 5: (1, {'@': 418}), 6: (1, {'@': 418}), 7: (1, {'@': 418}), 17: (1, {'@': 418}), 24: (1, {'@': 418})}, 176: {2: (0, 553), 6: (1, {'@': 450})}, 177: {78: (0, 216), 80: (0, 255), 31: (0, 270), 83: (0, 55), 79: (0, 23)}, 178: {85: (0, 168), 92: (0, 173), 87: (0, 184), 96: (0, 191), 98: (0, 200), 58: (0, 209), 93: (0, 217), 95: (0, 225), 88: (0, 233), 90: (0, 241), 203: (0, 512), 14: (1, {'@': 370}), 3: (1, {'@': 370}), 2: (1, {'@': 370}), 27: (1, {'@': 370}), 19: (1, {'@': 370}), 11: (1, {'@': 370}), 1: (1, {'@': 370}), 15: (1, {'@': 370}), 0: (1, {'@': 370}), 8: (1, {'@': 370}), 10: (1, {'@': 370}), 12: (1, {'@': 370}), 20: (1, {'@': 370}), 13: (1, {'@': 370}), 21: (1, {'@': 370}), 22: (1, {'@': 370}), 23: (1, {'@': 370}), 25: (1, {'@': 370}), 26: (1, {'@': 370}), 28: (1, {'@': 370}), 16: (1, {'@': 370}), 18: (1, {'@': 370}), 4: (1, {'@': 370}), 5: (1, {'@': 370}), 6: (1, {'@': 370}), 7: (1, {'@': 370}), 9: (1, {'@': 370}), 24: (1, {'@': 370}), 17: (1, {'@': 370})}, 179: {15: (0, 448)}, 180: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 15: (0, 157), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 76: (0, 757), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 201: (0, 161), 56: (0, 517), 57: (0, 359), 58: (0, 236), 64: (0, 166), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 77: (0, 596), 2: (1, {'@': 460}), 6: (1, {'@': 460})}, 181: {15: (0, 180), 29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 64: (0, 712), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 172: (0, 561), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596), 6: (1, {'@': 451})}, 182: {40: (0, 107), 204: (0, 61)}, 183: {205: (0, 110), 193: (0, 115), 2: (0, 120), 3: (1, {'@': 510})}, 184: {33: (1, {'@': 406}), 68: (1, {'@': 406}), 53: (1, {'@': 406}), 37: (1, {'@': 406}), 55: (1, {'@': 406}), 60: (1, {'@': 406}), 66: (1, {'@': 406}), 56: (1, {'@': 406}), 32: (1, {'@': 406}), 44: (1, {'@': 406}), 76: (1, {'@': 406}), 72: (1, {'@': 406}), 47: (1, {'@': 406}), 34: (1, {'@': 406}), 38: (1, {'@': 406}), 40: (1, {'@': 406}), 73: (1, {'@': 406}), 75: (1, {'@': 406}), 77: (1, {'@': 406}), 70: (1, {'@': 406}), 71: (1, {'@': 406}), 43: (1, {'@': 406}), 31: (1, {'@': 406}), 65: (1, {'@': 406})}, 185: {15: (1, {'@': 171})}, 186: {85: (1, {'@': 417}), 11: (1, {'@': 417}), 176: (1, {'@': 417}), 86: (1, {'@': 417}), 14: (1, {'@': 417}), 87: (1, {'@': 417}), 174: (1, {'@': 417}), 93: (1, {'@': 417}), 177: (1, {'@': 417}), 153: (1, {'@': 417}), 80: (1, {'@': 417}), 19: (1, {'@': 417}), 88: (1, {'@': 417}), 58: (1, {'@': 417}), 89: (1, {'@': 417}), 94: (1, {'@': 417}), 81: (1, {'@': 417}), 47: (1, {'@': 417}), 90: (1, {'@': 417}), 34: (1, {'@': 417}), 91: (1, {'@': 417}), 92: (1, {'@': 417}), 82: (1, {'@': 417}), 2: (1, {'@': 417}), 95: (1, {'@': 417}), 27: (1, {'@': 417}), 70: (1, {'@': 417}), 96: (1, {'@': 417}), 97: (1, {'@': 417}), 43: (1, {'@': 417}), 98: (1, {'@': 417}), 3: (1, {'@': 417}), 15: (1, {'@': 417}), 0: (1, {'@': 417}), 1: (1, {'@': 417}), 8: (1, {'@': 417}), 10: (1, {'@': 417}), 12: (1, {'@': 417}), 13: (1, {'@': 417}), 16: (1, {'@': 417}), 18: (1, {'@': 417}), 20: (1, {'@': 417}), 21: (1, {'@': 417}), 22: (1, {'@': 417}), 23: (1, {'@': 417}), 25: (1, {'@': 417}), 26: (1, {'@': 417}), 28: (1, {'@': 417}), 9: (1, {'@': 417}), 4: (1, {'@': 417}), 5: (1, {'@': 417}), 6: (1, {'@': 417}), 7: (1, {'@': 417}), 17: (1, {'@': 417}), 24: (1, {'@': 417})}, 187: {2: (0, 68), 3: (1, {'@': 154})}, 188: {33: (1, {'@': 317}), 151: (1, {'@': 317}), 68: (1, {'@': 317}), 53: (1, {'@': 317}), 138: (1, {'@': 317}), 102: (1, {'@': 317}), 142: (1, {'@': 317}), 14: (1, {'@': 317}), 37: (1, {'@': 317}), 55: (1, {'@': 317}), 124: (1, {'@': 317}), 136: (1, {'@': 317}), 60: (1, {'@': 317}), 66: (1, {'@': 317}), 121: (1, {'@': 317}), 152: (1, {'@': 317}), 56: (1, {'@': 317}), 32: (1, {'@': 317}), 153: (1, {'@': 317}), 44: (1, {'@': 317}), 4: (1, {'@': 317}), 76: (1, {'@': 317}), 72: (1, {'@': 317}), 100: (1, {'@': 317}), 65: (1, {'@': 317}), 58: (1, {'@': 317}), 81: (1, {'@': 317}), 47: (1, {'@': 317}), 107: (1, {'@': 317}), 117: (1, {'@': 317}), 154: (1, {'@': 317}), 116: (1, {'@': 317}), 67: (1, {'@': 317}), 125: (1, {'@': 317}), 34: (1, {'@': 317}), 38: (1, {'@': 317}), 40: (1, {'@': 317}), 24: (1, {'@': 317}), 155: (1, {'@': 317}), 73: (1, {'@': 317}), 75: (1, {'@': 317}), 77: (1, {'@': 317}), 146: (1, {'@': 317}), 164: (1, {'@': 317}), 156: (1, {'@': 317}), 5: (1, {'@': 317}), 157: (1, {'@': 317}), 134: (1, {'@': 317}), 70: (1, {'@': 317}), 71: (1, {'@': 317}), 43: (1, {'@': 317}), 145: (1, {'@': 317}), 31: (1, {'@': 317}), 106: (1, {'@': 317}), 126: (1, {'@': 317}), 122: (1, {'@': 317}), 113: (1, {'@': 317}), 1: (1, {'@': 317}), 158: (1, {'@': 317})}, 189: {7: (1, {'@': 191}), 33: (1, {'@': 191}), 151: (1, {'@': 191}), 68: (1, {'@': 191}), 53: (1, {'@': 191}), 138: (1, {'@': 191}), 102: (1, {'@': 191}), 142: (1, {'@': 191}), 124: (1, {'@': 191}), 14: (1, {'@': 191}), 136: (1, {'@': 191}), 37: (1, {'@': 191}), 55: (1, {'@': 191}), 60: (1, {'@': 191}), 66: (1, {'@': 191}), 113: (1, {'@': 191}), 121: (1, {'@': 191}), 152: (1, {'@': 191}), 56: (1, {'@': 191}), 32: (1, {'@': 191}), 153: (1, {'@': 191}), 44: (1, {'@': 191}), 4: (1, {'@': 191}), 76: (1, {'@': 191}), 1: (1, {'@': 191}), 72: (1, {'@': 191}), 100: (1, {'@': 191}), 58: (1, {'@': 191}), 81: (1, {'@': 191}), 47: (1, {'@': 191}), 107: (1, {'@': 191}), 117: (1, {'@': 191}), 154: (1, {'@': 191}), 116: (1, {'@': 191}), 67: (1, {'@': 191}), 125: (1, {'@': 191}), 34: (1, {'@': 191}), 38: (1, {'@': 191}), 40: (1, {'@': 191}), 73: (1, {'@': 191}), 24: (1, {'@': 191}), 155: (1, {'@': 191}), 122: (1, {'@': 191}), 77: (1, {'@': 191}), 75: (1, {'@': 191}), 146: (1, {'@': 191}), 164: (1, {'@': 191}), 156: (1, {'@': 191}), 134: (1, {'@': 191}), 157: (1, {'@': 191}), 70: (1, {'@': 191}), 71: (1, {'@': 191}), 158: (1, {'@': 191}), 43: (1, {'@': 191}), 145: (1, {'@': 191}), 31: (1, {'@': 191}), 106: (1, {'@': 191}), 126: (1, {'@': 191}), 65: (1, {'@': 191}), 5: (1, {'@': 191}), 162: (1, {'@': 191}), 163: (1, {'@': 191}), 175: (1, {'@': 191})}, 190: {81: (0, 231), 80: (0, 255), 84: (0, 326), 83: (0, 341), 3: (1, {'@': 129})}, 191: {33: (1, {'@': 400}), 68: (1, {'@': 400}), 53: (1, {'@': 400}), 37: (1, {'@': 400}), 55: (1, {'@': 400}), 60: (1, {'@': 400}), 66: (1, {'@': 400}), 56: (1, {'@': 400}), 32: (1, {'@': 400}), 44: (1, {'@': 400}), 76: (1, {'@': 400}), 72: (1, {'@': 400}), 47: (1, {'@': 400}), 34: (1, {'@': 400}), 38: (1, {'@': 400}), 40: (1, {'@': 400}), 73: (1, {'@': 400}), 75: (1, {'@': 400}), 77: (1, {'@': 400}), 70: (1, {'@': 400}), 71: (1, {'@': 400}), 43: (1, {'@': 400}), 31: (1, {'@': 400}), 65: (1, {'@': 400})}, 192: {154: (0, 220), 206: (0, 396)}, 193: {0: (1, {'@': 554}), 19: (1, {'@': 554}), 1: (1, {'@': 554})}, 194: {188: (0, 693), 31: (0, 694), 187: (0, 524), 68: (0, 532)}, 195: {0: (1, {'@': 209}), 1: (1, {'@': 209})}, 196: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 53: (0, 485), 54: (0, 293), 74: (0, 329), 55: (0, 586), 56: (0, 517), 57: (0, 359), 59: (0, 557), 60: (0, 573), 61: (0, 581), 63: (0, 675), 65: (0, 334), 66: (0, 354), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 197: {31: (0, 454)}, 198: {0: (1, {'@': 551}), 1: (1, {'@': 551})}, 199: {3: (1, {'@': 145})}, 200: {33: (1, {'@': 405}), 68: (1, {'@': 405}), 53: (1, {'@': 405}), 37: (1, {'@': 405}), 55: (1, {'@': 405}), 60: (1, {'@': 405}), 66: (1, {'@': 405}), 56: (1, {'@': 405}), 32: (1, {'@': 405}), 44: (1, {'@': 405}), 76: (1, {'@': 405}), 72: (1, {'@': 405}), 47: (1, {'@': 405}), 34: (1, {'@': 405}), 38: (1, {'@': 405}), 40: (1, {'@': 405}), 73: (1, {'@': 405}), 75: (1, {'@': 405}), 77: (1, {'@': 405}), 70: (1, {'@': 405}), 71: (1, {'@': 405}), 43: (1, {'@': 405}), 31: (1, {'@': 405}), 65: (1, {'@': 405})}, 201: {3: (1, {'@': 136})}, 202: {33: (1, {'@': 325}), 151: (1, {'@': 325}), 68: (1, {'@': 325}), 53: (1, {'@': 325}), 138: (1, {'@': 325}), 102: (1, {'@': 325}), 142: (1, {'@': 325}), 14: (1, {'@': 325}), 37: (1, {'@': 325}), 55: (1, {'@': 325}), 124: (1, {'@': 325}), 136: (1, {'@': 325}), 60: (1, {'@': 325}), 66: (1, {'@': 325}), 121: (1, {'@': 325}), 152: (1, {'@': 325}), 56: (1, {'@': 325}), 32: (1, {'@': 325}), 153: (1, {'@': 325}), 44: (1, {'@': 325}), 4: (1, {'@': 325}), 76: (1, {'@': 325}), 72: (1, {'@': 325}), 100: (1, {'@': 325}), 65: (1, {'@': 325}), 58: (1, {'@': 325}), 81: (1, {'@': 325}), 47: (1, {'@': 325}), 107: (1, {'@': 325}), 117: (1, {'@': 325}), 154: (1, {'@': 325}), 116: (1, {'@': 325}), 67: (1, {'@': 325}), 125: (1, {'@': 325}), 34: (1, {'@': 325}), 38: (1, {'@': 325}), 40: (1, {'@': 325}), 24: (1, {'@': 325}), 155: (1, {'@': 325}), 73: (1, {'@': 325}), 75: (1, {'@': 325}), 77: (1, {'@': 325}), 146: (1, {'@': 325}), 164: (1, {'@': 325}), 156: (1, {'@': 325}), 5: (1, {'@': 325}), 157: (1, {'@': 325}), 134: (1, {'@': 325}), 70: (1, {'@': 325}), 71: (1, {'@': 325}), 43: (1, {'@': 325}), 145: (1, {'@': 325}), 31: (1, {'@': 325}), 106: (1, {'@': 325}), 126: (1, {'@': 325}), 122: (1, {'@': 325}), 113: (1, {'@': 325}), 1: (1, {'@': 325}), 158: (1, {'@': 325})}, 203: {0: (1, {'@': 601}), 2: (1, {'@': 601}), 93: (1, {'@': 601}), 1: (1, {'@': 601})}, 204: {85: (1, {'@': 593}), 8: (1, {'@': 593}), 9: (1, {'@': 593}), 11: (1, {'@': 593}), 12: (1, {'@': 593}), 86: (1, {'@': 593}), 87: (1, {'@': 593}), 15: (1, {'@': 593}), 0: (1, {'@': 593}), 88: (1, {'@': 593}), 4: (1, {'@': 593}), 58: (1, {'@': 593}), 89: (1, {'@': 593}), 90: (1, {'@': 593}), 20: (1, {'@': 593}), 6: (1, {'@': 593}), 91: (1, {'@': 593}), 92: (1, {'@': 593}), 21: (1, {'@': 593}), 2: (1, {'@': 593}), 25: (1, {'@': 593}), 26: (1, {'@': 593}), 27: (1, {'@': 593}), 70: (1, {'@': 593}), 3: (1, {'@': 593}), 7: (1, {'@': 593}), 10: (1, {'@': 593}), 13: (1, {'@': 593}), 14: (1, {'@': 593}), 93: (1, {'@': 593}), 16: (1, {'@': 593}), 17: (1, {'@': 593}), 18: (1, {'@': 593}), 19: (1, {'@': 593}), 1: (1, {'@': 593}), 94: (1, {'@': 593}), 34: (1, {'@': 593}), 22: (1, {'@': 593}), 23: (1, {'@': 593}), 24: (1, {'@': 593}), 95: (1, {'@': 593}), 28: (1, {'@': 593}), 96: (1, {'@': 593}), 97: (1, {'@': 593}), 98: (1, {'@': 593}), 5: (1, {'@': 593})}, 205: {0: (1, {'@': 198}), 1: (1, {'@': 198})}, 206: {207: (0, 336), 5: (0, 104), 208: (0, 114), 4: (0, 119), 2: (0, 339), 209: (0, 345), 194: (0, 134), 9: (1, {'@': 479})}, 207: {19: (0, 457), 0: (1, {'@': 216}), 1: (1, {'@': 216})}, 208: {202: (0, 148), 2: (0, 153), 3: (1, {'@': 142})}, 209: {93: (0, 519)}, 210: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 76: (0, 757), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 64: (0, 90), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 15: (0, 95), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 77: (0, 596)}, 211: {3: (1, {'@': 135})}, 212: {2: (0, 197), 210: (0, 700), 0: (1, {'@': 316}), 1: (1, {'@': 316})}, 213: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 64: (0, 534), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 214: {9: (0, 350)}, 215: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 129: (0, 613), 41: (0, 689), 42: (0, 696), 43: (0, 300), 107: (0, 703), 108: (0, 722), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 81: (0, 525), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 101: (0, 460), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596), 139: (0, 193), 64: (0, 599)}, 216: {19: (0, 146), 2: (1, {'@': 156}), 3: (1, {'@': 156})}, 217: {33: (1, {'@': 407}), 68: (1, {'@': 407}), 53: (1, {'@': 407}), 37: (1, {'@': 407}), 55: (1, {'@': 407}), 60: (1, {'@': 407}), 66: (1, {'@': 407}), 56: (1, {'@': 407}), 32: (1, {'@': 407}), 44: (1, {'@': 407}), 76: (1, {'@': 407}), 72: (1, {'@': 407}), 47: (1, {'@': 407}), 34: (1, {'@': 407}), 38: (1, {'@': 407}), 40: (1, {'@': 407}), 73: (1, {'@': 407}), 75: (1, {'@': 407}), 77: (1, {'@': 407}), 70: (1, {'@': 407}), 71: (1, {'@': 407}), 43: (1, {'@': 407}), 31: (1, {'@': 407}), 65: (1, {'@': 407})}, 218: {7: (0, 101), 163: (0, 242), 211: (0, 468), 33: (1, {'@': 345}), 151: (1, {'@': 345}), 68: (1, {'@': 345}), 53: (1, {'@': 345}), 138: (1, {'@': 345}), 102: (1, {'@': 345}), 142: (1, {'@': 345}), 14: (1, {'@': 345}), 37: (1, {'@': 345}), 55: (1, {'@': 345}), 124: (1, {'@': 345}), 136: (1, {'@': 345}), 60: (1, {'@': 345}), 66: (1, {'@': 345}), 121: (1, {'@': 345}), 152: (1, {'@': 345}), 56: (1, {'@': 345}), 32: (1, {'@': 345}), 153: (1, {'@': 345}), 44: (1, {'@': 345}), 4: (1, {'@': 345}), 76: (1, {'@': 345}), 72: (1, {'@': 345}), 100: (1, {'@': 345}), 65: (1, {'@': 345}), 58: (1, {'@': 345}), 81: (1, {'@': 345}), 47: (1, {'@': 345}), 107: (1, {'@': 345}), 117: (1, {'@': 345}), 154: (1, {'@': 345}), 116: (1, {'@': 345}), 67: (1, {'@': 345}), 125: (1, {'@': 345}), 34: (1, {'@': 345}), 38: (1, {'@': 345}), 40: (1, {'@': 345}), 24: (1, {'@': 345}), 155: (1, {'@': 345}), 73: (1, {'@': 345}), 75: (1, {'@': 345}), 77: (1, {'@': 345}), 146: (1, {'@': 345}), 164: (1, {'@': 345}), 156: (1, {'@': 345}), 5: (1, {'@': 345}), 157: (1, {'@': 345}), 134: (1, {'@': 345}), 70: (1, {'@': 345}), 71: (1, {'@': 345}), 43: (1, {'@': 345}), 145: (1, {'@': 345}), 31: (1, {'@': 345}), 106: (1, {'@': 345}), 126: (1, {'@': 345}), 122: (1, {'@': 345}), 113: (1, {'@': 345}), 1: (1, {'@': 345}), 158: (1, {'@': 345})}, 219: {0: (1, {'@': 314}), 1: (1, {'@': 314})}, 220: {31: (0, 542)}, 221: {9: (0, 357)}, 222: {0: (1, {'@': 218}), 1: (1, {'@': 218})}, 223: {204: (0, 162), 40: (0, 107)}, 224: {100: (0, 353), 101: (0, 358), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 24: (0, 715), 108: (0, 722), 109: (0, 729), 45: (0, 736), 48: (0, 467), 49: (0, 483), 111: (0, 500), 112: (0, 507), 29: (0, 514), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 118: (0, 195), 119: (0, 205), 120: (0, 228), 47: (0, 244), 58: (0, 236), 121: (0, 260), 122: (0, 284), 54: (0, 293), 43: (0, 300), 62: (0, 308), 123: (0, 316), 44: (0, 321), 65: (0, 334), 50: (0, 337), 66: (0, 354), 57: (0, 359), 69: (0, 371), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 40: (0, 616), 129: (0, 613), 110: (0, 346), 130: (0, 619), 131: (0, 622), 132: (0, 625), 46: (0, 631), 133: (0, 634), 134: (0, 637), 135: (0, 489), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 145: (0, 646), 146: (0, 661), 147: (0, 668), 63: (0, 675), 1: (0, 497), 148: (0, 682), 67: (0, 690), 68: (0, 697), 70: (0, 710), 71: (0, 716), 149: (0, 723), 73: (0, 737), 150: (0, 744), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 225: {33: (1, {'@': 404}), 68: (1, {'@': 404}), 53: (1, {'@': 404}), 37: (1, {'@': 404}), 55: (1, {'@': 404}), 60: (1, {'@': 404}), 66: (1, {'@': 404}), 56: (1, {'@': 404}), 32: (1, {'@': 404}), 44: (1, {'@': 404}), 76: (1, {'@': 404}), 72: (1, {'@': 404}), 47: (1, {'@': 404}), 34: (1, {'@': 404}), 38: (1, {'@': 404}), 40: (1, {'@': 404}), 73: (1, {'@': 404}), 75: (1, {'@': 404}), 77: (1, {'@': 404}), 70: (1, {'@': 404}), 71: (1, {'@': 404}), 43: (1, {'@': 404}), 31: (1, {'@': 404}), 65: (1, {'@': 404})}, 226: {162: (0, 210), 212: (0, 476), 33: (1, {'@': 348}), 102: (1, {'@': 348}), 124: (1, {'@': 348}), 136: (1, {'@': 348}), 121: (1, {'@': 348}), 32: (1, {'@': 348}), 4: (1, {'@': 348}), 76: (1, {'@': 348}), 100: (1, {'@': 348}), 58: (1, {'@': 348}), 117: (1, {'@': 348}), 116: (1, {'@': 348}), 125: (1, {'@': 348}), 38: (1, {'@': 348}), 40: (1, {'@': 348}), 73: (1, {'@': 348}), 77: (1, {'@': 348}), 146: (1, {'@': 348}), 164: (1, {'@': 348}), 156: (1, {'@': 348}), 134: (1, {'@': 348}), 5: (1, {'@': 348}), 70: (1, {'@': 348}), 71: (1, {'@': 348}), 106: (1, {'@': 348}), 126: (1, {'@': 348}), 65: (1, {'@': 348}), 7: (1, {'@': 348}), 151: (1, {'@': 348}), 68: (1, {'@': 348}), 53: (1, {'@': 348}), 138: (1, {'@': 348}), 142: (1, {'@': 348}), 14: (1, {'@': 348}), 37: (1, {'@': 348}), 55: (1, {'@': 348}), 60: (1, {'@': 348}), 66: (1, {'@': 348}), 152: (1, {'@': 348}), 56: (1, {'@': 348}), 153: (1, {'@': 348}), 44: (1, {'@': 348}), 1: (1, {'@': 348}), 72: (1, {'@': 348}), 81: (1, {'@': 348}), 47: (1, {'@': 348}), 107: (1, {'@': 348}), 154: (1, {'@': 348}), 163: (1, {'@': 348}), 67: (1, {'@': 348}), 34: (1, {'@': 348}), 24: (1, {'@': 348}), 155: (1, {'@': 348}), 75: (1, {'@': 348}), 157: (1, {'@': 348}), 158: (1, {'@': 348}), 43: (1, {'@': 348}), 145: (1, {'@': 348}), 31: (1, {'@': 348}), 122: (1, {'@': 348}), 113: (1, {'@': 348})}, 227: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 213: (0, 707), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 64: (0, 122), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 228: {0: (1, {'@': 213}), 1: (1, {'@': 213})}, 229: {209: (0, 362), 5: (0, 104), 208: (0, 114), 4: (0, 119), 194: (0, 134), 15: (0, 368), 2: (1, {'@': 446}), 9: (1, {'@': 446})}, 230: {0: (1, {'@': 219}), 1: (1, {'@': 219})}, 231: {202: (0, 167), 31: (0, 270), 78: (0, 172), 2: (0, 177), 3: (1, {'@': 152})}, 232: {100: (0, 353), 101: (0, 358), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 24: (0, 715), 108: (0, 722), 109: (0, 729), 45: (0, 736), 48: (0, 467), 49: (0, 483), 111: (0, 500), 112: (0, 507), 29: (0, 514), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 118: (0, 195), 119: (0, 205), 120: (0, 228), 47: (0, 244), 58: (0, 236), 121: (0, 260), 122: (0, 284), 54: (0, 293), 43: (0, 300), 62: (0, 308), 123: (0, 316), 44: (0, 321), 65: (0, 334), 50: (0, 337), 66: (0, 354), 57: (0, 359), 69: (0, 371), 110: (0, 352), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 40: (0, 616), 129: (0, 613), 130: (0, 619), 131: (0, 622), 132: (0, 625), 46: (0, 631), 133: (0, 634), 134: (0, 637), 135: (0, 489), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 145: (0, 646), 146: (0, 661), 147: (0, 668), 63: (0, 675), 1: (0, 497), 148: (0, 682), 67: (0, 690), 68: (0, 697), 70: (0, 710), 71: (0, 716), 149: (0, 723), 73: (0, 737), 150: (0, 744), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 233: {58: (0, 527), 33: (1, {'@': 409}), 68: (1, {'@': 409}), 53: (1, {'@': 409}), 37: (1, {'@': 409}), 55: (1, {'@': 409}), 60: (1, {'@': 409}), 66: (1, {'@': 409}), 56: (1, {'@': 409}), 32: (1, {'@': 409}), 44: (1, {'@': 409}), 76: (1, {'@': 409}), 72: (1, {'@': 409}), 47: (1, {'@': 409}), 34: (1, {'@': 409}), 38: (1, {'@': 409}), 40: (1, {'@': 409}), 73: (1, {'@': 409}), 75: (1, {'@': 409}), 77: (1, {'@': 409}), 70: (1, {'@': 409}), 71: (1, {'@': 409}), 43: (1, {'@': 409}), 31: (1, {'@': 409}), 65: (1, {'@': 409})}, 234: {33: (1, {'@': 346}), 151: (1, {'@': 346}), 68: (1, {'@': 346}), 53: (1, {'@': 346}), 138: (1, {'@': 346}), 102: (1, {'@': 346}), 142: (1, {'@': 346}), 14: (1, {'@': 346}), 37: (1, {'@': 346}), 55: (1, {'@': 346}), 124: (1, {'@': 346}), 136: (1, {'@': 346}), 60: (1, {'@': 346}), 66: (1, {'@': 346}), 121: (1, {'@': 346}), 152: (1, {'@': 346}), 56: (1, {'@': 346}), 32: (1, {'@': 346}), 153: (1, {'@': 346}), 44: (1, {'@': 346}), 4: (1, {'@': 346}), 76: (1, {'@': 346}), 72: (1, {'@': 346}), 100: (1, {'@': 346}), 65: (1, {'@': 346}), 58: (1, {'@': 346}), 81: (1, {'@': 346}), 47: (1, {'@': 346}), 107: (1, {'@': 346}), 117: (1, {'@': 346}), 154: (1, {'@': 346}), 116: (1, {'@': 346}), 67: (1, {'@': 346}), 125: (1, {'@': 346}), 34: (1, {'@': 346}), 38: (1, {'@': 346}), 40: (1, {'@': 346}), 24: (1, {'@': 346}), 155: (1, {'@': 346}), 73: (1, {'@': 346}), 75: (1, {'@': 346}), 77: (1, {'@': 346}), 146: (1, {'@': 346}), 164: (1, {'@': 346}), 156: (1, {'@': 346}), 5: (1, {'@': 346}), 157: (1, {'@': 346}), 134: (1, {'@': 346}), 70: (1, {'@': 346}), 71: (1, {'@': 346}), 43: (1, {'@': 346}), 145: (1, {'@': 346}), 31: (1, {'@': 346}), 106: (1, {'@': 346}), 126: (1, {'@': 346}), 122: (1, {'@': 346}), 113: (1, {'@': 346}), 1: (1, {'@': 346}), 158: (1, {'@': 346})}, 235: {2: (1, {'@': 574}), 15: (1, {'@': 574})}, 236: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 63: (0, 675), 65: (0, 334), 66: (0, 354), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 62: (0, 550), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 237: {214: (0, 374), 2: (0, 380), 9: (1, {'@': 488})}, 238: {0: (1, {'@': 553}), 19: (1, {'@': 553}), 1: (1, {'@': 553})}, 239: {3: (0, 182)}, 240: {33: (1, {'@': 342}), 151: (1, {'@': 342}), 68: (1, {'@': 342}), 53: (1, {'@': 342}), 138: (1, {'@': 342}), 102: (1, {'@': 342}), 142: (1, {'@': 342}), 14: (1, {'@': 342}), 37: (1, {'@': 342}), 55: (1, {'@': 342}), 124: (1, {'@': 342}), 136: (1, {'@': 342}), 60: (1, {'@': 342}), 66: (1, {'@': 342}), 121: (1, {'@': 342}), 152: (1, {'@': 342}), 56: (1, {'@': 342}), 32: (1, {'@': 342}), 153: (1, {'@': 342}), 44: (1, {'@': 342}), 4: (1, {'@': 342}), 76: (1, {'@': 342}), 72: (1, {'@': 342}), 100: (1, {'@': 342}), 65: (1, {'@': 342}), 58: (1, {'@': 342}), 81: (1, {'@': 342}), 47: (1, {'@': 342}), 107: (1, {'@': 342}), 117: (1, {'@': 342}), 154: (1, {'@': 342}), 116: (1, {'@': 342}), 67: (1, {'@': 342}), 125: (1, {'@': 342}), 34: (1, {'@': 342}), 38: (1, {'@': 342}), 40: (1, {'@': 342}), 24: (1, {'@': 342}), 155: (1, {'@': 342}), 73: (1, {'@': 342}), 75: (1, {'@': 342}), 77: (1, {'@': 342}), 146: (1, {'@': 342}), 164: (1, {'@': 342}), 156: (1, {'@': 342}), 5: (1, {'@': 342}), 157: (1, {'@': 342}), 134: (1, {'@': 342}), 70: (1, {'@': 342}), 71: (1, {'@': 342}), 43: (1, {'@': 342}), 145: (1, {'@': 342}), 31: (1, {'@': 342}), 106: (1, {'@': 342}), 126: (1, {'@': 342}), 122: (1, {'@': 342}), 113: (1, {'@': 342}), 1: (1, {'@': 342}), 158: (1, {'@': 342})}, 241: {33: (1, {'@': 402}), 68: (1, {'@': 402}), 53: (1, {'@': 402}), 37: (1, {'@': 402}), 55: (1, {'@': 402}), 60: (1, {'@': 402}), 66: (1, {'@': 402}), 56: (1, {'@': 402}), 32: (1, {'@': 402}), 44: (1, {'@': 402}), 76: (1, {'@': 402}), 72: (1, {'@': 402}), 47: (1, {'@': 402}), 34: (1, {'@': 402}), 38: (1, {'@': 402}), 40: (1, {'@': 402}), 73: (1, {'@': 402}), 75: (1, {'@': 402}), 77: (1, {'@': 402}), 70: (1, {'@': 402}), 71: (1, {'@': 402}), 43: (1, {'@': 402}), 31: (1, {'@': 402}), 65: (1, {'@': 402})}, 242: {15: (0, 484)}, 243: {2: (1, {'@': 355}), 15: (1, {'@': 355})}, 244: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 108: (0, 558), 37: (0, 674), 76: (0, 757), 38: (0, 601), 39: (0, 608), 40: (0, 616), 129: (0, 613), 41: (0, 689), 42: (0, 696), 43: (0, 300), 179: (0, 566), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 81: (0, 525), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 215: (0, 574), 65: (0, 334), 66: (0, 354), 182: (0, 582), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 6: (0, 590), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 64: (0, 2), 77: (0, 596)}, 245: {9: (0, 386)}, 246: {0: (1, {'@': 552}), 19: (1, {'@': 552}), 1: (1, {'@': 552})}, 247: {3: (1, {'@': 143})}, 248: {174: (0, 44), 43: (0, 51), 47: (0, 57), 0: (1, {'@': 300}), 1: (1, {'@': 300})}, 249: {0: (1, {'@': 237}), 1: (1, {'@': 237})}, 250: {100: (0, 353), 101: (0, 358), 216: (0, 364), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 34: (0, 645), 35: (0, 652), 4: (0, 660), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 217: (0, 709), 24: (0, 715), 108: (0, 722), 109: (0, 729), 45: (0, 736), 151: (0, 743), 218: (0, 202), 48: (0, 467), 219: (0, 475), 49: (0, 483), 220: (0, 491), 111: (0, 500), 112: (0, 507), 29: (0, 514), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 221: (0, 188), 118: (0, 195), 222: (0, 498), 119: (0, 205), 155: (0, 213), 154: (0, 220), 120: (0, 228), 58: (0, 236), 47: (0, 244), 152: (0, 252), 121: (0, 260), 157: (0, 276), 122: (0, 284), 54: (0, 293), 43: (0, 300), 62: (0, 308), 123: (0, 316), 44: (0, 321), 223: (0, 328), 65: (0, 334), 50: (0, 337), 14: (0, 342), 5: (0, 347), 66: (0, 354), 57: (0, 359), 153: (0, 365), 69: (0, 371), 224: (0, 379), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 206: (0, 611), 129: (0, 613), 40: (0, 616), 130: (0, 619), 131: (0, 622), 132: (0, 625), 135: (0, 628), 46: (0, 631), 133: (0, 634), 134: (0, 637), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 225: (0, 541), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 226: (0, 589), 145: (0, 646), 156: (0, 653), 146: (0, 661), 147: (0, 668), 63: (0, 675), 148: (0, 682), 227: (0, 506), 67: (0, 690), 68: (0, 697), 228: (0, 704), 70: (0, 710), 71: (0, 716), 149: (0, 723), 229: (0, 730), 73: (0, 737), 150: (0, 744), 230: (0, 751), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 251: {2: (1, {'@': 562}), 0: (1, {'@': 562}), 1: (1, {'@': 562})}, 252: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 47: (0, 244), 48: (0, 467), 49: (0, 483), 129: (0, 520), 50: (0, 337), 196: (0, 8), 53: (0, 485), 74: (0, 528), 54: (0, 293), 55: (0, 586), 56: (0, 517), 81: (0, 525), 57: (0, 359), 59: (0, 557), 60: (0, 573), 61: (0, 581), 63: (0, 675), 65: (0, 334), 66: (0, 354), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 253: {85: (1, {'@': 428}), 11: (1, {'@': 428}), 176: (1, {'@': 428}), 86: (1, {'@': 428}), 14: (1, {'@': 428}), 87: (1, {'@': 428}), 174: (1, {'@': 428}), 93: (1, {'@': 428}), 177: (1, {'@': 428}), 153: (1, {'@': 428}), 80: (1, {'@': 428}), 19: (1, {'@': 428}), 88: (1, {'@': 428}), 58: (1, {'@': 428}), 89: (1, {'@': 428}), 94: (1, {'@': 428}), 81: (1, {'@': 428}), 47: (1, {'@': 428}), 90: (1, {'@': 428}), 34: (1, {'@': 428}), 91: (1, {'@': 428}), 92: (1, {'@': 428}), 82: (1, {'@': 428}), 2: (1, {'@': 428}), 95: (1, {'@': 428}), 27: (1, {'@': 428}), 70: (1, {'@': 428}), 96: (1, {'@': 428}), 97: (1, {'@': 428}), 43: (1, {'@': 428}), 98: (1, {'@': 428}), 3: (1, {'@': 428}), 15: (1, {'@': 428}), 0: (1, {'@': 428}), 1: (1, {'@': 428}), 8: (1, {'@': 428}), 10: (1, {'@': 428}), 12: (1, {'@': 428}), 13: (1, {'@': 428}), 16: (1, {'@': 428}), 18: (1, {'@': 428}), 20: (1, {'@': 428}), 21: (1, {'@': 428}), 22: (1, {'@': 428}), 23: (1, {'@': 428}), 25: (1, {'@': 428}), 26: (1, {'@': 428}), 28: (1, {'@': 428}), 9: (1, {'@': 428}), 4: (1, {'@': 428}), 5: (1, {'@': 428}), 6: (1, {'@': 428}), 7: (1, {'@': 428}), 17: (1, {'@': 428}), 24: (1, {'@': 428})}, 254: {0: (1, {'@': 312}), 1: (1, {'@': 312})}, 255: {31: (0, 270), 78: (0, 187)}, 256: {0: (1, {'@': 292}), 1: (1, {'@': 292})}, 257: {174: (0, 44), 43: (0, 51), 47: (0, 57), 85: (1, {'@': 413}), 58: (1, {'@': 413}), 89: (1, {'@': 413}), 94: (1, {'@': 413}), 11: (1, {'@': 413}), 81: (1, {'@': 413}), 90: (1, {'@': 413}), 176: (1, {'@': 413}), 86: (1, {'@': 413}), 14: (1, {'@': 413}), 34: (1, {'@': 413}), 91: (1, {'@': 413}), 92: (1, {'@': 413}), 87: (1, {'@': 413}), 19: (1, {'@': 413}), 82: (1, {'@': 413}), 2: (1, {'@': 413}), 93: (1, {'@': 413}), 95: (1, {'@': 413}), 27: (1, {'@': 413}), 177: (1, {'@': 413}), 153: (1, {'@': 413}), 70: (1, {'@': 413}), 96: (1, {'@': 413}), 80: (1, {'@': 413}), 97: (1, {'@': 413}), 98: (1, {'@': 413}), 3: (1, {'@': 413}), 88: (1, {'@': 413}), 15: (1, {'@': 413}), 0: (1, {'@': 413}), 1: (1, {'@': 413}), 8: (1, {'@': 413}), 10: (1, {'@': 413}), 12: (1, {'@': 413}), 13: (1, {'@': 413}), 16: (1, {'@': 413}), 18: (1, {'@': 413}), 20: (1, {'@': 413}), 21: (1, {'@': 413}), 22: (1, {'@': 413}), 23: (1, {'@': 413}), 25: (1, {'@': 413}), 26: (1, {'@': 413}), 28: (1, {'@': 413}), 9: (1, {'@': 413}), 5: (1, {'@': 413}), 4: (1, {'@': 413}), 6: (1, {'@': 413}), 7: (1, {'@': 413}), 17: (1, {'@': 413}), 24: (1, {'@': 413})}, 258: {85: (1, {'@': 585}), 8: (1, {'@': 585}), 9: (1, {'@': 585}), 11: (1, {'@': 585}), 12: (1, {'@': 585}), 86: (1, {'@': 585}), 87: (1, {'@': 585}), 15: (1, {'@': 585}), 0: (1, {'@': 585}), 88: (1, {'@': 585}), 4: (1, {'@': 585}), 58: (1, {'@': 585}), 90: (1, {'@': 585}), 20: (1, {'@': 585}), 6: (1, {'@': 585}), 92: (1, {'@': 585}), 21: (1, {'@': 585}), 2: (1, {'@': 585}), 25: (1, {'@': 585}), 26: (1, {'@': 585}), 27: (1, {'@': 585}), 5: (1, {'@': 585}), 3: (1, {'@': 585}), 7: (1, {'@': 585}), 10: (1, {'@': 585}), 13: (1, {'@': 585}), 14: (1, {'@': 585}), 93: (1, {'@': 585}), 16: (1, {'@': 585}), 17: (1, {'@': 585}), 18: (1, {'@': 585}), 19: (1, {'@': 585}), 22: (1, {'@': 585}), 23: (1, {'@': 585}), 24: (1, {'@': 585}), 95: (1, {'@': 585}), 28: (1, {'@': 585}), 96: (1, {'@': 585}), 98: (1, {'@': 585}), 1: (1, {'@': 585})}, 259: {33: (1, {'@': 352}), 151: (1, {'@': 352}), 68: (1, {'@': 352}), 53: (1, {'@': 352}), 138: (1, {'@': 352}), 102: (1, {'@': 352}), 142: (1, {'@': 352}), 14: (1, {'@': 352}), 37: (1, {'@': 352}), 55: (1, {'@': 352}), 124: (1, {'@': 352}), 136: (1, {'@': 352}), 60: (1, {'@': 352}), 66: (1, {'@': 352}), 121: (1, {'@': 352}), 152: (1, {'@': 352}), 56: (1, {'@': 352}), 32: (1, {'@': 352}), 153: (1, {'@': 352}), 44: (1, {'@': 352}), 4: (1, {'@': 352}), 76: (1, {'@': 352}), 72: (1, {'@': 352}), 100: (1, {'@': 352}), 65: (1, {'@': 352}), 58: (1, {'@': 352}), 81: (1, {'@': 352}), 47: (1, {'@': 352}), 107: (1, {'@': 352}), 117: (1, {'@': 352}), 154: (1, {'@': 352}), 116: (1, {'@': 352}), 67: (1, {'@': 352}), 125: (1, {'@': 352}), 34: (1, {'@': 352}), 38: (1, {'@': 352}), 40: (1, {'@': 352}), 24: (1, {'@': 352}), 155: (1, {'@': 352}), 73: (1, {'@': 352}), 75: (1, {'@': 352}), 77: (1, {'@': 352}), 146: (1, {'@': 352}), 164: (1, {'@': 352}), 156: (1, {'@': 352}), 5: (1, {'@': 352}), 157: (1, {'@': 352}), 134: (1, {'@': 352}), 70: (1, {'@': 352}), 71: (1, {'@': 352}), 43: (1, {'@': 352}), 145: (1, {'@': 352}), 31: (1, {'@': 352}), 106: (1, {'@': 352}), 126: (1, {'@': 352}), 122: (1, {'@': 352}), 113: (1, {'@': 352}), 1: (1, {'@': 352}), 158: (1, {'@': 352})}, 260: {181: (0, 14), 31: (0, 505)}, 261: {9: (0, 392)}, 262: {79: (0, 208), 78: (0, 216), 3: (0, 223), 81: (0, 231), 231: (0, 239), 84: (0, 247), 80: (0, 255), 83: (0, 263), 31: (0, 270)}, 263: {3: (1, {'@': 144})}, 264: {2: (0, 322), 3: (1, {'@': 294})}, 265: {2: (0, 197), 210: (0, 535), 0: (1, {'@': 278}), 1: (1, {'@': 278})}, 266: {85: (1, {'@': 587}), 8: (1, {'@': 587}), 9: (1, {'@': 587}), 11: (1, {'@': 587}), 12: (1, {'@': 587}), 86: (1, {'@': 587}), 87: (1, {'@': 587}), 15: (1, {'@': 587}), 0: (1, {'@': 587}), 88: (1, {'@': 587}), 4: (1, {'@': 587}), 58: (1, {'@': 587}), 89: (1, {'@': 587}), 90: (1, {'@': 587}), 20: (1, {'@': 587}), 6: (1, {'@': 587}), 92: (1, {'@': 587}), 21: (1, {'@': 587}), 2: (1, {'@': 587}), 25: (1, {'@': 587}), 26: (1, {'@': 587}), 27: (1, {'@': 587}), 3: (1, {'@': 587}), 7: (1, {'@': 587}), 10: (1, {'@': 587}), 13: (1, {'@': 587}), 14: (1, {'@': 587}), 93: (1, {'@': 587}), 16: (1, {'@': 587}), 17: (1, {'@': 587}), 18: (1, {'@': 587}), 19: (1, {'@': 587}), 1: (1, {'@': 587}), 22: (1, {'@': 587}), 23: (1, {'@': 587}), 24: (1, {'@': 587}), 95: (1, {'@': 587}), 28: (1, {'@': 587}), 96: (1, {'@': 587}), 98: (1, {'@': 587}), 5: (1, {'@': 587})}, 267: {187: (0, 142), 232: (0, 714), 31: (0, 694)}, 268: {100: (0, 353), 101: (0, 358), 216: (0, 364), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 34: (0, 645), 35: (0, 652), 4: (0, 660), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 217: (0, 709), 24: (0, 715), 108: (0, 722), 109: (0, 729), 45: (0, 736), 151: (0, 743), 218: (0, 202), 48: (0, 467), 219: (0, 475), 49: (0, 483), 220: (0, 491), 111: (0, 500), 112: (0, 507), 29: (0, 514), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 221: (0, 188), 118: (0, 195), 119: (0, 205), 155: (0, 213), 154: (0, 220), 120: (0, 228), 58: (0, 236), 47: (0, 244), 152: (0, 252), 121: (0, 260), 157: (0, 276), 122: (0, 284), 54: (0, 293), 43: (0, 300), 62: (0, 308), 123: (0, 316), 44: (0, 321), 223: (0, 328), 65: (0, 334), 50: (0, 337), 14: (0, 342), 5: (0, 347), 66: (0, 354), 57: (0, 359), 153: (0, 365), 69: (0, 371), 224: (0, 379), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 206: (0, 611), 129: (0, 613), 40: (0, 616), 130: (0, 619), 131: (0, 622), 132: (0, 625), 135: (0, 628), 46: (0, 631), 133: (0, 634), 134: (0, 637), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 225: (0, 541), 143: (0, 549), 227: (0, 25), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 226: (0, 589), 145: (0, 646), 156: (0, 653), 146: (0, 661), 147: (0, 668), 63: (0, 675), 148: (0, 682), 67: (0, 690), 68: (0, 697), 228: (0, 704), 70: (0, 710), 71: (0, 716), 149: (0, 723), 229: (0, 730), 73: (0, 737), 1: (0, 31), 150: (0, 744), 230: (0, 751), 76: (0, 757), 77: (0, 596), 64: (0, 599), 158: (1, {'@': 113})}, 269: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 129: (0, 203), 44: (0, 321), 45: (0, 736), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 81: (0, 525), 57: (0, 359), 59: (0, 557), 60: (0, 573), 61: (0, 581), 63: (0, 675), 65: (0, 334), 66: (0, 354), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 74: (0, 282), 72: (0, 390), 73: (0, 737), 75: (0, 399), 76: (0, 757), 77: (0, 596), 93: (1, {'@': 470}), 0: (1, {'@': 470}), 1: (1, {'@': 470})}, 270: {15: (0, 4), 2: (1, {'@': 158}), 3: (1, {'@': 158}), 19: (1, {'@': 158})}, 271: {180: (0, 361), 181: (0, 410), 31: (0, 505)}, 272: {0: (1, {'@': 246}), 1: (1, {'@': 246})}, 273: {85: (1, {'@': 589}), 8: (1, {'@': 589}), 9: (1, {'@': 589}), 11: (1, {'@': 589}), 12: (1, {'@': 589}), 86: (1, {'@': 589}), 87: (1, {'@': 589}), 15: (1, {'@': 589}), 0: (1, {'@': 589}), 88: (1, {'@': 589}), 4: (1, {'@': 589}), 58: (1, {'@': 589}), 89: (1, {'@': 589}), 90: (1, {'@': 589}), 20: (1, {'@': 589}), 6: (1, {'@': 589}), 91: (1, {'@': 589}), 92: (1, {'@': 589}), 21: (1, {'@': 589}), 2: (1, {'@': 589}), 25: (1, {'@': 589}), 26: (1, {'@': 589}), 27: (1, {'@': 589}), 3: (1, {'@': 589}), 7: (1, {'@': 589}), 10: (1, {'@': 589}), 13: (1, {'@': 589}), 14: (1, {'@': 589}), 93: (1, {'@': 589}), 16: (1, {'@': 589}), 17: (1, {'@': 589}), 18: (1, {'@': 589}), 19: (1, {'@': 589}), 1: (1, {'@': 589}), 22: (1, {'@': 589}), 23: (1, {'@': 589}), 24: (1, {'@': 589}), 95: (1, {'@': 589}), 28: (1, {'@': 589}), 96: (1, {'@': 589}), 98: (1, {'@': 589}), 5: (1, {'@': 589})}, 274: {33: (1, {'@': 121}), 151: (1, {'@': 121}), 68: (1, {'@': 121}), 53: (1, {'@': 121}), 138: (1, {'@': 121}), 102: (1, {'@': 121}), 142: (1, {'@': 121}), 14: (1, {'@': 121}), 37: (1, {'@': 121}), 55: (1, {'@': 121}), 124: (1, {'@': 121}), 136: (1, {'@': 121}), 60: (1, {'@': 121}), 66: (1, {'@': 121}), 121: (1, {'@': 121}), 152: (1, {'@': 121}), 56: (1, {'@': 121}), 32: (1, {'@': 121}), 153: (1, {'@': 121}), 44: (1, {'@': 121}), 4: (1, {'@': 121}), 76: (1, {'@': 121}), 72: (1, {'@': 121}), 100: (1, {'@': 121}), 65: (1, {'@': 121}), 58: (1, {'@': 121}), 81: (1, {'@': 121}), 47: (1, {'@': 121}), 107: (1, {'@': 121}), 117: (1, {'@': 121}), 154: (1, {'@': 121}), 116: (1, {'@': 121}), 67: (1, {'@': 121}), 125: (1, {'@': 121}), 34: (1, {'@': 121}), 38: (1, {'@': 121}), 40: (1, {'@': 121}), 24: (1, {'@': 121}), 155: (1, {'@': 121}), 73: (1, {'@': 121}), 75: (1, {'@': 121}), 77: (1, {'@': 121}), 146: (1, {'@': 121}), 164: (1, {'@': 121}), 156: (1, {'@': 121}), 5: (1, {'@': 121}), 157: (1, {'@': 121}), 134: (1, {'@': 121}), 70: (1, {'@': 121}), 71: (1, {'@': 121}), 43: (1, {'@': 121}), 145: (1, {'@': 121}), 31: (1, {'@': 121}), 106: (1, {'@': 121}), 126: (1, {'@': 121}), 122: (1, {'@': 121}), 113: (1, {'@': 121}), 1: (1, {'@': 121}), 158: (1, {'@': 121})}, 275: {2: (1, {'@': 267}), 0: (1, {'@': 267}), 1: (1, {'@': 267})}, 276: {31: (0, 20)}, 277: {2: (0, 290), 93: (1, {'@': 469}), 0: (1, {'@': 469}), 1: (1, {'@': 469})}, 278: {30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 563), 61: (0, 581), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 39: (0, 608), 44: (0, 321), 40: (0, 616), 65: (0, 334), 47: (0, 244), 66: (0, 354), 68: (0, 697), 69: (0, 371), 53: (0, 485), 165: (0, 367), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 279: {8: (1, {'@': 372}), 10: (1, {'@': 372}), 12: (1, {'@': 372}), 20: (1, {'@': 372}), 13: (1, {'@': 372}), 21: (1, {'@': 372}), 22: (1, {'@': 372}), 23: (1, {'@': 372}), 2: (1, {'@': 372}), 25: (1, {'@': 372}), 26: (1, {'@': 372}), 28: (1, {'@': 372}), 15: (1, {'@': 372}), 16: (1, {'@': 372}), 0: (1, {'@': 372}), 18: (1, {'@': 372}), 19: (1, {'@': 372}), 1: (1, {'@': 372}), 9: (1, {'@': 372}), 4: (1, {'@': 372}), 5: (1, {'@': 372}), 93: (1, {'@': 372}), 6: (1, {'@': 372}), 3: (1, {'@': 372})}, 280: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 64: (0, 492), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 281: {33: (1, {'@': 119}), 151: (1, {'@': 119}), 68: (1, {'@': 119}), 53: (1, {'@': 119}), 138: (1, {'@': 119}), 102: (1, {'@': 119}), 142: (1, {'@': 119}), 14: (1, {'@': 119}), 37: (1, {'@': 119}), 55: (1, {'@': 119}), 124: (1, {'@': 119}), 136: (1, {'@': 119}), 60: (1, {'@': 119}), 66: (1, {'@': 119}), 121: (1, {'@': 119}), 152: (1, {'@': 119}), 56: (1, {'@': 119}), 32: (1, {'@': 119}), 153: (1, {'@': 119}), 44: (1, {'@': 119}), 4: (1, {'@': 119}), 76: (1, {'@': 119}), 72: (1, {'@': 119}), 100: (1, {'@': 119}), 65: (1, {'@': 119}), 58: (1, {'@': 119}), 81: (1, {'@': 119}), 47: (1, {'@': 119}), 107: (1, {'@': 119}), 117: (1, {'@': 119}), 154: (1, {'@': 119}), 116: (1, {'@': 119}), 67: (1, {'@': 119}), 125: (1, {'@': 119}), 34: (1, {'@': 119}), 38: (1, {'@': 119}), 40: (1, {'@': 119}), 24: (1, {'@': 119}), 155: (1, {'@': 119}), 73: (1, {'@': 119}), 75: (1, {'@': 119}), 77: (1, {'@': 119}), 146: (1, {'@': 119}), 164: (1, {'@': 119}), 156: (1, {'@': 119}), 5: (1, {'@': 119}), 157: (1, {'@': 119}), 134: (1, {'@': 119}), 70: (1, {'@': 119}), 71: (1, {'@': 119}), 43: (1, {'@': 119}), 145: (1, {'@': 119}), 31: (1, {'@': 119}), 106: (1, {'@': 119}), 126: (1, {'@': 119}), 122: (1, {'@': 119}), 113: (1, {'@': 119}), 1: (1, {'@': 119}), 158: (1, {'@': 119})}, 282: {0: (1, {'@': 600}), 2: (1, {'@': 600}), 93: (1, {'@': 600}), 1: (1, {'@': 600})}, 283: {81: (0, 155), 31: (0, 159), 80: (0, 174), 233: (0, 721), 190: (0, 728), 189: (0, 735), 15: (1, {'@': 165})}, 284: {31: (0, 505), 181: (0, 39)}, 285: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 129: (0, 203), 44: (0, 321), 45: (0, 736), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 81: (0, 525), 57: (0, 359), 59: (0, 557), 60: (0, 573), 61: (0, 581), 63: (0, 675), 65: (0, 334), 66: (0, 354), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 74: (0, 282), 72: (0, 390), 73: (0, 737), 75: (0, 399), 76: (0, 757), 77: (0, 596), 93: (1, {'@': 467}), 0: (1, {'@': 467}), 1: (1, {'@': 467})}, 286: {100: (0, 353), 101: (0, 358), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 24: (0, 715), 108: (0, 722), 109: (0, 729), 45: (0, 736), 48: (0, 467), 49: (0, 483), 111: (0, 500), 112: (0, 507), 29: (0, 514), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 118: (0, 195), 119: (0, 205), 120: (0, 228), 47: (0, 244), 58: (0, 236), 121: (0, 260), 122: (0, 284), 54: (0, 293), 43: (0, 300), 62: (0, 308), 123: (0, 316), 44: (0, 321), 65: (0, 334), 50: (0, 337), 66: (0, 354), 57: (0, 359), 69: (0, 371), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 40: (0, 616), 129: (0, 613), 130: (0, 619), 131: (0, 622), 132: (0, 625), 46: (0, 631), 133: (0, 634), 134: (0, 637), 135: (0, 489), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 110: (0, 378), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 145: (0, 646), 146: (0, 661), 147: (0, 668), 63: (0, 675), 1: (0, 497), 148: (0, 682), 67: (0, 690), 68: (0, 697), 70: (0, 710), 71: (0, 716), 149: (0, 723), 73: (0, 737), 150: (0, 744), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 287: {30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 563), 33: (0, 408), 35: (0, 652), 61: (0, 581), 43: (0, 300), 37: (0, 674), 76: (0, 757), 39: (0, 608), 44: (0, 321), 40: (0, 616), 65: (0, 334), 165: (0, 543), 47: (0, 244), 66: (0, 354), 68: (0, 697), 69: (0, 371), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 77: (0, 596)}, 288: {188: (0, 516), 31: (0, 694), 187: (0, 524), 68: (0, 532)}, 289: {33: (1, {'@': 120}), 151: (1, {'@': 120}), 68: (1, {'@': 120}), 53: (1, {'@': 120}), 138: (1, {'@': 120}), 102: (1, {'@': 120}), 142: (1, {'@': 120}), 14: (1, {'@': 120}), 37: (1, {'@': 120}), 55: (1, {'@': 120}), 124: (1, {'@': 120}), 136: (1, {'@': 120}), 60: (1, {'@': 120}), 66: (1, {'@': 120}), 121: (1, {'@': 120}), 152: (1, {'@': 120}), 56: (1, {'@': 120}), 32: (1, {'@': 120}), 153: (1, {'@': 120}), 44: (1, {'@': 120}), 4: (1, {'@': 120}), 76: (1, {'@': 120}), 72: (1, {'@': 120}), 100: (1, {'@': 120}), 65: (1, {'@': 120}), 58: (1, {'@': 120}), 81: (1, {'@': 120}), 47: (1, {'@': 120}), 107: (1, {'@': 120}), 117: (1, {'@': 120}), 154: (1, {'@': 120}), 116: (1, {'@': 120}), 67: (1, {'@': 120}), 125: (1, {'@': 120}), 34: (1, {'@': 120}), 38: (1, {'@': 120}), 40: (1, {'@': 120}), 24: (1, {'@': 120}), 155: (1, {'@': 120}), 73: (1, {'@': 120}), 75: (1, {'@': 120}), 77: (1, {'@': 120}), 146: (1, {'@': 120}), 164: (1, {'@': 120}), 156: (1, {'@': 120}), 5: (1, {'@': 120}), 157: (1, {'@': 120}), 134: (1, {'@': 120}), 70: (1, {'@': 120}), 71: (1, {'@': 120}), 43: (1, {'@': 120}), 145: (1, {'@': 120}), 31: (1, {'@': 120}), 106: (1, {'@': 120}), 126: (1, {'@': 120}), 122: (1, {'@': 120}), 113: (1, {'@': 120}), 1: (1, {'@': 120}), 158: (1, {'@': 120})}, 290: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 74: (0, 10), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 47: (0, 244), 48: (0, 467), 49: (0, 483), 129: (0, 16), 50: (0, 337), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 81: (0, 525), 57: (0, 359), 59: (0, 557), 60: (0, 573), 61: (0, 581), 63: (0, 675), 65: (0, 334), 66: (0, 354), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 75: (0, 399), 76: (0, 757), 77: (0, 596), 93: (1, {'@': 468}), 0: (1, {'@': 468}), 1: (1, {'@': 468})}, 291: {15: (1, {'@': 168})}, 292: {33: (1, {'@': 125}), 151: (1, {'@': 125}), 68: (1, {'@': 125}), 53: (1, {'@': 125}), 138: (1, {'@': 125}), 102: (1, {'@': 125}), 142: (1, {'@': 125}), 124: (1, {'@': 125}), 14: (1, {'@': 125}), 136: (1, {'@': 125}), 37: (1, {'@': 125}), 55: (1, {'@': 125}), 60: (1, {'@': 125}), 66: (1, {'@': 125}), 121: (1, {'@': 125}), 152: (1, {'@': 125}), 56: (1, {'@': 125}), 32: (1, {'@': 125}), 153: (1, {'@': 125}), 44: (1, {'@': 125}), 4: (1, {'@': 125}), 76: (1, {'@': 125}), 1: (1, {'@': 125}), 72: (1, {'@': 125}), 100: (1, {'@': 125}), 58: (1, {'@': 125}), 81: (1, {'@': 125}), 47: (1, {'@': 125}), 43: (1, {'@': 125}), 107: (1, {'@': 125}), 117: (1, {'@': 125}), 154: (1, {'@': 125}), 116: (1, {'@': 125}), 67: (1, {'@': 125}), 125: (1, {'@': 125}), 34: (1, {'@': 125}), 38: (1, {'@': 125}), 40: (1, {'@': 125}), 73: (1, {'@': 125}), 24: (1, {'@': 125}), 155: (1, {'@': 125}), 122: (1, {'@': 125}), 77: (1, {'@': 125}), 75: (1, {'@': 125}), 146: (1, {'@': 125}), 164: (1, {'@': 125}), 156: (1, {'@': 125}), 5: (1, {'@': 125}), 134: (1, {'@': 125}), 70: (1, {'@': 125}), 71: (1, {'@': 125}), 157: (1, {'@': 125}), 158: (1, {'@': 125}), 145: (1, {'@': 125}), 31: (1, {'@': 125}), 106: (1, {'@': 125}), 126: (1, {'@': 125}), 65: (1, {'@': 125}), 113: (1, {'@': 125})}, 293: {174: (0, 44), 43: (0, 51), 47: (0, 57), 85: (1, {'@': 414}), 58: (1, {'@': 414}), 89: (1, {'@': 414}), 94: (1, {'@': 414}), 11: (1, {'@': 414}), 81: (1, {'@': 414}), 90: (1, {'@': 414}), 176: (1, {'@': 414}), 86: (1, {'@': 414}), 14: (1, {'@': 414}), 34: (1, {'@': 414}), 91: (1, {'@': 414}), 92: (1, {'@': 414}), 87: (1, {'@': 414}), 19: (1, {'@': 414}), 82: (1, {'@': 414}), 2: (1, {'@': 414}), 93: (1, {'@': 414}), 95: (1, {'@': 414}), 27: (1, {'@': 414}), 177: (1, {'@': 414}), 153: (1, {'@': 414}), 70: (1, {'@': 414}), 96: (1, {'@': 414}), 80: (1, {'@': 414}), 97: (1, {'@': 414}), 98: (1, {'@': 414}), 3: (1, {'@': 414}), 88: (1, {'@': 414}), 15: (1, {'@': 414}), 0: (1, {'@': 414}), 1: (1, {'@': 414}), 8: (1, {'@': 414}), 10: (1, {'@': 414}), 12: (1, {'@': 414}), 13: (1, {'@': 414}), 16: (1, {'@': 414}), 18: (1, {'@': 414}), 20: (1, {'@': 414}), 21: (1, {'@': 414}), 22: (1, {'@': 414}), 23: (1, {'@': 414}), 25: (1, {'@': 414}), 26: (1, {'@': 414}), 28: (1, {'@': 414}), 9: (1, {'@': 414}), 5: (1, {'@': 414}), 4: (1, {'@': 414}), 6: (1, {'@': 414}), 7: (1, {'@': 414}), 17: (1, {'@': 414}), 24: (1, {'@': 414})}, 294: {2: (0, 298), 93: (1, {'@': 466}), 0: (1, {'@': 466}), 1: (1, {'@': 466})}, 295: {234: (0, 551), 34: (0, 311), 70: (0, 319), 85: (1, {'@': 382}), 58: (1, {'@': 382}), 89: (1, {'@': 382}), 94: (1, {'@': 382}), 11: (1, {'@': 382}), 90: (1, {'@': 382}), 86: (1, {'@': 382}), 14: (1, {'@': 382}), 91: (1, {'@': 382}), 92: (1, {'@': 382}), 87: (1, {'@': 382}), 2: (1, {'@': 382}), 93: (1, {'@': 382}), 95: (1, {'@': 382}), 27: (1, {'@': 382}), 88: (1, {'@': 382}), 96: (1, {'@': 382}), 97: (1, {'@': 382}), 98: (1, {'@': 382}), 3: (1, {'@': 382}), 19: (1, {'@': 382}), 15: (1, {'@': 382}), 0: (1, {'@': 382}), 1: (1, {'@': 382}), 8: (1, {'@': 382}), 10: (1, {'@': 382}), 12: (1, {'@': 382}), 13: (1, {'@': 382}), 16: (1, {'@': 382}), 18: (1, {'@': 382}), 20: (1, {'@': 382}), 21: (1, {'@': 382}), 22: (1, {'@': 382}), 23: (1, {'@': 382}), 25: (1, {'@': 382}), 26: (1, {'@': 382}), 28: (1, {'@': 382}), 9: (1, {'@': 382}), 4: (1, {'@': 382}), 5: (1, {'@': 382}), 6: (1, {'@': 382}), 7: (1, {'@': 382}), 17: (1, {'@': 382}), 24: (1, {'@': 382})}, 296: {30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 540), 61: (0, 581), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 39: (0, 608), 44: (0, 321), 40: (0, 616), 65: (0, 334), 47: (0, 244), 66: (0, 354), 68: (0, 697), 69: (0, 371), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 297: {82: (0, 305), 176: (0, 313), 177: (0, 103), 81: (0, 108), 153: (0, 113), 235: (0, 401), 85: (1, {'@': 384}), 58: (1, {'@': 384}), 89: (1, {'@': 384}), 94: (1, {'@': 384}), 11: (1, {'@': 384}), 90: (1, {'@': 384}), 86: (1, {'@': 384}), 14: (1, {'@': 384}), 34: (1, {'@': 384}), 91: (1, {'@': 384}), 92: (1, {'@': 384}), 87: (1, {'@': 384}), 19: (1, {'@': 384}), 2: (1, {'@': 384}), 93: (1, {'@': 384}), 95: (1, {'@': 384}), 27: (1, {'@': 384}), 70: (1, {'@': 384}), 96: (1, {'@': 384}), 97: (1, {'@': 384}), 98: (1, {'@': 384}), 3: (1, {'@': 384}), 88: (1, {'@': 384}), 15: (1, {'@': 384}), 0: (1, {'@': 384}), 1: (1, {'@': 384}), 8: (1, {'@': 384}), 10: (1, {'@': 384}), 12: (1, {'@': 384}), 13: (1, {'@': 384}), 16: (1, {'@': 384}), 18: (1, {'@': 384}), 20: (1, {'@': 384}), 21: (1, {'@': 384}), 22: (1, {'@': 384}), 23: (1, {'@': 384}), 25: (1, {'@': 384}), 26: (1, {'@': 384}), 28: (1, {'@': 384}), 9: (1, {'@': 384}), 5: (1, {'@': 384}), 4: (1, {'@': 384}), 6: (1, {'@': 384}), 7: (1, {'@': 384}), 17: (1, {'@': 384}), 24: (1, {'@': 384})}, 298: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 74: (0, 10), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 47: (0, 244), 48: (0, 467), 49: (0, 483), 129: (0, 16), 50: (0, 337), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 81: (0, 525), 57: (0, 359), 59: (0, 557), 60: (0, 573), 61: (0, 581), 63: (0, 675), 65: (0, 334), 66: (0, 354), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 75: (0, 399), 76: (0, 757), 77: (0, 596), 93: (1, {'@': 465}), 0: (1, {'@': 465}), 1: (1, {'@': 465})}, 299: {2: (1, {'@': 548}), 15: (1, {'@': 548})}, 300: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 108: (0, 558), 37: (0, 674), 76: (0, 757), 38: (0, 601), 39: (0, 608), 40: (0, 616), 129: (0, 613), 41: (0, 689), 42: (0, 696), 43: (0, 300), 107: (0, 703), 64: (0, 64), 139: (0, 69), 45: (0, 736), 44: (0, 321), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 3: (0, 76), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 179: (0, 83), 81: (0, 525), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 182: (0, 89), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 77: (0, 596)}, 301: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 76: (0, 757), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 199: (0, 306), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 64: (0, 655), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 200: (0, 670), 77: (0, 596)}, 302: {9: (1, {'@': 161}), 6: (1, {'@': 161}), 3: (1, {'@': 161})}, 303: {30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 293), 61: (0, 581), 34: (0, 645), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 38: (0, 601), 39: (0, 608), 44: (0, 321), 40: (0, 616), 41: (0, 689), 59: (0, 559), 65: (0, 334), 45: (0, 736), 50: (0, 337), 47: (0, 244), 66: (0, 354), 68: (0, 697), 57: (0, 359), 69: (0, 371), 70: (0, 710), 71: (0, 716), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 304: {43: (1, {'@': 287}), 236: (1, {'@': 287}), 47: (1, {'@': 287})}, 305: {33: (1, {'@': 397}), 68: (1, {'@': 397}), 53: (1, {'@': 397}), 37: (1, {'@': 397}), 55: (1, {'@': 397}), 60: (1, {'@': 397}), 66: (1, {'@': 397}), 56: (1, {'@': 397}), 32: (1, {'@': 397}), 44: (1, {'@': 397}), 76: (1, {'@': 397}), 72: (1, {'@': 397}), 47: (1, {'@': 397}), 34: (1, {'@': 397}), 38: (1, {'@': 397}), 40: (1, {'@': 397}), 73: (1, {'@': 397}), 75: (1, {'@': 397}), 77: (1, {'@': 397}), 71: (1, {'@': 397}), 70: (1, {'@': 397}), 43: (1, {'@': 397}), 31: (1, {'@': 397}), 65: (1, {'@': 397})}, 306: {15: (0, 22)}, 307: {15: (1, {'@': 167})}, 308: {237: (0, 94), 27: (0, 99), 19: (1, {'@': 367}), 2: (1, {'@': 367}), 3: (1, {'@': 367}), 11: (1, {'@': 367}), 14: (1, {'@': 367}), 15: (1, {'@': 367}), 0: (1, {'@': 367}), 1: (1, {'@': 367}), 8: (1, {'@': 367}), 10: (1, {'@': 367}), 12: (1, {'@': 367}), 20: (1, {'@': 367}), 13: (1, {'@': 367}), 21: (1, {'@': 367}), 22: (1, {'@': 367}), 23: (1, {'@': 367}), 25: (1, {'@': 367}), 26: (1, {'@': 367}), 28: (1, {'@': 367}), 16: (1, {'@': 367}), 18: (1, {'@': 367}), 4: (1, {'@': 367}), 5: (1, {'@': 367}), 6: (1, {'@': 367}), 9: (1, {'@': 367}), 24: (1, {'@': 367}), 17: (1, {'@': 367}), 7: (1, {'@': 367})}, 309: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 36: (0, 314), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 310: {100: (0, 353), 101: (0, 358), 110: (0, 383), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 24: (0, 715), 108: (0, 722), 109: (0, 729), 45: (0, 736), 48: (0, 467), 49: (0, 483), 111: (0, 500), 112: (0, 507), 29: (0, 514), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 118: (0, 195), 119: (0, 205), 120: (0, 228), 47: (0, 244), 58: (0, 236), 121: (0, 260), 122: (0, 284), 54: (0, 293), 43: (0, 300), 62: (0, 308), 123: (0, 316), 44: (0, 321), 65: (0, 334), 50: (0, 337), 66: (0, 354), 57: (0, 359), 69: (0, 371), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 40: (0, 616), 129: (0, 613), 130: (0, 619), 131: (0, 622), 132: (0, 625), 46: (0, 631), 133: (0, 634), 134: (0, 637), 135: (0, 489), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 145: (0, 646), 146: (0, 661), 147: (0, 668), 63: (0, 675), 1: (0, 497), 148: (0, 682), 67: (0, 690), 68: (0, 697), 70: (0, 710), 71: (0, 716), 149: (0, 723), 73: (0, 737), 150: (0, 744), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 311: {33: (1, {'@': 391}), 68: (1, {'@': 391}), 53: (1, {'@': 391}), 37: (1, {'@': 391}), 55: (1, {'@': 391}), 60: (1, {'@': 391}), 66: (1, {'@': 391}), 56: (1, {'@': 391}), 32: (1, {'@': 391}), 44: (1, {'@': 391}), 76: (1, {'@': 391}), 72: (1, {'@': 391}), 47: (1, {'@': 391}), 34: (1, {'@': 391}), 38: (1, {'@': 391}), 40: (1, {'@': 391}), 73: (1, {'@': 391}), 75: (1, {'@': 391}), 77: (1, {'@': 391}), 70: (1, {'@': 391}), 71: (1, {'@': 391}), 43: (1, {'@': 391}), 31: (1, {'@': 391}), 65: (1, {'@': 391})}, 312: {236: (0, 548), 43: (0, 556), 238: (0, 564), 47: (0, 572)}, 313: {33: (1, {'@': 398}), 68: (1, {'@': 398}), 53: (1, {'@': 398}), 37: (1, {'@': 398}), 55: (1, {'@': 398}), 60: (1, {'@': 398}), 66: (1, {'@': 398}), 56: (1, {'@': 398}), 32: (1, {'@': 398}), 44: (1, {'@': 398}), 76: (1, {'@': 398}), 72: (1, {'@': 398}), 47: (1, {'@': 398}), 34: (1, {'@': 398}), 38: (1, {'@': 398}), 40: (1, {'@': 398}), 73: (1, {'@': 398}), 75: (1, {'@': 398}), 77: (1, {'@': 398}), 71: (1, {'@': 398}), 70: (1, {'@': 398}), 43: (1, {'@': 398}), 31: (1, {'@': 398}), 65: (1, {'@': 398})}, 314: {7: (1, {'@': 579}), 8: (1, {'@': 579}), 9: (1, {'@': 579}), 10: (1, {'@': 579}), 11: (1, {'@': 579}), 12: (1, {'@': 579}), 13: (1, {'@': 579}), 14: (1, {'@': 579}), 15: (1, {'@': 579}), 16: (1, {'@': 579}), 0: (1, {'@': 579}), 17: (1, {'@': 579}), 18: (1, {'@': 579}), 19: (1, {'@': 579}), 4: (1, {'@': 579}), 1: (1, {'@': 579}), 20: (1, {'@': 579}), 6: (1, {'@': 579}), 21: (1, {'@': 579}), 22: (1, {'@': 579}), 23: (1, {'@': 579}), 24: (1, {'@': 579}), 2: (1, {'@': 579}), 25: (1, {'@': 579}), 26: (1, {'@': 579}), 28: (1, {'@': 579}), 3: (1, {'@': 579}), 5: (1, {'@': 579})}, 315: {2: (0, 742), 15: (1, {'@': 177})}, 316: {0: (1, {'@': 252}), 1: (1, {'@': 252})}, 317: {7: (1, {'@': 578}), 8: (1, {'@': 578}), 9: (1, {'@': 578}), 10: (1, {'@': 578}), 11: (1, {'@': 578}), 12: (1, {'@': 578}), 13: (1, {'@': 578}), 14: (1, {'@': 578}), 15: (1, {'@': 578}), 16: (1, {'@': 578}), 0: (1, {'@': 578}), 17: (1, {'@': 578}), 18: (1, {'@': 578}), 19: (1, {'@': 578}), 4: (1, {'@': 578}), 1: (1, {'@': 578}), 20: (1, {'@': 578}), 6: (1, {'@': 578}), 21: (1, {'@': 578}), 22: (1, {'@': 578}), 23: (1, {'@': 578}), 24: (1, {'@': 578}), 2: (1, {'@': 578}), 25: (1, {'@': 578}), 26: (1, {'@': 578}), 28: (1, {'@': 578}), 3: (1, {'@': 578}), 5: (1, {'@': 578})}, 318: {174: (0, 44), 43: (0, 51), 47: (0, 57), 0: (1, {'@': 304}), 1: (1, {'@': 304})}, 319: {33: (1, {'@': 392}), 68: (1, {'@': 392}), 53: (1, {'@': 392}), 37: (1, {'@': 392}), 55: (1, {'@': 392}), 60: (1, {'@': 392}), 66: (1, {'@': 392}), 56: (1, {'@': 392}), 32: (1, {'@': 392}), 44: (1, {'@': 392}), 76: (1, {'@': 392}), 72: (1, {'@': 392}), 47: (1, {'@': 392}), 34: (1, {'@': 392}), 38: (1, {'@': 392}), 40: (1, {'@': 392}), 73: (1, {'@': 392}), 75: (1, {'@': 392}), 77: (1, {'@': 392}), 70: (1, {'@': 392}), 71: (1, {'@': 392}), 43: (1, {'@': 392}), 31: (1, {'@': 392}), 65: (1, {'@': 392})}, 320: {43: (1, {'@': 286}), 236: (1, {'@': 286}), 47: (1, {'@': 286})}, 321: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 80: (0, 196), 99: (0, 206), 239: (0, 214), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 76: (0, 757), 38: (0, 601), 39: (0, 608), 40: (0, 616), 129: (0, 613), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 240: (0, 221), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 64: (0, 229), 108: (0, 237), 56: (0, 517), 81: (0, 525), 241: (0, 245), 58: (0, 236), 57: (0, 359), 9: (0, 253), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 170: (0, 261), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 77: (0, 596)}, 322: {181: (0, 410), 180: (0, 373), 31: (0, 505)}, 323: {7: (1, {'@': 580}), 8: (1, {'@': 580}), 9: (1, {'@': 580}), 10: (1, {'@': 580}), 11: (1, {'@': 580}), 12: (1, {'@': 580}), 13: (1, {'@': 580}), 14: (1, {'@': 580}), 15: (1, {'@': 580}), 16: (1, {'@': 580}), 0: (1, {'@': 580}), 17: (1, {'@': 580}), 18: (1, {'@': 580}), 19: (1, {'@': 580}), 4: (1, {'@': 580}), 1: (1, {'@': 580}), 20: (1, {'@': 580}), 6: (1, {'@': 580}), 21: (1, {'@': 580}), 22: (1, {'@': 580}), 23: (1, {'@': 580}), 24: (1, {'@': 580}), 2: (1, {'@': 580}), 25: (1, {'@': 580}), 26: (1, {'@': 580}), 27: (1, {'@': 580}), 28: (1, {'@': 580}), 3: (1, {'@': 580}), 5: (1, {'@': 580})}, 324: {3: (1, {'@': 132})}, 325: {236: (1, {'@': 288})}, 326: {3: (1, {'@': 127})}, 327: {7: (1, {'@': 335}), 175: (1, {'@': 335}), 33: (1, {'@': 335}), 151: (1, {'@': 335}), 68: (1, {'@': 335}), 53: (1, {'@': 335}), 138: (1, {'@': 335}), 102: (1, {'@': 335}), 142: (1, {'@': 335}), 124: (1, {'@': 335}), 14: (1, {'@': 335}), 136: (1, {'@': 335}), 37: (1, {'@': 335}), 55: (1, {'@': 335}), 60: (1, {'@': 335}), 66: (1, {'@': 335}), 113: (1, {'@': 335}), 121: (1, {'@': 335}), 152: (1, {'@': 335}), 56: (1, {'@': 335}), 32: (1, {'@': 335}), 153: (1, {'@': 335}), 44: (1, {'@': 335}), 4: (1, {'@': 335}), 76: (1, {'@': 335}), 1: (1, {'@': 335}), 72: (1, {'@': 335}), 100: (1, {'@': 335}), 58: (1, {'@': 335}), 81: (1, {'@': 335}), 47: (1, {'@': 335}), 107: (1, {'@': 335}), 117: (1, {'@': 335}), 154: (1, {'@': 335}), 116: (1, {'@': 335}), 67: (1, {'@': 335}), 125: (1, {'@': 335}), 34: (1, {'@': 335}), 38: (1, {'@': 335}), 40: (1, {'@': 335}), 73: (1, {'@': 335}), 24: (1, {'@': 335}), 155: (1, {'@': 335}), 122: (1, {'@': 335}), 77: (1, {'@': 335}), 75: (1, {'@': 335}), 146: (1, {'@': 335}), 164: (1, {'@': 335}), 156: (1, {'@': 335}), 134: (1, {'@': 335}), 157: (1, {'@': 335}), 70: (1, {'@': 335}), 71: (1, {'@': 335}), 158: (1, {'@': 335}), 43: (1, {'@': 335}), 145: (1, {'@': 335}), 31: (1, {'@': 335}), 106: (1, {'@': 335}), 126: (1, {'@': 335}), 65: (1, {'@': 335}), 5: (1, {'@': 335})}, 328: {5: (0, 192), 154: (0, 220), 157: (0, 276), 242: (0, 274), 224: (0, 281), 206: (0, 289)}, 329: {207: (0, 9), 2: (0, 15), 9: (1, {'@': 483})}, 330: {3: (1, {'@': 131})}, 331: {236: (1, {'@': 289})}, 332: {0: (1, {'@': 283}), 1: (1, {'@': 283})}, 333: {33: (1, {'@': 331}), 151: (1, {'@': 331}), 68: (1, {'@': 331}), 53: (1, {'@': 331}), 138: (1, {'@': 331}), 102: (1, {'@': 331}), 142: (1, {'@': 331}), 14: (1, {'@': 331}), 37: (1, {'@': 331}), 55: (1, {'@': 331}), 124: (1, {'@': 331}), 136: (1, {'@': 331}), 60: (1, {'@': 331}), 66: (1, {'@': 331}), 121: (1, {'@': 331}), 152: (1, {'@': 331}), 56: (1, {'@': 331}), 32: (1, {'@': 331}), 153: (1, {'@': 331}), 44: (1, {'@': 331}), 4: (1, {'@': 331}), 76: (1, {'@': 331}), 72: (1, {'@': 331}), 100: (1, {'@': 331}), 65: (1, {'@': 331}), 58: (1, {'@': 331}), 81: (1, {'@': 331}), 47: (1, {'@': 331}), 107: (1, {'@': 331}), 117: (1, {'@': 331}), 154: (1, {'@': 331}), 116: (1, {'@': 331}), 67: (1, {'@': 331}), 125: (1, {'@': 331}), 34: (1, {'@': 331}), 38: (1, {'@': 331}), 40: (1, {'@': 331}), 24: (1, {'@': 331}), 155: (1, {'@': 331}), 73: (1, {'@': 331}), 75: (1, {'@': 331}), 77: (1, {'@': 331}), 146: (1, {'@': 331}), 164: (1, {'@': 331}), 156: (1, {'@': 331}), 5: (1, {'@': 331}), 157: (1, {'@': 331}), 134: (1, {'@': 331}), 70: (1, {'@': 331}), 71: (1, {'@': 331}), 43: (1, {'@': 331}), 145: (1, {'@': 331}), 31: (1, {'@': 331}), 106: (1, {'@': 331}), 126: (1, {'@': 331}), 122: (1, {'@': 331}), 113: (1, {'@': 331}), 1: (1, {'@': 331}), 158: (1, {'@': 331})}, 334: {85: (1, {'@': 439}), 11: (1, {'@': 439}), 176: (1, {'@': 439}), 86: (1, {'@': 439}), 14: (1, {'@': 439}), 87: (1, {'@': 439}), 174: (1, {'@': 439}), 93: (1, {'@': 439}), 177: (1, {'@': 439}), 153: (1, {'@': 439}), 80: (1, {'@': 439}), 19: (1, {'@': 439}), 88: (1, {'@': 439}), 58: (1, {'@': 439}), 89: (1, {'@': 439}), 94: (1, {'@': 439}), 81: (1, {'@': 439}), 47: (1, {'@': 439}), 90: (1, {'@': 439}), 34: (1, {'@': 439}), 91: (1, {'@': 439}), 92: (1, {'@': 439}), 82: (1, {'@': 439}), 2: (1, {'@': 439}), 95: (1, {'@': 439}), 27: (1, {'@': 439}), 70: (1, {'@': 439}), 96: (1, {'@': 439}), 97: (1, {'@': 439}), 43: (1, {'@': 439}), 98: (1, {'@': 439}), 3: (1, {'@': 439}), 15: (1, {'@': 439}), 0: (1, {'@': 439}), 1: (1, {'@': 439}), 8: (1, {'@': 439}), 10: (1, {'@': 439}), 12: (1, {'@': 439}), 13: (1, {'@': 439}), 16: (1, {'@': 439}), 18: (1, {'@': 439}), 20: (1, {'@': 439}), 21: (1, {'@': 439}), 22: (1, {'@': 439}), 23: (1, {'@': 439}), 25: (1, {'@': 439}), 26: (1, {'@': 439}), 28: (1, {'@': 439}), 9: (1, {'@': 439}), 4: (1, {'@': 439}), 5: (1, {'@': 439}), 6: (1, {'@': 439}), 7: (1, {'@': 439}), 17: (1, {'@': 439}), 24: (1, {'@': 439})}, 335: {100: (0, 353), 101: (0, 358), 216: (0, 364), 243: (0, 370), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 34: (0, 645), 35: (0, 652), 4: (0, 660), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 217: (0, 709), 24: (0, 715), 108: (0, 722), 109: (0, 729), 45: (0, 736), 151: (0, 743), 1: (0, 750), 218: (0, 202), 48: (0, 467), 219: (0, 475), 49: (0, 483), 220: (0, 491), 111: (0, 500), 112: (0, 507), 29: (0, 514), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 227: (0, 570), 117: (0, 578), 55: (0, 586), 221: (0, 188), 118: (0, 195), 119: (0, 205), 155: (0, 213), 154: (0, 220), 120: (0, 228), 58: (0, 236), 47: (0, 244), 152: (0, 252), 121: (0, 260), 244: (0, 268), 157: (0, 276), 122: (0, 284), 54: (0, 293), 43: (0, 300), 62: (0, 308), 123: (0, 316), 44: (0, 321), 223: (0, 328), 65: (0, 334), 50: (0, 337), 14: (0, 342), 5: (0, 347), 66: (0, 354), 57: (0, 359), 153: (0, 365), 69: (0, 371), 224: (0, 379), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 206: (0, 611), 129: (0, 613), 40: (0, 616), 130: (0, 619), 131: (0, 622), 132: (0, 625), 135: (0, 628), 46: (0, 631), 133: (0, 634), 134: (0, 637), 245: (0, 641), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 225: (0, 541), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 226: (0, 589), 145: (0, 646), 156: (0, 653), 146: (0, 661), 147: (0, 668), 63: (0, 675), 148: (0, 682), 67: (0, 690), 68: (0, 697), 228: (0, 704), 70: (0, 710), 71: (0, 716), 149: (0, 723), 229: (0, 730), 73: (0, 737), 150: (0, 744), 230: (0, 751), 76: (0, 757), 77: (0, 596), 64: (0, 599), 158: (1, {'@': 114})}, 336: {2: (0, 21), 9: (1, {'@': 477})}, 337: {246: (0, 297), 82: (0, 305), 176: (0, 313), 177: (0, 103), 81: (0, 108), 153: (0, 113), 235: (0, 118), 85: (1, {'@': 385}), 58: (1, {'@': 385}), 89: (1, {'@': 385}), 94: (1, {'@': 385}), 11: (1, {'@': 385}), 90: (1, {'@': 385}), 86: (1, {'@': 385}), 14: (1, {'@': 385}), 34: (1, {'@': 385}), 91: (1, {'@': 385}), 92: (1, {'@': 385}), 87: (1, {'@': 385}), 19: (1, {'@': 385}), 2: (1, {'@': 385}), 93: (1, {'@': 385}), 95: (1, {'@': 385}), 27: (1, {'@': 385}), 70: (1, {'@': 385}), 96: (1, {'@': 385}), 97: (1, {'@': 385}), 98: (1, {'@': 385}), 3: (1, {'@': 385}), 88: (1, {'@': 385}), 15: (1, {'@': 385}), 0: (1, {'@': 385}), 1: (1, {'@': 385}), 8: (1, {'@': 385}), 10: (1, {'@': 385}), 12: (1, {'@': 385}), 13: (1, {'@': 385}), 16: (1, {'@': 385}), 18: (1, {'@': 385}), 20: (1, {'@': 385}), 21: (1, {'@': 385}), 22: (1, {'@': 385}), 23: (1, {'@': 385}), 25: (1, {'@': 385}), 26: (1, {'@': 385}), 28: (1, {'@': 385}), 9: (1, {'@': 385}), 5: (1, {'@': 385}), 4: (1, {'@': 385}), 6: (1, {'@': 385}), 7: (1, {'@': 385}), 17: (1, {'@': 385}), 24: (1, {'@': 385})}, 338: {3: (1, {'@': 149})}, 339: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 99: (0, 27), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 64: (0, 33), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 80: (0, 40), 76: (0, 757), 77: (0, 596), 9: (1, {'@': 478})}, 340: {100: (0, 353), 101: (0, 358), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 24: (0, 715), 108: (0, 722), 109: (0, 729), 45: (0, 736), 48: (0, 467), 49: (0, 483), 111: (0, 500), 112: (0, 507), 29: (0, 514), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 118: (0, 195), 119: (0, 205), 110: (0, 292), 120: (0, 228), 47: (0, 244), 58: (0, 236), 121: (0, 260), 122: (0, 284), 54: (0, 293), 43: (0, 300), 62: (0, 308), 123: (0, 316), 44: (0, 321), 65: (0, 334), 50: (0, 337), 66: (0, 354), 57: (0, 359), 69: (0, 371), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 40: (0, 616), 129: (0, 613), 130: (0, 619), 131: (0, 622), 132: (0, 625), 46: (0, 631), 133: (0, 634), 134: (0, 637), 135: (0, 489), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 145: (0, 646), 146: (0, 661), 147: (0, 668), 63: (0, 675), 1: (0, 497), 148: (0, 682), 67: (0, 690), 68: (0, 697), 70: (0, 710), 71: (0, 716), 149: (0, 723), 73: (0, 737), 150: (0, 744), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 341: {3: (1, {'@': 128})}, 342: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 64: (0, 123), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 343: {78: (0, 216), 83: (0, 199), 80: (0, 255), 79: (0, 640), 31: (0, 270)}, 344: {33: (1, {'@': 336}), 151: (1, {'@': 336}), 68: (1, {'@': 336}), 53: (1, {'@': 336}), 138: (1, {'@': 336}), 102: (1, {'@': 336}), 142: (1, {'@': 336}), 14: (1, {'@': 336}), 37: (1, {'@': 336}), 55: (1, {'@': 336}), 124: (1, {'@': 336}), 136: (1, {'@': 336}), 60: (1, {'@': 336}), 66: (1, {'@': 336}), 121: (1, {'@': 336}), 152: (1, {'@': 336}), 56: (1, {'@': 336}), 32: (1, {'@': 336}), 153: (1, {'@': 336}), 44: (1, {'@': 336}), 4: (1, {'@': 336}), 76: (1, {'@': 336}), 72: (1, {'@': 336}), 100: (1, {'@': 336}), 65: (1, {'@': 336}), 58: (1, {'@': 336}), 81: (1, {'@': 336}), 47: (1, {'@': 336}), 107: (1, {'@': 336}), 117: (1, {'@': 336}), 154: (1, {'@': 336}), 116: (1, {'@': 336}), 67: (1, {'@': 336}), 125: (1, {'@': 336}), 34: (1, {'@': 336}), 38: (1, {'@': 336}), 40: (1, {'@': 336}), 24: (1, {'@': 336}), 155: (1, {'@': 336}), 73: (1, {'@': 336}), 75: (1, {'@': 336}), 77: (1, {'@': 336}), 146: (1, {'@': 336}), 164: (1, {'@': 336}), 156: (1, {'@': 336}), 5: (1, {'@': 336}), 157: (1, {'@': 336}), 134: (1, {'@': 336}), 70: (1, {'@': 336}), 71: (1, {'@': 336}), 43: (1, {'@': 336}), 145: (1, {'@': 336}), 31: (1, {'@': 336}), 106: (1, {'@': 336}), 126: (1, {'@': 336}), 122: (1, {'@': 336}), 113: (1, {'@': 336}), 1: (1, {'@': 336}), 158: (1, {'@': 336})}, 345: {14: (0, 684), 192: (0, 45), 9: (1, {'@': 537})}, 346: {33: (1, {'@': 338}), 151: (1, {'@': 338}), 68: (1, {'@': 338}), 53: (1, {'@': 338}), 138: (1, {'@': 338}), 102: (1, {'@': 338}), 142: (1, {'@': 338}), 14: (1, {'@': 338}), 37: (1, {'@': 338}), 55: (1, {'@': 338}), 124: (1, {'@': 338}), 136: (1, {'@': 338}), 60: (1, {'@': 338}), 66: (1, {'@': 338}), 121: (1, {'@': 338}), 152: (1, {'@': 338}), 56: (1, {'@': 338}), 32: (1, {'@': 338}), 153: (1, {'@': 338}), 44: (1, {'@': 338}), 4: (1, {'@': 338}), 76: (1, {'@': 338}), 72: (1, {'@': 338}), 100: (1, {'@': 338}), 65: (1, {'@': 338}), 58: (1, {'@': 338}), 81: (1, {'@': 338}), 47: (1, {'@': 338}), 107: (1, {'@': 338}), 117: (1, {'@': 338}), 154: (1, {'@': 338}), 116: (1, {'@': 338}), 67: (1, {'@': 338}), 125: (1, {'@': 338}), 34: (1, {'@': 338}), 38: (1, {'@': 338}), 40: (1, {'@': 338}), 24: (1, {'@': 338}), 155: (1, {'@': 338}), 73: (1, {'@': 338}), 75: (1, {'@': 338}), 77: (1, {'@': 338}), 146: (1, {'@': 338}), 164: (1, {'@': 338}), 156: (1, {'@': 338}), 5: (1, {'@': 338}), 157: (1, {'@': 338}), 134: (1, {'@': 338}), 70: (1, {'@': 338}), 71: (1, {'@': 338}), 43: (1, {'@': 338}), 145: (1, {'@': 338}), 31: (1, {'@': 338}), 106: (1, {'@': 338}), 126: (1, {'@': 338}), 122: (1, {'@': 338}), 113: (1, {'@': 338}), 1: (1, {'@': 338}), 158: (1, {'@': 338})}, 347: {229: (0, 128), 154: (0, 220), 219: (0, 133), 206: (0, 138), 4: (0, 660), 152: (0, 252), 230: (0, 143), 156: (0, 653)}, 348: {3: (1, {'@': 147})}, 349: {210: (0, 147), 2: (0, 197), 0: (1, {'@': 280}), 1: (1, {'@': 280})}, 350: {85: (1, {'@': 427}), 11: (1, {'@': 427}), 176: (1, {'@': 427}), 86: (1, {'@': 427}), 14: (1, {'@': 427}), 87: (1, {'@': 427}), 174: (1, {'@': 427}), 93: (1, {'@': 427}), 177: (1, {'@': 427}), 153: (1, {'@': 427}), 80: (1, {'@': 427}), 19: (1, {'@': 427}), 88: (1, {'@': 427}), 58: (1, {'@': 427}), 89: (1, {'@': 427}), 94: (1, {'@': 427}), 81: (1, {'@': 427}), 47: (1, {'@': 427}), 90: (1, {'@': 427}), 34: (1, {'@': 427}), 91: (1, {'@': 427}), 92: (1, {'@': 427}), 82: (1, {'@': 427}), 2: (1, {'@': 427}), 95: (1, {'@': 427}), 27: (1, {'@': 427}), 70: (1, {'@': 427}), 96: (1, {'@': 427}), 97: (1, {'@': 427}), 43: (1, {'@': 427}), 98: (1, {'@': 427}), 3: (1, {'@': 427}), 15: (1, {'@': 427}), 0: (1, {'@': 427}), 1: (1, {'@': 427}), 8: (1, {'@': 427}), 10: (1, {'@': 427}), 12: (1, {'@': 427}), 13: (1, {'@': 427}), 16: (1, {'@': 427}), 18: (1, {'@': 427}), 20: (1, {'@': 427}), 21: (1, {'@': 427}), 22: (1, {'@': 427}), 23: (1, {'@': 427}), 25: (1, {'@': 427}), 26: (1, {'@': 427}), 28: (1, {'@': 427}), 9: (1, {'@': 427}), 4: (1, {'@': 427}), 5: (1, {'@': 427}), 6: (1, {'@': 427}), 7: (1, {'@': 427}), 17: (1, {'@': 427}), 24: (1, {'@': 427})}, 351: {15: (0, 286)}, 352: {7: (1, {'@': 349}), 33: (1, {'@': 349}), 151: (1, {'@': 349}), 68: (1, {'@': 349}), 162: (1, {'@': 349}), 53: (1, {'@': 349}), 138: (1, {'@': 349}), 102: (1, {'@': 349}), 142: (1, {'@': 349}), 124: (1, {'@': 349}), 14: (1, {'@': 349}), 136: (1, {'@': 349}), 37: (1, {'@': 349}), 55: (1, {'@': 349}), 60: (1, {'@': 349}), 66: (1, {'@': 349}), 113: (1, {'@': 349}), 121: (1, {'@': 349}), 152: (1, {'@': 349}), 56: (1, {'@': 349}), 32: (1, {'@': 349}), 153: (1, {'@': 349}), 44: (1, {'@': 349}), 4: (1, {'@': 349}), 76: (1, {'@': 349}), 1: (1, {'@': 349}), 72: (1, {'@': 349}), 100: (1, {'@': 349}), 58: (1, {'@': 349}), 81: (1, {'@': 349}), 47: (1, {'@': 349}), 107: (1, {'@': 349}), 117: (1, {'@': 349}), 154: (1, {'@': 349}), 116: (1, {'@': 349}), 163: (1, {'@': 349}), 67: (1, {'@': 349}), 125: (1, {'@': 349}), 34: (1, {'@': 349}), 38: (1, {'@': 349}), 40: (1, {'@': 349}), 73: (1, {'@': 349}), 24: (1, {'@': 349}), 155: (1, {'@': 349}), 122: (1, {'@': 349}), 77: (1, {'@': 349}), 75: (1, {'@': 349}), 146: (1, {'@': 349}), 164: (1, {'@': 349}), 156: (1, {'@': 349}), 134: (1, {'@': 349}), 157: (1, {'@': 349}), 70: (1, {'@': 349}), 71: (1, {'@': 349}), 158: (1, {'@': 349}), 43: (1, {'@': 349}), 145: (1, {'@': 349}), 31: (1, {'@': 349}), 106: (1, {'@': 349}), 126: (1, {'@': 349}), 65: (1, {'@': 349}), 5: (1, {'@': 349})}, 353: {31: (0, 349)}, 354: {85: (1, {'@': 527}), 11: (1, {'@': 527}), 176: (1, {'@': 527}), 86: (1, {'@': 527}), 14: (1, {'@': 527}), 87: (1, {'@': 527}), 174: (1, {'@': 527}), 93: (1, {'@': 527}), 177: (1, {'@': 527}), 153: (1, {'@': 527}), 80: (1, {'@': 527}), 19: (1, {'@': 527}), 88: (1, {'@': 527}), 58: (1, {'@': 527}), 89: (1, {'@': 527}), 94: (1, {'@': 527}), 81: (1, {'@': 527}), 47: (1, {'@': 527}), 90: (1, {'@': 527}), 34: (1, {'@': 527}), 91: (1, {'@': 527}), 92: (1, {'@': 527}), 82: (1, {'@': 527}), 2: (1, {'@': 527}), 95: (1, {'@': 527}), 27: (1, {'@': 527}), 70: (1, {'@': 527}), 96: (1, {'@': 527}), 97: (1, {'@': 527}), 43: (1, {'@': 527}), 98: (1, {'@': 527}), 3: (1, {'@': 527}), 15: (1, {'@': 527}), 0: (1, {'@': 527}), 1: (1, {'@': 527}), 8: (1, {'@': 527}), 10: (1, {'@': 527}), 12: (1, {'@': 527}), 13: (1, {'@': 527}), 16: (1, {'@': 527}), 18: (1, {'@': 527}), 20: (1, {'@': 527}), 21: (1, {'@': 527}), 22: (1, {'@': 527}), 23: (1, {'@': 527}), 25: (1, {'@': 527}), 26: (1, {'@': 527}), 28: (1, {'@': 527}), 9: (1, {'@': 527}), 4: (1, {'@': 527}), 5: (1, {'@': 527}), 6: (1, {'@': 527}), 7: (1, {'@': 527}), 17: (1, {'@': 527}), 24: (1, {'@': 527})}, 355: {15: (0, 224)}, 356: {33: (1, {'@': 124}), 151: (1, {'@': 124}), 68: (1, {'@': 124}), 53: (1, {'@': 124}), 138: (1, {'@': 124}), 102: (1, {'@': 124}), 142: (1, {'@': 124}), 124: (1, {'@': 124}), 14: (1, {'@': 124}), 136: (1, {'@': 124}), 37: (1, {'@': 124}), 55: (1, {'@': 124}), 60: (1, {'@': 124}), 66: (1, {'@': 124}), 121: (1, {'@': 124}), 152: (1, {'@': 124}), 56: (1, {'@': 124}), 32: (1, {'@': 124}), 153: (1, {'@': 124}), 44: (1, {'@': 124}), 4: (1, {'@': 124}), 76: (1, {'@': 124}), 1: (1, {'@': 124}), 72: (1, {'@': 124}), 100: (1, {'@': 124}), 58: (1, {'@': 124}), 81: (1, {'@': 124}), 47: (1, {'@': 124}), 43: (1, {'@': 124}), 107: (1, {'@': 124}), 117: (1, {'@': 124}), 154: (1, {'@': 124}), 116: (1, {'@': 124}), 67: (1, {'@': 124}), 125: (1, {'@': 124}), 34: (1, {'@': 124}), 38: (1, {'@': 124}), 40: (1, {'@': 124}), 73: (1, {'@': 124}), 24: (1, {'@': 124}), 155: (1, {'@': 124}), 122: (1, {'@': 124}), 77: (1, {'@': 124}), 75: (1, {'@': 124}), 146: (1, {'@': 124}), 164: (1, {'@': 124}), 156: (1, {'@': 124}), 5: (1, {'@': 124}), 134: (1, {'@': 124}), 70: (1, {'@': 124}), 71: (1, {'@': 124}), 157: (1, {'@': 124}), 158: (1, {'@': 124}), 145: (1, {'@': 124}), 31: (1, {'@': 124}), 106: (1, {'@': 124}), 126: (1, {'@': 124}), 65: (1, {'@': 124}), 113: (1, {'@': 124})}, 357: {85: (1, {'@': 429}), 11: (1, {'@': 429}), 176: (1, {'@': 429}), 86: (1, {'@': 429}), 14: (1, {'@': 429}), 87: (1, {'@': 429}), 174: (1, {'@': 429}), 93: (1, {'@': 429}), 177: (1, {'@': 429}), 153: (1, {'@': 429}), 80: (1, {'@': 429}), 19: (1, {'@': 429}), 88: (1, {'@': 429}), 58: (1, {'@': 429}), 89: (1, {'@': 429}), 94: (1, {'@': 429}), 81: (1, {'@': 429}), 47: (1, {'@': 429}), 90: (1, {'@': 429}), 34: (1, {'@': 429}), 91: (1, {'@': 429}), 92: (1, {'@': 429}), 82: (1, {'@': 429}), 2: (1, {'@': 429}), 95: (1, {'@': 429}), 27: (1, {'@': 429}), 70: (1, {'@': 429}), 96: (1, {'@': 429}), 97: (1, {'@': 429}), 43: (1, {'@': 429}), 98: (1, {'@': 429}), 3: (1, {'@': 429}), 15: (1, {'@': 429}), 0: (1, {'@': 429}), 1: (1, {'@': 429}), 8: (1, {'@': 429}), 10: (1, {'@': 429}), 12: (1, {'@': 429}), 13: (1, {'@': 429}), 16: (1, {'@': 429}), 18: (1, {'@': 429}), 20: (1, {'@': 429}), 21: (1, {'@': 429}), 22: (1, {'@': 429}), 23: (1, {'@': 429}), 25: (1, {'@': 429}), 26: (1, {'@': 429}), 28: (1, {'@': 429}), 9: (1, {'@': 429}), 4: (1, {'@': 429}), 5: (1, {'@': 429}), 6: (1, {'@': 429}), 7: (1, {'@': 429}), 17: (1, {'@': 429}), 24: (1, {'@': 429})}, 358: {15: (0, 602), 8: (0, 605), 10: (0, 609), 12: (0, 612), 18: (0, 614), 22: (0, 617), 23: (0, 620), 13: (0, 623), 247: (0, 626), 25: (0, 629), 21: (0, 632), 16: (0, 635), 248: (0, 638), 28: (0, 642), 26: (0, 464), 19: (0, 472), 20: (0, 480), 0: (1, {'@': 211}), 1: (1, {'@': 211})}, 359: {80: (0, 149), 85: (1, {'@': 412}), 58: (1, {'@': 412}), 89: (1, {'@': 412}), 94: (1, {'@': 412}), 11: (1, {'@': 412}), 81: (1, {'@': 412}), 90: (1, {'@': 412}), 176: (1, {'@': 412}), 86: (1, {'@': 412}), 14: (1, {'@': 412}), 34: (1, {'@': 412}), 91: (1, {'@': 412}), 92: (1, {'@': 412}), 87: (1, {'@': 412}), 82: (1, {'@': 412}), 2: (1, {'@': 412}), 93: (1, {'@': 412}), 95: (1, {'@': 412}), 27: (1, {'@': 412}), 177: (1, {'@': 412}), 88: (1, {'@': 412}), 153: (1, {'@': 412}), 70: (1, {'@': 412}), 96: (1, {'@': 412}), 97: (1, {'@': 412}), 98: (1, {'@': 412}), 3: (1, {'@': 412}), 19: (1, {'@': 412}), 15: (1, {'@': 412}), 0: (1, {'@': 412}), 1: (1, {'@': 412}), 8: (1, {'@': 412}), 10: (1, {'@': 412}), 12: (1, {'@': 412}), 13: (1, {'@': 412}), 16: (1, {'@': 412}), 18: (1, {'@': 412}), 20: (1, {'@': 412}), 21: (1, {'@': 412}), 22: (1, {'@': 412}), 23: (1, {'@': 412}), 25: (1, {'@': 412}), 26: (1, {'@': 412}), 28: (1, {'@': 412}), 9: (1, {'@': 412}), 4: (1, {'@': 412}), 5: (1, {'@': 412}), 6: (1, {'@': 412}), 7: (1, {'@': 412}), 17: (1, {'@': 412}), 24: (1, {'@': 412})}, 360: {0: (1, {'@': 256}), 1: (1, {'@': 256})}, 361: {2: (1, {'@': 568}), 3: (1, {'@': 568})}, 362: {14: (0, 684), 192: (0, 52), 3: (1, {'@': 539}), 9: (1, {'@': 539})}, 363: {9: (1, {'@': 516}), 4: (1, {'@': 516}), 5: (1, {'@': 516}), 6: (1, {'@': 516}), 3: (1, {'@': 516}), 14: (1, {'@': 516})}, 364: {153: (0, 365), 226: (0, 488), 154: (1, {'@': 118}), 157: (1, {'@': 118}), 5: (1, {'@': 118})}, 365: {31: (0, 694), 187: (0, 154)}, 366: {0: (1, {'@': 561}), 2: (1, {'@': 561}), 3: (1, {'@': 561}), 1: (1, {'@': 561})}, 367: {2: (1, {'@': 296}), 3: (1, {'@': 296})}, 368: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 64: (0, 58), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 369: {9: (1, {'@': 162}), 6: (1, {'@': 162}), 3: (1, {'@': 162})}, 370: {}, 371: {85: (1, {'@': 419}), 11: (1, {'@': 419}), 176: (1, {'@': 419}), 86: (1, {'@': 419}), 14: (1, {'@': 419}), 87: (1, {'@': 419}), 174: (1, {'@': 419}), 93: (1, {'@': 419}), 177: (1, {'@': 419}), 153: (1, {'@': 419}), 80: (1, {'@': 419}), 19: (1, {'@': 419}), 88: (1, {'@': 419}), 58: (1, {'@': 419}), 89: (1, {'@': 419}), 94: (1, {'@': 419}), 81: (1, {'@': 419}), 47: (1, {'@': 419}), 90: (1, {'@': 419}), 34: (1, {'@': 419}), 91: (1, {'@': 419}), 92: (1, {'@': 419}), 82: (1, {'@': 419}), 2: (1, {'@': 419}), 95: (1, {'@': 419}), 27: (1, {'@': 419}), 70: (1, {'@': 419}), 96: (1, {'@': 419}), 97: (1, {'@': 419}), 43: (1, {'@': 419}), 98: (1, {'@': 419}), 3: (1, {'@': 419}), 15: (1, {'@': 419}), 0: (1, {'@': 419}), 1: (1, {'@': 419}), 8: (1, {'@': 419}), 10: (1, {'@': 419}), 12: (1, {'@': 419}), 13: (1, {'@': 419}), 16: (1, {'@': 419}), 18: (1, {'@': 419}), 20: (1, {'@': 419}), 21: (1, {'@': 419}), 22: (1, {'@': 419}), 23: (1, {'@': 419}), 25: (1, {'@': 419}), 26: (1, {'@': 419}), 28: (1, {'@': 419}), 9: (1, {'@': 419}), 4: (1, {'@': 419}), 5: (1, {'@': 419}), 6: (1, {'@': 419}), 7: (1, {'@': 419}), 17: (1, {'@': 419}), 24: (1, {'@': 419})}, 372: {15: (0, 232)}, 373: {2: (1, {'@': 569}), 3: (1, {'@': 569})}, 374: {2: (0, 65), 9: (1, {'@': 486})}, 375: {249: (0, 420), 29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 67: (0, 423), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 53: (0, 485), 52: (0, 426), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 250: (0, 302), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 376: {181: (0, 496), 31: (0, 505)}, 377: {7: (1, {'@': 350}), 33: (1, {'@': 350}), 151: (1, {'@': 350}), 68: (1, {'@': 350}), 162: (1, {'@': 350}), 53: (1, {'@': 350}), 138: (1, {'@': 350}), 102: (1, {'@': 350}), 142: (1, {'@': 350}), 124: (1, {'@': 350}), 14: (1, {'@': 350}), 136: (1, {'@': 350}), 37: (1, {'@': 350}), 55: (1, {'@': 350}), 60: (1, {'@': 350}), 66: (1, {'@': 350}), 113: (1, {'@': 350}), 121: (1, {'@': 350}), 152: (1, {'@': 350}), 56: (1, {'@': 350}), 32: (1, {'@': 350}), 153: (1, {'@': 350}), 44: (1, {'@': 350}), 4: (1, {'@': 350}), 76: (1, {'@': 350}), 1: (1, {'@': 350}), 72: (1, {'@': 350}), 100: (1, {'@': 350}), 58: (1, {'@': 350}), 81: (1, {'@': 350}), 47: (1, {'@': 350}), 107: (1, {'@': 350}), 117: (1, {'@': 350}), 154: (1, {'@': 350}), 116: (1, {'@': 350}), 163: (1, {'@': 350}), 67: (1, {'@': 350}), 125: (1, {'@': 350}), 34: (1, {'@': 350}), 38: (1, {'@': 350}), 40: (1, {'@': 350}), 73: (1, {'@': 350}), 24: (1, {'@': 350}), 155: (1, {'@': 350}), 122: (1, {'@': 350}), 77: (1, {'@': 350}), 75: (1, {'@': 350}), 146: (1, {'@': 350}), 164: (1, {'@': 350}), 156: (1, {'@': 350}), 134: (1, {'@': 350}), 157: (1, {'@': 350}), 70: (1, {'@': 350}), 71: (1, {'@': 350}), 158: (1, {'@': 350}), 43: (1, {'@': 350}), 145: (1, {'@': 350}), 31: (1, {'@': 350}), 106: (1, {'@': 350}), 126: (1, {'@': 350}), 65: (1, {'@': 350}), 5: (1, {'@': 350})}, 378: {33: (1, {'@': 123}), 151: (1, {'@': 123}), 68: (1, {'@': 123}), 53: (1, {'@': 123}), 138: (1, {'@': 123}), 102: (1, {'@': 123}), 142: (1, {'@': 123}), 124: (1, {'@': 123}), 14: (1, {'@': 123}), 136: (1, {'@': 123}), 37: (1, {'@': 123}), 55: (1, {'@': 123}), 60: (1, {'@': 123}), 66: (1, {'@': 123}), 121: (1, {'@': 123}), 152: (1, {'@': 123}), 56: (1, {'@': 123}), 32: (1, {'@': 123}), 153: (1, {'@': 123}), 44: (1, {'@': 123}), 4: (1, {'@': 123}), 76: (1, {'@': 123}), 1: (1, {'@': 123}), 72: (1, {'@': 123}), 100: (1, {'@': 123}), 58: (1, {'@': 123}), 81: (1, {'@': 123}), 47: (1, {'@': 123}), 43: (1, {'@': 123}), 107: (1, {'@': 123}), 117: (1, {'@': 123}), 154: (1, {'@': 123}), 116: (1, {'@': 123}), 67: (1, {'@': 123}), 125: (1, {'@': 123}), 34: (1, {'@': 123}), 38: (1, {'@': 123}), 40: (1, {'@': 123}), 73: (1, {'@': 123}), 24: (1, {'@': 123}), 155: (1, {'@': 123}), 122: (1, {'@': 123}), 77: (1, {'@': 123}), 75: (1, {'@': 123}), 146: (1, {'@': 123}), 164: (1, {'@': 123}), 156: (1, {'@': 123}), 5: (1, {'@': 123}), 134: (1, {'@': 123}), 70: (1, {'@': 123}), 71: (1, {'@': 123}), 157: (1, {'@': 123}), 158: (1, {'@': 123}), 145: (1, {'@': 123}), 31: (1, {'@': 123}), 106: (1, {'@': 123}), 126: (1, {'@': 123}), 65: (1, {'@': 123}), 113: (1, {'@': 123})}, 379: {33: (1, {'@': 324}), 151: (1, {'@': 324}), 68: (1, {'@': 324}), 53: (1, {'@': 324}), 138: (1, {'@': 324}), 102: (1, {'@': 324}), 142: (1, {'@': 324}), 14: (1, {'@': 324}), 37: (1, {'@': 324}), 55: (1, {'@': 324}), 124: (1, {'@': 324}), 136: (1, {'@': 324}), 60: (1, {'@': 324}), 66: (1, {'@': 324}), 121: (1, {'@': 324}), 152: (1, {'@': 324}), 56: (1, {'@': 324}), 32: (1, {'@': 324}), 153: (1, {'@': 324}), 44: (1, {'@': 324}), 4: (1, {'@': 324}), 76: (1, {'@': 324}), 72: (1, {'@': 324}), 100: (1, {'@': 324}), 65: (1, {'@': 324}), 58: (1, {'@': 324}), 81: (1, {'@': 324}), 47: (1, {'@': 324}), 107: (1, {'@': 324}), 117: (1, {'@': 324}), 154: (1, {'@': 324}), 116: (1, {'@': 324}), 67: (1, {'@': 324}), 125: (1, {'@': 324}), 34: (1, {'@': 324}), 38: (1, {'@': 324}), 40: (1, {'@': 324}), 24: (1, {'@': 324}), 155: (1, {'@': 324}), 73: (1, {'@': 324}), 75: (1, {'@': 324}), 77: (1, {'@': 324}), 146: (1, {'@': 324}), 164: (1, {'@': 324}), 156: (1, {'@': 324}), 5: (1, {'@': 324}), 157: (1, {'@': 324}), 134: (1, {'@': 324}), 70: (1, {'@': 324}), 71: (1, {'@': 324}), 43: (1, {'@': 324}), 145: (1, {'@': 324}), 31: (1, {'@': 324}), 106: (1, {'@': 324}), 126: (1, {'@': 324}), 122: (1, {'@': 324}), 113: (1, {'@': 324}), 1: (1, {'@': 324}), 158: (1, {'@': 324})}, 380: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 129: (0, 613), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 81: (0, 525), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 108: (0, 731), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596), 64: (0, 599), 9: (1, {'@': 487})}, 381: {15: (0, 310)}, 382: {85: (1, {'@': 432}), 11: (1, {'@': 432}), 176: (1, {'@': 432}), 86: (1, {'@': 432}), 14: (1, {'@': 432}), 87: (1, {'@': 432}), 174: (1, {'@': 432}), 93: (1, {'@': 432}), 177: (1, {'@': 432}), 153: (1, {'@': 432}), 80: (1, {'@': 432}), 19: (1, {'@': 432}), 88: (1, {'@': 432}), 58: (1, {'@': 432}), 89: (1, {'@': 432}), 94: (1, {'@': 432}), 81: (1, {'@': 432}), 47: (1, {'@': 432}), 90: (1, {'@': 432}), 34: (1, {'@': 432}), 91: (1, {'@': 432}), 92: (1, {'@': 432}), 82: (1, {'@': 432}), 2: (1, {'@': 432}), 95: (1, {'@': 432}), 27: (1, {'@': 432}), 70: (1, {'@': 432}), 96: (1, {'@': 432}), 97: (1, {'@': 432}), 43: (1, {'@': 432}), 98: (1, {'@': 432}), 3: (1, {'@': 432}), 15: (1, {'@': 432}), 0: (1, {'@': 432}), 1: (1, {'@': 432}), 8: (1, {'@': 432}), 10: (1, {'@': 432}), 12: (1, {'@': 432}), 13: (1, {'@': 432}), 16: (1, {'@': 432}), 18: (1, {'@': 432}), 20: (1, {'@': 432}), 21: (1, {'@': 432}), 22: (1, {'@': 432}), 23: (1, {'@': 432}), 25: (1, {'@': 432}), 26: (1, {'@': 432}), 28: (1, {'@': 432}), 9: (1, {'@': 432}), 4: (1, {'@': 432}), 5: (1, {'@': 432}), 6: (1, {'@': 432}), 7: (1, {'@': 432}), 17: (1, {'@': 432}), 24: (1, {'@': 432})}, 383: {33: (1, {'@': 340}), 151: (1, {'@': 340}), 68: (1, {'@': 340}), 53: (1, {'@': 340}), 138: (1, {'@': 340}), 102: (1, {'@': 340}), 142: (1, {'@': 340}), 14: (1, {'@': 340}), 37: (1, {'@': 340}), 55: (1, {'@': 340}), 124: (1, {'@': 340}), 136: (1, {'@': 340}), 60: (1, {'@': 340}), 66: (1, {'@': 340}), 121: (1, {'@': 340}), 152: (1, {'@': 340}), 56: (1, {'@': 340}), 32: (1, {'@': 340}), 153: (1, {'@': 340}), 44: (1, {'@': 340}), 4: (1, {'@': 340}), 76: (1, {'@': 340}), 72: (1, {'@': 340}), 100: (1, {'@': 340}), 65: (1, {'@': 340}), 58: (1, {'@': 340}), 81: (1, {'@': 340}), 47: (1, {'@': 340}), 107: (1, {'@': 340}), 117: (1, {'@': 340}), 154: (1, {'@': 340}), 116: (1, {'@': 340}), 67: (1, {'@': 340}), 125: (1, {'@': 340}), 34: (1, {'@': 340}), 38: (1, {'@': 340}), 40: (1, {'@': 340}), 24: (1, {'@': 340}), 155: (1, {'@': 340}), 73: (1, {'@': 340}), 75: (1, {'@': 340}), 77: (1, {'@': 340}), 146: (1, {'@': 340}), 164: (1, {'@': 340}), 156: (1, {'@': 340}), 5: (1, {'@': 340}), 157: (1, {'@': 340}), 134: (1, {'@': 340}), 70: (1, {'@': 340}), 71: (1, {'@': 340}), 43: (1, {'@': 340}), 145: (1, {'@': 340}), 31: (1, {'@': 340}), 106: (1, {'@': 340}), 126: (1, {'@': 340}), 122: (1, {'@': 340}), 113: (1, {'@': 340}), 1: (1, {'@': 340}), 158: (1, {'@': 340})}, 384: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 76: (0, 757), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 64: (0, 158), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 77: (0, 596), 0: (1, {'@': 251}), 1: (1, {'@': 251})}, 385: {30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 248), 61: (0, 581), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 39: (0, 608), 44: (0, 321), 40: (0, 616), 65: (0, 334), 47: (0, 244), 66: (0, 354), 68: (0, 697), 69: (0, 371), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 386: {85: (1, {'@': 430}), 11: (1, {'@': 430}), 176: (1, {'@': 430}), 86: (1, {'@': 430}), 14: (1, {'@': 430}), 87: (1, {'@': 430}), 174: (1, {'@': 430}), 93: (1, {'@': 430}), 177: (1, {'@': 430}), 153: (1, {'@': 430}), 80: (1, {'@': 430}), 19: (1, {'@': 430}), 88: (1, {'@': 430}), 58: (1, {'@': 430}), 89: (1, {'@': 430}), 94: (1, {'@': 430}), 81: (1, {'@': 430}), 47: (1, {'@': 430}), 90: (1, {'@': 430}), 34: (1, {'@': 430}), 91: (1, {'@': 430}), 92: (1, {'@': 430}), 82: (1, {'@': 430}), 2: (1, {'@': 430}), 95: (1, {'@': 430}), 27: (1, {'@': 430}), 70: (1, {'@': 430}), 96: (1, {'@': 430}), 97: (1, {'@': 430}), 43: (1, {'@': 430}), 98: (1, {'@': 430}), 3: (1, {'@': 430}), 15: (1, {'@': 430}), 0: (1, {'@': 430}), 1: (1, {'@': 430}), 8: (1, {'@': 430}), 10: (1, {'@': 430}), 12: (1, {'@': 430}), 13: (1, {'@': 430}), 16: (1, {'@': 430}), 18: (1, {'@': 430}), 20: (1, {'@': 430}), 21: (1, {'@': 430}), 22: (1, {'@': 430}), 23: (1, {'@': 430}), 25: (1, {'@': 430}), 26: (1, {'@': 430}), 28: (1, {'@': 430}), 9: (1, {'@': 430}), 4: (1, {'@': 430}), 5: (1, {'@': 430}), 6: (1, {'@': 430}), 7: (1, {'@': 430}), 17: (1, {'@': 430}), 24: (1, {'@': 430})}, 387: {30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 318), 61: (0, 581), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 39: (0, 608), 44: (0, 321), 40: (0, 616), 65: (0, 334), 47: (0, 244), 66: (0, 354), 68: (0, 697), 69: (0, 371), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 388: {0: (1, {'@': 200}), 1: (1, {'@': 200})}, 389: {211: (0, 240), 163: (0, 242), 33: (1, {'@': 343}), 151: (1, {'@': 343}), 68: (1, {'@': 343}), 53: (1, {'@': 343}), 138: (1, {'@': 343}), 102: (1, {'@': 343}), 142: (1, {'@': 343}), 14: (1, {'@': 343}), 37: (1, {'@': 343}), 55: (1, {'@': 343}), 124: (1, {'@': 343}), 136: (1, {'@': 343}), 60: (1, {'@': 343}), 66: (1, {'@': 343}), 121: (1, {'@': 343}), 152: (1, {'@': 343}), 56: (1, {'@': 343}), 32: (1, {'@': 343}), 153: (1, {'@': 343}), 44: (1, {'@': 343}), 4: (1, {'@': 343}), 76: (1, {'@': 343}), 72: (1, {'@': 343}), 100: (1, {'@': 343}), 65: (1, {'@': 343}), 58: (1, {'@': 343}), 81: (1, {'@': 343}), 47: (1, {'@': 343}), 107: (1, {'@': 343}), 117: (1, {'@': 343}), 154: (1, {'@': 343}), 116: (1, {'@': 343}), 67: (1, {'@': 343}), 125: (1, {'@': 343}), 34: (1, {'@': 343}), 38: (1, {'@': 343}), 40: (1, {'@': 343}), 24: (1, {'@': 343}), 155: (1, {'@': 343}), 73: (1, {'@': 343}), 75: (1, {'@': 343}), 77: (1, {'@': 343}), 146: (1, {'@': 343}), 164: (1, {'@': 343}), 156: (1, {'@': 343}), 5: (1, {'@': 343}), 157: (1, {'@': 343}), 134: (1, {'@': 343}), 70: (1, {'@': 343}), 71: (1, {'@': 343}), 43: (1, {'@': 343}), 145: (1, {'@': 343}), 31: (1, {'@': 343}), 106: (1, {'@': 343}), 126: (1, {'@': 343}), 122: (1, {'@': 343}), 113: (1, {'@': 343}), 1: (1, {'@': 343}), 158: (1, {'@': 343})}, 390: {85: (1, {'@': 525}), 11: (1, {'@': 525}), 176: (1, {'@': 525}), 86: (1, {'@': 525}), 14: (1, {'@': 525}), 87: (1, {'@': 525}), 174: (1, {'@': 525}), 93: (1, {'@': 525}), 177: (1, {'@': 525}), 153: (1, {'@': 525}), 80: (1, {'@': 525}), 19: (1, {'@': 525}), 88: (1, {'@': 525}), 58: (1, {'@': 525}), 89: (1, {'@': 525}), 94: (1, {'@': 525}), 81: (1, {'@': 525}), 47: (1, {'@': 525}), 90: (1, {'@': 525}), 34: (1, {'@': 525}), 91: (1, {'@': 525}), 92: (1, {'@': 525}), 82: (1, {'@': 525}), 2: (1, {'@': 525}), 95: (1, {'@': 525}), 27: (1, {'@': 525}), 70: (1, {'@': 525}), 96: (1, {'@': 525}), 97: (1, {'@': 525}), 43: (1, {'@': 525}), 98: (1, {'@': 525}), 3: (1, {'@': 525}), 15: (1, {'@': 525}), 0: (1, {'@': 525}), 1: (1, {'@': 525}), 8: (1, {'@': 525}), 10: (1, {'@': 525}), 12: (1, {'@': 525}), 13: (1, {'@': 525}), 16: (1, {'@': 525}), 18: (1, {'@': 525}), 20: (1, {'@': 525}), 21: (1, {'@': 525}), 22: (1, {'@': 525}), 23: (1, {'@': 525}), 25: (1, {'@': 525}), 26: (1, {'@': 525}), 28: (1, {'@': 525}), 9: (1, {'@': 525}), 4: (1, {'@': 525}), 5: (1, {'@': 525}), 6: (1, {'@': 525}), 7: (1, {'@': 525}), 17: (1, {'@': 525}), 24: (1, {'@': 525})}, 391: {33: (1, {'@': 489}), 151: (1, {'@': 489}), 68: (1, {'@': 489}), 53: (1, {'@': 489}), 138: (1, {'@': 489}), 102: (1, {'@': 489}), 142: (1, {'@': 489}), 14: (1, {'@': 489}), 37: (1, {'@': 489}), 55: (1, {'@': 489}), 124: (1, {'@': 489}), 136: (1, {'@': 489}), 60: (1, {'@': 489}), 66: (1, {'@': 489}), 121: (1, {'@': 489}), 152: (1, {'@': 489}), 56: (1, {'@': 489}), 32: (1, {'@': 489}), 153: (1, {'@': 489}), 44: (1, {'@': 489}), 4: (1, {'@': 489}), 76: (1, {'@': 489}), 72: (1, {'@': 489}), 100: (1, {'@': 489}), 65: (1, {'@': 489}), 58: (1, {'@': 489}), 81: (1, {'@': 489}), 47: (1, {'@': 489}), 107: (1, {'@': 489}), 117: (1, {'@': 489}), 154: (1, {'@': 489}), 116: (1, {'@': 489}), 67: (1, {'@': 489}), 125: (1, {'@': 489}), 34: (1, {'@': 489}), 38: (1, {'@': 489}), 40: (1, {'@': 489}), 24: (1, {'@': 489}), 155: (1, {'@': 489}), 73: (1, {'@': 489}), 75: (1, {'@': 489}), 77: (1, {'@': 489}), 146: (1, {'@': 489}), 164: (1, {'@': 489}), 156: (1, {'@': 489}), 5: (1, {'@': 489}), 157: (1, {'@': 489}), 134: (1, {'@': 489}), 70: (1, {'@': 489}), 71: (1, {'@': 489}), 43: (1, {'@': 489}), 145: (1, {'@': 489}), 31: (1, {'@': 489}), 106: (1, {'@': 489}), 126: (1, {'@': 489}), 122: (1, {'@': 489}), 113: (1, {'@': 489}), 1: (1, {'@': 489}), 158: (1, {'@': 489})}, 392: {85: (1, {'@': 431}), 11: (1, {'@': 431}), 176: (1, {'@': 431}), 86: (1, {'@': 431}), 14: (1, {'@': 431}), 87: (1, {'@': 431}), 174: (1, {'@': 431}), 93: (1, {'@': 431}), 177: (1, {'@': 431}), 153: (1, {'@': 431}), 80: (1, {'@': 431}), 19: (1, {'@': 431}), 88: (1, {'@': 431}), 58: (1, {'@': 431}), 89: (1, {'@': 431}), 94: (1, {'@': 431}), 81: (1, {'@': 431}), 47: (1, {'@': 431}), 90: (1, {'@': 431}), 34: (1, {'@': 431}), 91: (1, {'@': 431}), 92: (1, {'@': 431}), 82: (1, {'@': 431}), 2: (1, {'@': 431}), 95: (1, {'@': 431}), 27: (1, {'@': 431}), 70: (1, {'@': 431}), 96: (1, {'@': 431}), 97: (1, {'@': 431}), 43: (1, {'@': 431}), 98: (1, {'@': 431}), 3: (1, {'@': 431}), 15: (1, {'@': 431}), 0: (1, {'@': 431}), 1: (1, {'@': 431}), 8: (1, {'@': 431}), 10: (1, {'@': 431}), 12: (1, {'@': 431}), 13: (1, {'@': 431}), 16: (1, {'@': 431}), 18: (1, {'@': 431}), 20: (1, {'@': 431}), 21: (1, {'@': 431}), 22: (1, {'@': 431}), 23: (1, {'@': 431}), 25: (1, {'@': 431}), 26: (1, {'@': 431}), 28: (1, {'@': 431}), 9: (1, {'@': 431}), 4: (1, {'@': 431}), 5: (1, {'@': 431}), 6: (1, {'@': 431}), 7: (1, {'@': 431}), 17: (1, {'@': 431}), 24: (1, {'@': 431})}, 393: {0: (1, {'@': 240}), 1: (1, {'@': 240})}, 394: {203: (0, 163), 85: (0, 168), 92: (0, 173), 251: (0, 178), 87: (0, 184), 96: (0, 191), 98: (0, 200), 58: (0, 209), 93: (0, 217), 95: (0, 225), 88: (0, 233), 90: (0, 241), 14: (1, {'@': 371}), 3: (1, {'@': 371}), 2: (1, {'@': 371}), 27: (1, {'@': 371}), 19: (1, {'@': 371}), 11: (1, {'@': 371}), 1: (1, {'@': 371}), 15: (1, {'@': 371}), 0: (1, {'@': 371}), 8: (1, {'@': 371}), 10: (1, {'@': 371}), 12: (1, {'@': 371}), 20: (1, {'@': 371}), 13: (1, {'@': 371}), 21: (1, {'@': 371}), 22: (1, {'@': 371}), 23: (1, {'@': 371}), 25: (1, {'@': 371}), 26: (1, {'@': 371}), 28: (1, {'@': 371}), 16: (1, {'@': 371}), 18: (1, {'@': 371}), 4: (1, {'@': 371}), 5: (1, {'@': 371}), 6: (1, {'@': 371}), 7: (1, {'@': 371}), 9: (1, {'@': 371}), 24: (1, {'@': 371}), 17: (1, {'@': 371})}, 395: {3: (0, 256)}, 396: {33: (1, {'@': 122}), 102: (1, {'@': 122}), 124: (1, {'@': 122}), 136: (1, {'@': 122}), 113: (1, {'@': 122}), 121: (1, {'@': 122}), 32: (1, {'@': 122}), 4: (1, {'@': 122}), 76: (1, {'@': 122}), 100: (1, {'@': 122}), 58: (1, {'@': 122}), 117: (1, {'@': 122}), 116: (1, {'@': 122}), 125: (1, {'@': 122}), 38: (1, {'@': 122}), 40: (1, {'@': 122}), 73: (1, {'@': 122}), 77: (1, {'@': 122}), 146: (1, {'@': 122}), 164: (1, {'@': 122}), 156: (1, {'@': 122}), 5: (1, {'@': 122}), 134: (1, {'@': 122}), 70: (1, {'@': 122}), 71: (1, {'@': 122}), 106: (1, {'@': 122}), 126: (1, {'@': 122}), 65: (1, {'@': 122}), 151: (1, {'@': 122}), 68: (1, {'@': 122}), 53: (1, {'@': 122}), 138: (1, {'@': 122}), 142: (1, {'@': 122}), 14: (1, {'@': 122}), 37: (1, {'@': 122}), 55: (1, {'@': 122}), 60: (1, {'@': 122}), 66: (1, {'@': 122}), 152: (1, {'@': 122}), 56: (1, {'@': 122}), 153: (1, {'@': 122}), 44: (1, {'@': 122}), 72: (1, {'@': 122}), 81: (1, {'@': 122}), 47: (1, {'@': 122}), 107: (1, {'@': 122}), 154: (1, {'@': 122}), 67: (1, {'@': 122}), 34: (1, {'@': 122}), 24: (1, {'@': 122}), 155: (1, {'@': 122}), 75: (1, {'@': 122}), 157: (1, {'@': 122}), 158: (1, {'@': 122}), 43: (1, {'@': 122}), 145: (1, {'@': 122}), 31: (1, {'@': 122}), 122: (1, {'@': 122}), 1: (1, {'@': 122})}, 397: {3: (1, {'@': 503})}, 398: {85: (1, {'@': 523}), 11: (1, {'@': 523}), 176: (1, {'@': 523}), 86: (1, {'@': 523}), 14: (1, {'@': 523}), 87: (1, {'@': 523}), 174: (1, {'@': 523}), 93: (1, {'@': 523}), 177: (1, {'@': 523}), 153: (1, {'@': 523}), 80: (1, {'@': 523}), 19: (1, {'@': 523}), 88: (1, {'@': 523}), 58: (1, {'@': 523}), 89: (1, {'@': 523}), 94: (1, {'@': 523}), 81: (1, {'@': 523}), 47: (1, {'@': 523}), 90: (1, {'@': 523}), 34: (1, {'@': 523}), 91: (1, {'@': 523}), 92: (1, {'@': 523}), 82: (1, {'@': 523}), 2: (1, {'@': 523}), 95: (1, {'@': 523}), 27: (1, {'@': 523}), 70: (1, {'@': 523}), 96: (1, {'@': 523}), 97: (1, {'@': 523}), 43: (1, {'@': 523}), 98: (1, {'@': 523}), 3: (1, {'@': 523}), 15: (1, {'@': 523}), 0: (1, {'@': 523}), 1: (1, {'@': 523}), 8: (1, {'@': 523}), 10: (1, {'@': 523}), 12: (1, {'@': 523}), 13: (1, {'@': 523}), 16: (1, {'@': 523}), 18: (1, {'@': 523}), 20: (1, {'@': 523}), 21: (1, {'@': 523}), 22: (1, {'@': 523}), 23: (1, {'@': 523}), 25: (1, {'@': 523}), 26: (1, {'@': 523}), 28: (1, {'@': 523}), 9: (1, {'@': 523}), 4: (1, {'@': 523}), 5: (1, {'@': 523}), 6: (1, {'@': 523}), 7: (1, {'@': 523}), 17: (1, {'@': 523}), 24: (1, {'@': 523})}, 399: {85: (1, {'@': 529}), 53: (1, {'@': 529}), 11: (1, {'@': 529}), 176: (1, {'@': 529}), 86: (1, {'@': 529}), 14: (1, {'@': 529}), 37: (1, {'@': 529}), 87: (1, {'@': 529}), 174: (1, {'@': 529}), 93: (1, {'@': 529}), 177: (1, {'@': 529}), 56: (1, {'@': 529}), 153: (1, {'@': 529}), 80: (1, {'@': 529}), 19: (1, {'@': 529}), 88: (1, {'@': 529}), 76: (1, {'@': 529}), 58: (1, {'@': 529}), 89: (1, {'@': 529}), 94: (1, {'@': 529}), 81: (1, {'@': 529}), 47: (1, {'@': 529}), 90: (1, {'@': 529}), 34: (1, {'@': 529}), 91: (1, {'@': 529}), 92: (1, {'@': 529}), 40: (1, {'@': 529}), 82: (1, {'@': 529}), 2: (1, {'@': 529}), 95: (1, {'@': 529}), 75: (1, {'@': 529}), 27: (1, {'@': 529}), 70: (1, {'@': 529}), 96: (1, {'@': 529}), 97: (1, {'@': 529}), 43: (1, {'@': 529}), 98: (1, {'@': 529}), 3: (1, {'@': 529}), 15: (1, {'@': 529}), 0: (1, {'@': 529}), 1: (1, {'@': 529}), 8: (1, {'@': 529}), 10: (1, {'@': 529}), 12: (1, {'@': 529}), 13: (1, {'@': 529}), 16: (1, {'@': 529}), 18: (1, {'@': 529}), 20: (1, {'@': 529}), 21: (1, {'@': 529}), 22: (1, {'@': 529}), 23: (1, {'@': 529}), 25: (1, {'@': 529}), 26: (1, {'@': 529}), 28: (1, {'@': 529}), 9: (1, {'@': 529}), 4: (1, {'@': 529}), 5: (1, {'@': 529}), 6: (1, {'@': 529}), 7: (1, {'@': 529}), 17: (1, {'@': 529}), 24: (1, {'@': 529})}, 400: {15: (1, {'@': 306}), 85: (1, {'@': 432}), 11: (1, {'@': 432}), 176: (1, {'@': 432}), 86: (1, {'@': 432}), 14: (1, {'@': 432}), 87: (1, {'@': 432}), 174: (1, {'@': 432}), 93: (1, {'@': 432}), 177: (1, {'@': 432}), 153: (1, {'@': 432}), 80: (1, {'@': 432}), 88: (1, {'@': 432}), 4: (1, {'@': 432}), 58: (1, {'@': 432}), 89: (1, {'@': 432}), 94: (1, {'@': 432}), 81: (1, {'@': 432}), 47: (1, {'@': 432}), 90: (1, {'@': 432}), 34: (1, {'@': 432}), 91: (1, {'@': 432}), 92: (1, {'@': 432}), 82: (1, {'@': 432}), 2: (1, {'@': 432}), 95: (1, {'@': 432}), 27: (1, {'@': 432}), 70: (1, {'@': 432}), 96: (1, {'@': 432}), 97: (1, {'@': 432}), 43: (1, {'@': 432}), 98: (1, {'@': 432}), 3: (1, {'@': 432}), 5: (1, {'@': 432})}, 401: {30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 293), 61: (0, 581), 34: (0, 645), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 50: (0, 70), 38: (0, 601), 39: (0, 608), 44: (0, 321), 40: (0, 616), 41: (0, 689), 65: (0, 334), 45: (0, 736), 47: (0, 244), 66: (0, 354), 68: (0, 697), 57: (0, 359), 69: (0, 371), 71: (0, 716), 70: (0, 710), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 402: {100: (0, 353), 101: (0, 358), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 24: (0, 715), 108: (0, 722), 109: (0, 729), 45: (0, 736), 48: (0, 467), 49: (0, 483), 111: (0, 500), 112: (0, 507), 29: (0, 514), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 118: (0, 195), 119: (0, 205), 120: (0, 228), 47: (0, 244), 58: (0, 236), 121: (0, 260), 122: (0, 284), 54: (0, 293), 43: (0, 300), 62: (0, 308), 123: (0, 316), 44: (0, 321), 65: (0, 334), 50: (0, 337), 66: (0, 354), 57: (0, 359), 69: (0, 371), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 110: (0, 327), 38: (0, 601), 128: (0, 604), 39: (0, 608), 40: (0, 616), 129: (0, 613), 130: (0, 619), 131: (0, 622), 132: (0, 625), 46: (0, 631), 133: (0, 634), 134: (0, 637), 135: (0, 489), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 145: (0, 646), 146: (0, 661), 147: (0, 668), 63: (0, 675), 1: (0, 497), 148: (0, 682), 67: (0, 690), 68: (0, 697), 70: (0, 710), 71: (0, 716), 149: (0, 723), 73: (0, 737), 150: (0, 744), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 403: {0: (1, {'@': 239}), 1: (1, {'@': 239})}, 404: {85: (1, {'@': 434}), 11: (1, {'@': 434}), 176: (1, {'@': 434}), 86: (1, {'@': 434}), 14: (1, {'@': 434}), 87: (1, {'@': 434}), 174: (1, {'@': 434}), 93: (1, {'@': 434}), 177: (1, {'@': 434}), 153: (1, {'@': 434}), 80: (1, {'@': 434}), 19: (1, {'@': 434}), 88: (1, {'@': 434}), 58: (1, {'@': 434}), 89: (1, {'@': 434}), 94: (1, {'@': 434}), 81: (1, {'@': 434}), 47: (1, {'@': 434}), 90: (1, {'@': 434}), 34: (1, {'@': 434}), 91: (1, {'@': 434}), 92: (1, {'@': 434}), 82: (1, {'@': 434}), 2: (1, {'@': 434}), 95: (1, {'@': 434}), 27: (1, {'@': 434}), 70: (1, {'@': 434}), 96: (1, {'@': 434}), 97: (1, {'@': 434}), 43: (1, {'@': 434}), 98: (1, {'@': 434}), 3: (1, {'@': 434}), 15: (1, {'@': 434}), 0: (1, {'@': 434}), 1: (1, {'@': 434}), 8: (1, {'@': 434}), 10: (1, {'@': 434}), 12: (1, {'@': 434}), 13: (1, {'@': 434}), 16: (1, {'@': 434}), 18: (1, {'@': 434}), 20: (1, {'@': 434}), 21: (1, {'@': 434}), 22: (1, {'@': 434}), 23: (1, {'@': 434}), 25: (1, {'@': 434}), 26: (1, {'@': 434}), 28: (1, {'@': 434}), 9: (1, {'@': 434}), 4: (1, {'@': 434}), 5: (1, {'@': 434}), 6: (1, {'@': 434}), 7: (1, {'@': 434}), 17: (1, {'@': 434}), 24: (1, {'@': 434})}, 405: {252: (0, 264), 2: (0, 271), 3: (1, {'@': 295})}, 406: {85: (1, {'@': 594}), 8: (1, {'@': 594}), 9: (1, {'@': 594}), 11: (1, {'@': 594}), 12: (1, {'@': 594}), 176: (1, {'@': 594}), 86: (1, {'@': 594}), 87: (1, {'@': 594}), 15: (1, {'@': 594}), 0: (1, {'@': 594}), 88: (1, {'@': 594}), 4: (1, {'@': 594}), 58: (1, {'@': 594}), 89: (1, {'@': 594}), 90: (1, {'@': 594}), 20: (1, {'@': 594}), 6: (1, {'@': 594}), 91: (1, {'@': 594}), 92: (1, {'@': 594}), 21: (1, {'@': 594}), 82: (1, {'@': 594}), 2: (1, {'@': 594}), 25: (1, {'@': 594}), 26: (1, {'@': 594}), 27: (1, {'@': 594}), 70: (1, {'@': 594}), 3: (1, {'@': 594}), 7: (1, {'@': 594}), 10: (1, {'@': 594}), 13: (1, {'@': 594}), 14: (1, {'@': 594}), 93: (1, {'@': 594}), 177: (1, {'@': 594}), 16: (1, {'@': 594}), 153: (1, {'@': 594}), 17: (1, {'@': 594}), 18: (1, {'@': 594}), 19: (1, {'@': 594}), 1: (1, {'@': 594}), 94: (1, {'@': 594}), 81: (1, {'@': 594}), 34: (1, {'@': 594}), 22: (1, {'@': 594}), 23: (1, {'@': 594}), 24: (1, {'@': 594}), 95: (1, {'@': 594}), 28: (1, {'@': 594}), 96: (1, {'@': 594}), 97: (1, {'@': 594}), 98: (1, {'@': 594}), 5: (1, {'@': 594})}, 407: {100: (0, 353), 101: (0, 358), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 24: (0, 715), 108: (0, 722), 109: (0, 729), 45: (0, 736), 48: (0, 467), 49: (0, 483), 111: (0, 500), 112: (0, 507), 29: (0, 514), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 118: (0, 195), 110: (0, 333), 119: (0, 205), 120: (0, 228), 47: (0, 244), 58: (0, 236), 121: (0, 260), 122: (0, 284), 54: (0, 293), 43: (0, 300), 62: (0, 308), 123: (0, 316), 44: (0, 321), 65: (0, 334), 50: (0, 337), 66: (0, 354), 57: (0, 359), 69: (0, 371), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 40: (0, 616), 129: (0, 613), 130: (0, 619), 131: (0, 622), 132: (0, 625), 46: (0, 631), 133: (0, 634), 134: (0, 637), 135: (0, 489), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 145: (0, 646), 146: (0, 661), 147: (0, 668), 63: (0, 675), 1: (0, 497), 148: (0, 682), 67: (0, 690), 68: (0, 697), 70: (0, 710), 71: (0, 716), 149: (0, 723), 73: (0, 737), 150: (0, 744), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 408: {85: (1, {'@': 524}), 11: (1, {'@': 524}), 176: (1, {'@': 524}), 86: (1, {'@': 524}), 14: (1, {'@': 524}), 87: (1, {'@': 524}), 174: (1, {'@': 524}), 93: (1, {'@': 524}), 177: (1, {'@': 524}), 153: (1, {'@': 524}), 80: (1, {'@': 524}), 19: (1, {'@': 524}), 88: (1, {'@': 524}), 58: (1, {'@': 524}), 89: (1, {'@': 524}), 94: (1, {'@': 524}), 81: (1, {'@': 524}), 47: (1, {'@': 524}), 90: (1, {'@': 524}), 34: (1, {'@': 524}), 91: (1, {'@': 524}), 92: (1, {'@': 524}), 82: (1, {'@': 524}), 2: (1, {'@': 524}), 95: (1, {'@': 524}), 27: (1, {'@': 524}), 70: (1, {'@': 524}), 96: (1, {'@': 524}), 97: (1, {'@': 524}), 43: (1, {'@': 524}), 98: (1, {'@': 524}), 3: (1, {'@': 524}), 15: (1, {'@': 524}), 0: (1, {'@': 524}), 1: (1, {'@': 524}), 8: (1, {'@': 524}), 10: (1, {'@': 524}), 12: (1, {'@': 524}), 13: (1, {'@': 524}), 16: (1, {'@': 524}), 18: (1, {'@': 524}), 20: (1, {'@': 524}), 21: (1, {'@': 524}), 22: (1, {'@': 524}), 23: (1, {'@': 524}), 25: (1, {'@': 524}), 26: (1, {'@': 524}), 28: (1, {'@': 524}), 9: (1, {'@': 524}), 4: (1, {'@': 524}), 5: (1, {'@': 524}), 6: (1, {'@': 524}), 7: (1, {'@': 524}), 17: (1, {'@': 524}), 24: (1, {'@': 524})}, 409: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 47: (0, 244), 48: (0, 467), 49: (0, 483), 129: (0, 520), 50: (0, 337), 53: (0, 485), 74: (0, 528), 54: (0, 293), 55: (0, 586), 56: (0, 517), 81: (0, 525), 57: (0, 359), 59: (0, 557), 60: (0, 573), 61: (0, 581), 63: (0, 675), 196: (0, 249), 65: (0, 334), 66: (0, 354), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 410: {15: (0, 278)}, 411: {100: (0, 353), 101: (0, 358), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 24: (0, 715), 108: (0, 722), 109: (0, 729), 45: (0, 736), 48: (0, 467), 49: (0, 483), 111: (0, 500), 112: (0, 507), 29: (0, 514), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 118: (0, 195), 119: (0, 205), 120: (0, 228), 47: (0, 244), 58: (0, 236), 121: (0, 260), 122: (0, 284), 54: (0, 293), 43: (0, 300), 62: (0, 308), 123: (0, 316), 44: (0, 321), 65: (0, 334), 50: (0, 337), 66: (0, 354), 57: (0, 359), 69: (0, 371), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 40: (0, 616), 129: (0, 613), 130: (0, 619), 131: (0, 622), 132: (0, 625), 46: (0, 631), 133: (0, 634), 134: (0, 637), 135: (0, 489), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 110: (0, 428), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 145: (0, 646), 146: (0, 661), 147: (0, 668), 63: (0, 675), 1: (0, 497), 148: (0, 682), 67: (0, 690), 68: (0, 697), 70: (0, 710), 71: (0, 716), 149: (0, 723), 73: (0, 737), 150: (0, 744), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 412: {100: (0, 353), 101: (0, 358), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 24: (0, 715), 110: (0, 259), 108: (0, 722), 109: (0, 729), 45: (0, 736), 48: (0, 467), 49: (0, 483), 111: (0, 500), 112: (0, 507), 29: (0, 514), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 118: (0, 195), 119: (0, 205), 120: (0, 228), 47: (0, 244), 58: (0, 236), 121: (0, 260), 122: (0, 284), 54: (0, 293), 43: (0, 300), 62: (0, 308), 123: (0, 316), 44: (0, 321), 65: (0, 334), 50: (0, 337), 66: (0, 354), 57: (0, 359), 69: (0, 371), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 40: (0, 616), 129: (0, 613), 130: (0, 619), 131: (0, 622), 132: (0, 625), 46: (0, 631), 133: (0, 634), 134: (0, 637), 135: (0, 489), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 145: (0, 646), 146: (0, 661), 147: (0, 668), 63: (0, 675), 1: (0, 497), 148: (0, 682), 67: (0, 690), 68: (0, 697), 70: (0, 710), 71: (0, 716), 149: (0, 723), 73: (0, 737), 150: (0, 744), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 413: {6: (0, 331)}, 414: {15: (0, 425), 253: (0, 432)}, 415: {187: (0, 142), 232: (0, 251), 31: (0, 694)}, 416: {6: (1, {'@': 290})}, 417: {93: (0, 435)}, 418: {2: (0, 267), 0: (1, {'@': 273}), 1: (1, {'@': 273})}, 419: {100: (0, 353), 101: (0, 358), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 24: (0, 715), 108: (0, 722), 109: (0, 729), 45: (0, 736), 48: (0, 467), 49: (0, 483), 111: (0, 500), 112: (0, 507), 29: (0, 514), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 118: (0, 195), 119: (0, 205), 120: (0, 228), 47: (0, 244), 58: (0, 236), 121: (0, 260), 122: (0, 284), 54: (0, 293), 43: (0, 300), 62: (0, 308), 123: (0, 316), 44: (0, 321), 65: (0, 334), 50: (0, 337), 66: (0, 354), 57: (0, 359), 69: (0, 371), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 40: (0, 616), 129: (0, 613), 130: (0, 619), 131: (0, 622), 132: (0, 625), 110: (0, 344), 46: (0, 631), 133: (0, 634), 134: (0, 637), 135: (0, 489), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 145: (0, 646), 146: (0, 661), 147: (0, 668), 63: (0, 675), 1: (0, 497), 148: (0, 682), 67: (0, 690), 68: (0, 697), 70: (0, 710), 71: (0, 716), 149: (0, 723), 73: (0, 737), 150: (0, 744), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 420: {9: (1, {'@': 363}), 6: (1, {'@': 363}), 3: (1, {'@': 363})}, 421: {31: (0, 275)}, 422: {15: (0, 340)}, 423: {189: (0, 150), 81: (0, 155), 31: (0, 159), 190: (0, 164), 15: (0, 440), 254: (0, 442), 80: (0, 174), 233: (0, 185)}, 424: {2: (0, 283), 15: (1, {'@': 166})}, 425: {100: (0, 353), 101: (0, 358), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 24: (0, 715), 108: (0, 722), 109: (0, 729), 45: (0, 736), 48: (0, 467), 49: (0, 483), 111: (0, 500), 112: (0, 507), 29: (0, 514), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 118: (0, 195), 119: (0, 205), 120: (0, 228), 47: (0, 244), 58: (0, 236), 121: (0, 260), 122: (0, 284), 54: (0, 293), 43: (0, 300), 62: (0, 308), 123: (0, 316), 44: (0, 321), 65: (0, 334), 50: (0, 337), 66: (0, 354), 57: (0, 359), 69: (0, 371), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 40: (0, 616), 129: (0, 613), 130: (0, 619), 131: (0, 622), 132: (0, 625), 46: (0, 631), 133: (0, 634), 134: (0, 637), 135: (0, 489), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 145: (0, 646), 146: (0, 661), 147: (0, 668), 63: (0, 675), 1: (0, 497), 148: (0, 682), 67: (0, 690), 68: (0, 697), 70: (0, 710), 71: (0, 716), 149: (0, 723), 73: (0, 737), 150: (0, 744), 110: (0, 356), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 426: {9: (1, {'@': 362}), 6: (1, {'@': 362}), 3: (1, {'@': 362})}, 427: {81: (0, 155), 31: (0, 159), 190: (0, 291), 189: (0, 299), 233: (0, 307), 80: (0, 174), 15: (1, {'@': 169})}, 428: {33: (1, {'@': 126}), 151: (1, {'@': 126}), 68: (1, {'@': 126}), 53: (1, {'@': 126}), 138: (1, {'@': 126}), 102: (1, {'@': 126}), 142: (1, {'@': 126}), 124: (1, {'@': 126}), 14: (1, {'@': 126}), 136: (1, {'@': 126}), 37: (1, {'@': 126}), 55: (1, {'@': 126}), 60: (1, {'@': 126}), 66: (1, {'@': 126}), 121: (1, {'@': 126}), 152: (1, {'@': 126}), 56: (1, {'@': 126}), 32: (1, {'@': 126}), 153: (1, {'@': 126}), 44: (1, {'@': 126}), 4: (1, {'@': 126}), 76: (1, {'@': 126}), 1: (1, {'@': 126}), 72: (1, {'@': 126}), 100: (1, {'@': 126}), 58: (1, {'@': 126}), 81: (1, {'@': 126}), 47: (1, {'@': 126}), 43: (1, {'@': 126}), 107: (1, {'@': 126}), 117: (1, {'@': 126}), 154: (1, {'@': 126}), 116: (1, {'@': 126}), 67: (1, {'@': 126}), 125: (1, {'@': 126}), 34: (1, {'@': 126}), 38: (1, {'@': 126}), 40: (1, {'@': 126}), 73: (1, {'@': 126}), 24: (1, {'@': 126}), 155: (1, {'@': 126}), 122: (1, {'@': 126}), 77: (1, {'@': 126}), 75: (1, {'@': 126}), 146: (1, {'@': 126}), 164: (1, {'@': 126}), 156: (1, {'@': 126}), 5: (1, {'@': 126}), 134: (1, {'@': 126}), 70: (1, {'@': 126}), 71: (1, {'@': 126}), 157: (1, {'@': 126}), 158: (1, {'@': 126}), 145: (1, {'@': 126}), 31: (1, {'@': 126}), 106: (1, {'@': 126}), 126: (1, {'@': 126}), 65: (1, {'@': 126}), 113: (1, {'@': 126})}, 429: {6: (1, {'@': 518}), 3: (1, {'@': 518}), 9: (1, {'@': 518})}, 430: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 64: (0, 121), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 431: {198: (0, 315), 2: (0, 106), 15: (1, {'@': 180})}, 432: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 64: (0, 351), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 433: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 53: (0, 485), 54: (0, 293), 55: (0, 586), 52: (0, 438), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 434: {80: (0, 174), 190: (0, 111), 31: (0, 159), 189: (0, 299), 15: (1, {'@': 185})}, 435: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 68: (0, 697), 69: (0, 371), 52: (0, 363), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 436: {100: (0, 353), 101: (0, 358), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 35: (0, 652), 34: (0, 645), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 24: (0, 715), 108: (0, 722), 45: (0, 736), 109: (0, 729), 48: (0, 467), 49: (0, 483), 111: (0, 500), 29: (0, 514), 112: (0, 507), 110: (0, 449), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 118: (0, 195), 119: (0, 205), 120: (0, 228), 47: (0, 244), 58: (0, 236), 121: (0, 260), 122: (0, 284), 43: (0, 300), 54: (0, 293), 62: (0, 308), 123: (0, 316), 44: (0, 321), 65: (0, 334), 50: (0, 337), 66: (0, 354), 57: (0, 359), 69: (0, 371), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 40: (0, 616), 129: (0, 613), 130: (0, 619), 131: (0, 622), 132: (0, 625), 46: (0, 631), 133: (0, 634), 134: (0, 637), 135: (0, 489), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 145: (0, 646), 146: (0, 661), 147: (0, 668), 63: (0, 675), 1: (0, 497), 148: (0, 682), 67: (0, 690), 68: (0, 697), 70: (0, 710), 71: (0, 716), 149: (0, 723), 73: (0, 737), 150: (0, 744), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 437: {2: (0, 116), 15: (1, {'@': 183})}, 438: {9: (1, {'@': 517}), 4: (1, {'@': 517}), 5: (1, {'@': 517}), 6: (1, {'@': 517}), 3: (1, {'@': 517}), 14: (1, {'@': 517})}, 439: {100: (0, 353), 101: (0, 358), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 76: (0, 757), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 24: (0, 715), 108: (0, 722), 109: (0, 729), 45: (0, 736), 48: (0, 467), 49: (0, 483), 111: (0, 500), 112: (0, 507), 29: (0, 514), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 118: (0, 195), 119: (0, 205), 120: (0, 228), 47: (0, 244), 58: (0, 236), 121: (0, 260), 122: (0, 284), 54: (0, 293), 43: (0, 300), 62: (0, 308), 123: (0, 316), 44: (0, 321), 65: (0, 334), 50: (0, 337), 66: (0, 354), 57: (0, 359), 69: (0, 371), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 40: (0, 616), 129: (0, 613), 130: (0, 619), 131: (0, 622), 132: (0, 625), 46: (0, 631), 133: (0, 634), 134: (0, 637), 135: (0, 489), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 145: (0, 646), 146: (0, 661), 147: (0, 668), 63: (0, 675), 1: (0, 497), 148: (0, 682), 67: (0, 690), 68: (0, 697), 70: (0, 710), 71: (0, 716), 149: (0, 723), 73: (0, 737), 150: (0, 744), 110: (0, 452), 77: (0, 596), 64: (0, 599)}, 440: {249: (0, 420), 29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 67: (0, 423), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 53: (0, 485), 52: (0, 426), 54: (0, 293), 55: (0, 586), 56: (0, 517), 250: (0, 369), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 441: {15: (0, 446)}, 442: {15: (0, 375)}, 443: {2: (1, {'@': 160}), 3: (1, {'@': 160}), 19: (1, {'@': 160}), 0: (1, {'@': 160}), 1: (1, {'@': 160}), 15: (1, {'@': 160}), 8: (1, {'@': 160}), 10: (1, {'@': 160}), 12: (1, {'@': 160}), 20: (1, {'@': 160}), 13: (1, {'@': 160}), 21: (1, {'@': 160}), 22: (1, {'@': 160}), 23: (1, {'@': 160}), 25: (1, {'@': 160}), 26: (1, {'@': 160}), 28: (1, {'@': 160}), 16: (1, {'@': 160}), 18: (1, {'@': 160}), 5: (1, {'@': 160}), 4: (1, {'@': 160}), 6: (1, {'@': 160}), 9: (1, {'@': 160}), 17: (1, {'@': 160}), 24: (1, {'@': 160})}, 444: {174: (0, 44), 43: (0, 51), 47: (0, 57), 0: (1, {'@': 305}), 1: (1, {'@': 305})}, 445: {2: (0, 126), 15: (1, {'@': 188})}, 446: {100: (0, 353), 101: (0, 358), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 24: (0, 715), 108: (0, 722), 109: (0, 729), 45: (0, 736), 48: (0, 467), 49: (0, 483), 111: (0, 500), 112: (0, 507), 29: (0, 514), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 118: (0, 195), 119: (0, 205), 120: (0, 228), 47: (0, 244), 58: (0, 236), 121: (0, 260), 122: (0, 284), 54: (0, 293), 43: (0, 300), 62: (0, 308), 123: (0, 316), 44: (0, 321), 65: (0, 334), 50: (0, 337), 66: (0, 354), 57: (0, 359), 69: (0, 371), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 40: (0, 616), 129: (0, 613), 130: (0, 619), 131: (0, 622), 132: (0, 625), 46: (0, 631), 133: (0, 634), 134: (0, 637), 135: (0, 489), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 145: (0, 646), 146: (0, 661), 147: (0, 668), 63: (0, 675), 1: (0, 497), 148: (0, 682), 110: (0, 391), 67: (0, 690), 68: (0, 697), 70: (0, 710), 71: (0, 716), 149: (0, 723), 73: (0, 737), 150: (0, 744), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 447: {3: (0, 455)}, 448: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 64: (0, 131), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 449: {7: (0, 381), 33: (1, {'@': 341}), 151: (1, {'@': 341}), 68: (1, {'@': 341}), 53: (1, {'@': 341}), 138: (1, {'@': 341}), 102: (1, {'@': 341}), 142: (1, {'@': 341}), 14: (1, {'@': 341}), 37: (1, {'@': 341}), 55: (1, {'@': 341}), 124: (1, {'@': 341}), 136: (1, {'@': 341}), 60: (1, {'@': 341}), 66: (1, {'@': 341}), 121: (1, {'@': 341}), 152: (1, {'@': 341}), 56: (1, {'@': 341}), 32: (1, {'@': 341}), 153: (1, {'@': 341}), 44: (1, {'@': 341}), 4: (1, {'@': 341}), 76: (1, {'@': 341}), 72: (1, {'@': 341}), 100: (1, {'@': 341}), 65: (1, {'@': 341}), 58: (1, {'@': 341}), 81: (1, {'@': 341}), 47: (1, {'@': 341}), 107: (1, {'@': 341}), 117: (1, {'@': 341}), 154: (1, {'@': 341}), 116: (1, {'@': 341}), 67: (1, {'@': 341}), 125: (1, {'@': 341}), 34: (1, {'@': 341}), 38: (1, {'@': 341}), 40: (1, {'@': 341}), 24: (1, {'@': 341}), 155: (1, {'@': 341}), 73: (1, {'@': 341}), 75: (1, {'@': 341}), 77: (1, {'@': 341}), 146: (1, {'@': 341}), 164: (1, {'@': 341}), 156: (1, {'@': 341}), 5: (1, {'@': 341}), 157: (1, {'@': 341}), 134: (1, {'@': 341}), 70: (1, {'@': 341}), 71: (1, {'@': 341}), 43: (1, {'@': 341}), 145: (1, {'@': 341}), 31: (1, {'@': 341}), 106: (1, {'@': 341}), 126: (1, {'@': 341}), 122: (1, {'@': 341}), 113: (1, {'@': 341}), 1: (1, {'@': 341}), 158: (1, {'@': 341})}, 450: {2: (0, 458), 3: (1, {'@': 504})}, 451: {31: (0, 136)}, 452: {33: (1, {'@': 490}), 151: (1, {'@': 490}), 68: (1, {'@': 490}), 53: (1, {'@': 490}), 138: (1, {'@': 490}), 102: (1, {'@': 490}), 142: (1, {'@': 490}), 14: (1, {'@': 490}), 37: (1, {'@': 490}), 55: (1, {'@': 490}), 124: (1, {'@': 490}), 136: (1, {'@': 490}), 60: (1, {'@': 490}), 66: (1, {'@': 490}), 121: (1, {'@': 490}), 152: (1, {'@': 490}), 56: (1, {'@': 490}), 32: (1, {'@': 490}), 153: (1, {'@': 490}), 44: (1, {'@': 490}), 4: (1, {'@': 490}), 76: (1, {'@': 490}), 72: (1, {'@': 490}), 100: (1, {'@': 490}), 65: (1, {'@': 490}), 58: (1, {'@': 490}), 81: (1, {'@': 490}), 47: (1, {'@': 490}), 107: (1, {'@': 490}), 117: (1, {'@': 490}), 154: (1, {'@': 490}), 116: (1, {'@': 490}), 67: (1, {'@': 490}), 125: (1, {'@': 490}), 34: (1, {'@': 490}), 38: (1, {'@': 490}), 40: (1, {'@': 490}), 24: (1, {'@': 490}), 155: (1, {'@': 490}), 73: (1, {'@': 490}), 75: (1, {'@': 490}), 77: (1, {'@': 490}), 146: (1, {'@': 490}), 164: (1, {'@': 490}), 156: (1, {'@': 490}), 5: (1, {'@': 490}), 157: (1, {'@': 490}), 134: (1, {'@': 490}), 70: (1, {'@': 490}), 71: (1, {'@': 490}), 43: (1, {'@': 490}), 145: (1, {'@': 490}), 31: (1, {'@': 490}), 106: (1, {'@': 490}), 126: (1, {'@': 490}), 122: (1, {'@': 490}), 113: (1, {'@': 490}), 1: (1, {'@': 490}), 158: (1, {'@': 490})}, 453: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 80: (0, 658), 41: (0, 689), 166: (0, 594), 42: (0, 696), 43: (0, 300), 64: (0, 474), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 168: (0, 597), 167: (0, 482), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 81: (0, 702), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 454: {2: (1, {'@': 566}), 0: (1, {'@': 566}), 1: (1, {'@': 566})}, 455: {19: (0, 387)}, 456: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 80: (0, 658), 41: (0, 689), 42: (0, 696), 43: (0, 300), 64: (0, 474), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 167: (0, 600), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 168: (0, 603), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 457: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596), 64: (0, 141)}, 458: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 80: (0, 658), 41: (0, 689), 42: (0, 696), 43: (0, 300), 64: (0, 474), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 168: (0, 397), 57: (0, 359), 58: (0, 236), 59: (0, 557), 167: (0, 600), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 459: {2: (1, {'@': 612}), 3: (1, {'@': 612})}, 460: {0: (1, {'@': 555}), 19: (1, {'@': 555}), 1: (1, {'@': 555})}, 461: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 64: (0, 655), 199: (0, 272), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 200: (0, 670), 76: (0, 757), 77: (0, 596), 0: (1, {'@': 247}), 1: (1, {'@': 247})}, 462: {86: (0, 686), 85: (1, {'@': 374}), 58: (1, {'@': 374}), 11: (1, {'@': 374}), 90: (1, {'@': 374}), 14: (1, {'@': 374}), 92: (1, {'@': 374}), 87: (1, {'@': 374}), 2: (1, {'@': 374}), 93: (1, {'@': 374}), 95: (1, {'@': 374}), 27: (1, {'@': 374}), 88: (1, {'@': 374}), 96: (1, {'@': 374}), 98: (1, {'@': 374}), 3: (1, {'@': 374}), 19: (1, {'@': 374}), 15: (1, {'@': 374}), 0: (1, {'@': 374}), 1: (1, {'@': 374}), 8: (1, {'@': 374}), 10: (1, {'@': 374}), 12: (1, {'@': 374}), 20: (1, {'@': 374}), 13: (1, {'@': 374}), 21: (1, {'@': 374}), 22: (1, {'@': 374}), 23: (1, {'@': 374}), 25: (1, {'@': 374}), 26: (1, {'@': 374}), 28: (1, {'@': 374}), 16: (1, {'@': 374}), 18: (1, {'@': 374}), 9: (1, {'@': 374}), 4: (1, {'@': 374}), 5: (1, {'@': 374}), 6: (1, {'@': 374}), 7: (1, {'@': 374}), 17: (1, {'@': 374}), 24: (1, {'@': 374})}, 463: {100: (0, 353), 101: (0, 358), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 35: (0, 652), 34: (0, 645), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 24: (0, 715), 108: (0, 722), 45: (0, 736), 109: (0, 729), 48: (0, 467), 49: (0, 483), 111: (0, 500), 29: (0, 514), 112: (0, 507), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 118: (0, 195), 119: (0, 205), 120: (0, 228), 47: (0, 244), 58: (0, 236), 121: (0, 260), 122: (0, 284), 43: (0, 300), 54: (0, 293), 62: (0, 308), 123: (0, 316), 44: (0, 321), 65: (0, 334), 50: (0, 337), 66: (0, 354), 57: (0, 359), 69: (0, 371), 124: (0, 384), 110: (0, 81), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 40: (0, 616), 129: (0, 613), 130: (0, 619), 131: (0, 622), 132: (0, 625), 46: (0, 631), 133: (0, 634), 134: (0, 637), 135: (0, 489), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 145: (0, 646), 146: (0, 661), 147: (0, 668), 63: (0, 675), 1: (0, 497), 148: (0, 682), 67: (0, 690), 68: (0, 697), 70: (0, 710), 71: (0, 716), 149: (0, 723), 73: (0, 737), 150: (0, 744), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 464: {33: (1, {'@': 229}), 68: (1, {'@': 229}), 53: (1, {'@': 229}), 37: (1, {'@': 229}), 55: (1, {'@': 229}), 60: (1, {'@': 229}), 66: (1, {'@': 229}), 56: (1, {'@': 229}), 32: (1, {'@': 229}), 44: (1, {'@': 229}), 76: (1, {'@': 229}), 72: (1, {'@': 229}), 58: (1, {'@': 229}), 47: (1, {'@': 229}), 107: (1, {'@': 229}), 67: (1, {'@': 229}), 34: (1, {'@': 229}), 38: (1, {'@': 229}), 40: (1, {'@': 229}), 73: (1, {'@': 229}), 75: (1, {'@': 229}), 77: (1, {'@': 229}), 70: (1, {'@': 229}), 71: (1, {'@': 229}), 43: (1, {'@': 229}), 31: (1, {'@': 229}), 65: (1, {'@': 229})}, 465: {7: (1, {'@': 193}), 33: (1, {'@': 193}), 151: (1, {'@': 193}), 68: (1, {'@': 193}), 53: (1, {'@': 193}), 138: (1, {'@': 193}), 102: (1, {'@': 193}), 142: (1, {'@': 193}), 124: (1, {'@': 193}), 14: (1, {'@': 193}), 136: (1, {'@': 193}), 37: (1, {'@': 193}), 55: (1, {'@': 193}), 60: (1, {'@': 193}), 66: (1, {'@': 193}), 113: (1, {'@': 193}), 121: (1, {'@': 193}), 152: (1, {'@': 193}), 56: (1, {'@': 193}), 32: (1, {'@': 193}), 153: (1, {'@': 193}), 44: (1, {'@': 193}), 4: (1, {'@': 193}), 76: (1, {'@': 193}), 1: (1, {'@': 193}), 72: (1, {'@': 193}), 100: (1, {'@': 193}), 58: (1, {'@': 193}), 81: (1, {'@': 193}), 47: (1, {'@': 193}), 107: (1, {'@': 193}), 117: (1, {'@': 193}), 154: (1, {'@': 193}), 116: (1, {'@': 193}), 67: (1, {'@': 193}), 125: (1, {'@': 193}), 34: (1, {'@': 193}), 38: (1, {'@': 193}), 40: (1, {'@': 193}), 73: (1, {'@': 193}), 24: (1, {'@': 193}), 155: (1, {'@': 193}), 122: (1, {'@': 193}), 77: (1, {'@': 193}), 75: (1, {'@': 193}), 146: (1, {'@': 193}), 164: (1, {'@': 193}), 156: (1, {'@': 193}), 134: (1, {'@': 193}), 157: (1, {'@': 193}), 70: (1, {'@': 193}), 71: (1, {'@': 193}), 158: (1, {'@': 193}), 43: (1, {'@': 193}), 145: (1, {'@': 193}), 31: (1, {'@': 193}), 106: (1, {'@': 193}), 126: (1, {'@': 193}), 65: (1, {'@': 193}), 5: (1, {'@': 193}), 162: (1, {'@': 193}), 163: (1, {'@': 193}), 175: (1, {'@': 193})}, 466: {3: (1, {'@': 509})}, 467: {255: (0, 462), 86: (0, 470), 85: (1, {'@': 375}), 58: (1, {'@': 375}), 11: (1, {'@': 375}), 90: (1, {'@': 375}), 14: (1, {'@': 375}), 92: (1, {'@': 375}), 87: (1, {'@': 375}), 2: (1, {'@': 375}), 93: (1, {'@': 375}), 95: (1, {'@': 375}), 27: (1, {'@': 375}), 88: (1, {'@': 375}), 96: (1, {'@': 375}), 98: (1, {'@': 375}), 3: (1, {'@': 375}), 19: (1, {'@': 375}), 15: (1, {'@': 375}), 0: (1, {'@': 375}), 1: (1, {'@': 375}), 8: (1, {'@': 375}), 10: (1, {'@': 375}), 12: (1, {'@': 375}), 20: (1, {'@': 375}), 13: (1, {'@': 375}), 21: (1, {'@': 375}), 22: (1, {'@': 375}), 23: (1, {'@': 375}), 25: (1, {'@': 375}), 26: (1, {'@': 375}), 28: (1, {'@': 375}), 16: (1, {'@': 375}), 18: (1, {'@': 375}), 9: (1, {'@': 375}), 4: (1, {'@': 375}), 5: (1, {'@': 375}), 6: (1, {'@': 375}), 7: (1, {'@': 375}), 17: (1, {'@': 375}), 24: (1, {'@': 375})}, 468: {33: (1, {'@': 344}), 151: (1, {'@': 344}), 68: (1, {'@': 344}), 53: (1, {'@': 344}), 138: (1, {'@': 344}), 102: (1, {'@': 344}), 142: (1, {'@': 344}), 14: (1, {'@': 344}), 37: (1, {'@': 344}), 55: (1, {'@': 344}), 124: (1, {'@': 344}), 136: (1, {'@': 344}), 60: (1, {'@': 344}), 66: (1, {'@': 344}), 121: (1, {'@': 344}), 152: (1, {'@': 344}), 56: (1, {'@': 344}), 32: (1, {'@': 344}), 153: (1, {'@': 344}), 44: (1, {'@': 344}), 4: (1, {'@': 344}), 76: (1, {'@': 344}), 72: (1, {'@': 344}), 100: (1, {'@': 344}), 65: (1, {'@': 344}), 58: (1, {'@': 344}), 81: (1, {'@': 344}), 47: (1, {'@': 344}), 107: (1, {'@': 344}), 117: (1, {'@': 344}), 154: (1, {'@': 344}), 116: (1, {'@': 344}), 67: (1, {'@': 344}), 125: (1, {'@': 344}), 34: (1, {'@': 344}), 38: (1, {'@': 344}), 40: (1, {'@': 344}), 24: (1, {'@': 344}), 155: (1, {'@': 344}), 73: (1, {'@': 344}), 75: (1, {'@': 344}), 77: (1, {'@': 344}), 146: (1, {'@': 344}), 164: (1, {'@': 344}), 156: (1, {'@': 344}), 5: (1, {'@': 344}), 157: (1, {'@': 344}), 134: (1, {'@': 344}), 70: (1, {'@': 344}), 71: (1, {'@': 344}), 43: (1, {'@': 344}), 145: (1, {'@': 344}), 31: (1, {'@': 344}), 106: (1, {'@': 344}), 126: (1, {'@': 344}), 122: (1, {'@': 344}), 113: (1, {'@': 344}), 1: (1, {'@': 344}), 158: (1, {'@': 344})}, 469: {0: (1, {'@': 196}), 1: (1, {'@': 196})}, 470: {29: (0, 514), 59: (0, 557), 49: (0, 483), 30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 293), 61: (0, 581), 34: (0, 645), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 48: (0, 508), 38: (0, 601), 39: (0, 608), 44: (0, 321), 40: (0, 616), 41: (0, 689), 42: (0, 696), 65: (0, 334), 50: (0, 337), 45: (0, 736), 47: (0, 244), 66: (0, 354), 68: (0, 697), 57: (0, 359), 69: (0, 371), 70: (0, 710), 71: (0, 716), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 471: {85: (1, {'@': 411}), 58: (1, {'@': 411}), 89: (1, {'@': 411}), 94: (1, {'@': 411}), 11: (1, {'@': 411}), 81: (1, {'@': 411}), 90: (1, {'@': 411}), 176: (1, {'@': 411}), 86: (1, {'@': 411}), 14: (1, {'@': 411}), 34: (1, {'@': 411}), 91: (1, {'@': 411}), 92: (1, {'@': 411}), 87: (1, {'@': 411}), 82: (1, {'@': 411}), 2: (1, {'@': 411}), 93: (1, {'@': 411}), 95: (1, {'@': 411}), 27: (1, {'@': 411}), 177: (1, {'@': 411}), 88: (1, {'@': 411}), 153: (1, {'@': 411}), 70: (1, {'@': 411}), 96: (1, {'@': 411}), 97: (1, {'@': 411}), 98: (1, {'@': 411}), 3: (1, {'@': 411}), 19: (1, {'@': 411}), 15: (1, {'@': 411}), 0: (1, {'@': 411}), 1: (1, {'@': 411}), 8: (1, {'@': 411}), 10: (1, {'@': 411}), 12: (1, {'@': 411}), 13: (1, {'@': 411}), 16: (1, {'@': 411}), 18: (1, {'@': 411}), 20: (1, {'@': 411}), 21: (1, {'@': 411}), 22: (1, {'@': 411}), 23: (1, {'@': 411}), 25: (1, {'@': 411}), 26: (1, {'@': 411}), 28: (1, {'@': 411}), 9: (1, {'@': 411}), 4: (1, {'@': 411}), 5: (1, {'@': 411}), 6: (1, {'@': 411}), 7: (1, {'@': 411}), 17: (1, {'@': 411}), 24: (1, {'@': 411})}, 472: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 101: (0, 238), 40: (0, 616), 129: (0, 613), 41: (0, 689), 42: (0, 696), 43: (0, 300), 107: (0, 703), 108: (0, 722), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 139: (0, 246), 54: (0, 293), 55: (0, 586), 56: (0, 517), 81: (0, 525), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 473: {0: (1, {'@': 550}), 1: (1, {'@': 550})}, 474: {19: (0, 140), 2: (1, {'@': 514}), 3: (1, {'@': 514})}, 475: {33: (1, {'@': 322}), 151: (1, {'@': 322}), 68: (1, {'@': 322}), 53: (1, {'@': 322}), 138: (1, {'@': 322}), 102: (1, {'@': 322}), 142: (1, {'@': 322}), 14: (1, {'@': 322}), 37: (1, {'@': 322}), 55: (1, {'@': 322}), 124: (1, {'@': 322}), 136: (1, {'@': 322}), 60: (1, {'@': 322}), 66: (1, {'@': 322}), 121: (1, {'@': 322}), 152: (1, {'@': 322}), 56: (1, {'@': 322}), 32: (1, {'@': 322}), 153: (1, {'@': 322}), 44: (1, {'@': 322}), 4: (1, {'@': 322}), 76: (1, {'@': 322}), 72: (1, {'@': 322}), 100: (1, {'@': 322}), 65: (1, {'@': 322}), 58: (1, {'@': 322}), 81: (1, {'@': 322}), 47: (1, {'@': 322}), 107: (1, {'@': 322}), 117: (1, {'@': 322}), 154: (1, {'@': 322}), 116: (1, {'@': 322}), 67: (1, {'@': 322}), 125: (1, {'@': 322}), 34: (1, {'@': 322}), 38: (1, {'@': 322}), 40: (1, {'@': 322}), 24: (1, {'@': 322}), 155: (1, {'@': 322}), 73: (1, {'@': 322}), 75: (1, {'@': 322}), 77: (1, {'@': 322}), 146: (1, {'@': 322}), 164: (1, {'@': 322}), 156: (1, {'@': 322}), 5: (1, {'@': 322}), 157: (1, {'@': 322}), 134: (1, {'@': 322}), 70: (1, {'@': 322}), 71: (1, {'@': 322}), 43: (1, {'@': 322}), 145: (1, {'@': 322}), 31: (1, {'@': 322}), 106: (1, {'@': 322}), 126: (1, {'@': 322}), 122: (1, {'@': 322}), 113: (1, {'@': 322}), 1: (1, {'@': 322}), 158: (1, {'@': 322})}, 476: {7: (1, {'@': 573}), 33: (1, {'@': 573}), 151: (1, {'@': 573}), 68: (1, {'@': 573}), 162: (1, {'@': 573}), 53: (1, {'@': 573}), 138: (1, {'@': 573}), 102: (1, {'@': 573}), 142: (1, {'@': 573}), 124: (1, {'@': 573}), 14: (1, {'@': 573}), 136: (1, {'@': 573}), 37: (1, {'@': 573}), 55: (1, {'@': 573}), 60: (1, {'@': 573}), 66: (1, {'@': 573}), 113: (1, {'@': 573}), 121: (1, {'@': 573}), 152: (1, {'@': 573}), 56: (1, {'@': 573}), 32: (1, {'@': 573}), 153: (1, {'@': 573}), 44: (1, {'@': 573}), 4: (1, {'@': 573}), 76: (1, {'@': 573}), 1: (1, {'@': 573}), 72: (1, {'@': 573}), 100: (1, {'@': 573}), 58: (1, {'@': 573}), 81: (1, {'@': 573}), 47: (1, {'@': 573}), 107: (1, {'@': 573}), 117: (1, {'@': 573}), 154: (1, {'@': 573}), 116: (1, {'@': 573}), 163: (1, {'@': 573}), 67: (1, {'@': 573}), 125: (1, {'@': 573}), 34: (1, {'@': 573}), 38: (1, {'@': 573}), 40: (1, {'@': 573}), 73: (1, {'@': 573}), 24: (1, {'@': 573}), 155: (1, {'@': 573}), 122: (1, {'@': 573}), 77: (1, {'@': 573}), 75: (1, {'@': 573}), 146: (1, {'@': 573}), 164: (1, {'@': 573}), 156: (1, {'@': 573}), 134: (1, {'@': 573}), 157: (1, {'@': 573}), 70: (1, {'@': 573}), 71: (1, {'@': 573}), 158: (1, {'@': 573}), 43: (1, {'@': 573}), 145: (1, {'@': 573}), 31: (1, {'@': 573}), 106: (1, {'@': 573}), 126: (1, {'@': 573}), 65: (1, {'@': 573}), 5: (1, {'@': 573})}, 477: {0: (1, {'@': 238}), 1: (1, {'@': 238})}, 478: {59: (0, 557), 29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 293), 61: (0, 581), 34: (0, 645), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 38: (0, 601), 49: (0, 515), 39: (0, 608), 44: (0, 321), 40: (0, 616), 41: (0, 689), 42: (0, 696), 65: (0, 334), 50: (0, 337), 45: (0, 736), 47: (0, 244), 66: (0, 354), 68: (0, 697), 57: (0, 359), 69: (0, 371), 70: (0, 710), 71: (0, 716), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 479: {166: (0, 183), 29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 167: (0, 644), 37: (0, 674), 38: (0, 601), 168: (0, 651), 39: (0, 608), 80: (0, 658), 40: (0, 616), 171: (0, 88), 41: (0, 689), 42: (0, 696), 43: (0, 300), 64: (0, 666), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 169: (0, 672), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 3: (0, 92), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 77: (0, 596), 70: (0, 710), 71: (0, 716), 170: (0, 688), 72: (0, 390), 73: (0, 737), 81: (0, 702), 74: (0, 394), 75: (0, 399), 76: (0, 757)}, 480: {33: (1, {'@': 227}), 68: (1, {'@': 227}), 53: (1, {'@': 227}), 37: (1, {'@': 227}), 55: (1, {'@': 227}), 60: (1, {'@': 227}), 66: (1, {'@': 227}), 56: (1, {'@': 227}), 32: (1, {'@': 227}), 44: (1, {'@': 227}), 76: (1, {'@': 227}), 72: (1, {'@': 227}), 58: (1, {'@': 227}), 47: (1, {'@': 227}), 107: (1, {'@': 227}), 67: (1, {'@': 227}), 34: (1, {'@': 227}), 38: (1, {'@': 227}), 40: (1, {'@': 227}), 73: (1, {'@': 227}), 75: (1, {'@': 227}), 77: (1, {'@': 227}), 70: (1, {'@': 227}), 71: (1, {'@': 227}), 43: (1, {'@': 227}), 31: (1, {'@': 227}), 65: (1, {'@': 227})}, 481: {212: (0, 97), 162: (0, 210), 256: (0, 218), 257: (0, 226), 211: (0, 234), 163: (0, 242)}, 482: {2: (1, {'@': 610}), 3: (1, {'@': 610})}, 483: {89: (0, 478), 258: (0, 486), 85: (1, {'@': 377}), 58: (1, {'@': 377}), 11: (1, {'@': 377}), 90: (1, {'@': 377}), 86: (1, {'@': 377}), 14: (1, {'@': 377}), 92: (1, {'@': 377}), 87: (1, {'@': 377}), 19: (1, {'@': 377}), 2: (1, {'@': 377}), 93: (1, {'@': 377}), 95: (1, {'@': 377}), 27: (1, {'@': 377}), 96: (1, {'@': 377}), 98: (1, {'@': 377}), 3: (1, {'@': 377}), 88: (1, {'@': 377}), 15: (1, {'@': 377}), 0: (1, {'@': 377}), 1: (1, {'@': 377}), 8: (1, {'@': 377}), 10: (1, {'@': 377}), 12: (1, {'@': 377}), 13: (1, {'@': 377}), 16: (1, {'@': 377}), 18: (1, {'@': 377}), 20: (1, {'@': 377}), 21: (1, {'@': 377}), 22: (1, {'@': 377}), 23: (1, {'@': 377}), 25: (1, {'@': 377}), 26: (1, {'@': 377}), 28: (1, {'@': 377}), 9: (1, {'@': 377}), 5: (1, {'@': 377}), 4: (1, {'@': 377}), 6: (1, {'@': 377}), 7: (1, {'@': 377}), 17: (1, {'@': 377}), 24: (1, {'@': 377})}, 484: {100: (0, 353), 101: (0, 358), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 24: (0, 715), 108: (0, 722), 109: (0, 729), 45: (0, 736), 48: (0, 467), 49: (0, 483), 111: (0, 500), 112: (0, 507), 29: (0, 514), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 110: (0, 50), 55: (0, 586), 118: (0, 195), 119: (0, 205), 120: (0, 228), 47: (0, 244), 58: (0, 236), 121: (0, 260), 122: (0, 284), 54: (0, 293), 43: (0, 300), 62: (0, 308), 123: (0, 316), 44: (0, 321), 65: (0, 334), 50: (0, 337), 66: (0, 354), 57: (0, 359), 69: (0, 371), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 40: (0, 616), 129: (0, 613), 130: (0, 619), 131: (0, 622), 132: (0, 625), 46: (0, 631), 133: (0, 634), 134: (0, 637), 135: (0, 489), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 145: (0, 646), 146: (0, 661), 147: (0, 668), 63: (0, 675), 1: (0, 497), 148: (0, 682), 67: (0, 690), 68: (0, 697), 70: (0, 710), 71: (0, 716), 149: (0, 723), 73: (0, 737), 150: (0, 744), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 485: {85: (1, {'@': 528}), 53: (1, {'@': 528}), 11: (1, {'@': 528}), 176: (1, {'@': 528}), 86: (1, {'@': 528}), 14: (1, {'@': 528}), 37: (1, {'@': 528}), 87: (1, {'@': 528}), 174: (1, {'@': 528}), 93: (1, {'@': 528}), 177: (1, {'@': 528}), 56: (1, {'@': 528}), 153: (1, {'@': 528}), 80: (1, {'@': 528}), 19: (1, {'@': 528}), 88: (1, {'@': 528}), 76: (1, {'@': 528}), 58: (1, {'@': 528}), 89: (1, {'@': 528}), 94: (1, {'@': 528}), 81: (1, {'@': 528}), 47: (1, {'@': 528}), 90: (1, {'@': 528}), 34: (1, {'@': 528}), 91: (1, {'@': 528}), 92: (1, {'@': 528}), 40: (1, {'@': 528}), 82: (1, {'@': 528}), 2: (1, {'@': 528}), 95: (1, {'@': 528}), 75: (1, {'@': 528}), 27: (1, {'@': 528}), 70: (1, {'@': 528}), 96: (1, {'@': 528}), 97: (1, {'@': 528}), 43: (1, {'@': 528}), 98: (1, {'@': 528}), 3: (1, {'@': 528}), 15: (1, {'@': 528}), 0: (1, {'@': 528}), 1: (1, {'@': 528}), 8: (1, {'@': 528}), 10: (1, {'@': 528}), 12: (1, {'@': 528}), 13: (1, {'@': 528}), 16: (1, {'@': 528}), 18: (1, {'@': 528}), 20: (1, {'@': 528}), 21: (1, {'@': 528}), 22: (1, {'@': 528}), 23: (1, {'@': 528}), 25: (1, {'@': 528}), 26: (1, {'@': 528}), 28: (1, {'@': 528}), 9: (1, {'@': 528}), 4: (1, {'@': 528}), 5: (1, {'@': 528}), 6: (1, {'@': 528}), 7: (1, {'@': 528}), 17: (1, {'@': 528}), 24: (1, {'@': 528})}, 486: {89: (0, 523), 85: (1, {'@': 376}), 58: (1, {'@': 376}), 11: (1, {'@': 376}), 90: (1, {'@': 376}), 86: (1, {'@': 376}), 14: (1, {'@': 376}), 92: (1, {'@': 376}), 87: (1, {'@': 376}), 19: (1, {'@': 376}), 2: (1, {'@': 376}), 93: (1, {'@': 376}), 95: (1, {'@': 376}), 27: (1, {'@': 376}), 96: (1, {'@': 376}), 98: (1, {'@': 376}), 3: (1, {'@': 376}), 88: (1, {'@': 376}), 15: (1, {'@': 376}), 0: (1, {'@': 376}), 1: (1, {'@': 376}), 8: (1, {'@': 376}), 10: (1, {'@': 376}), 12: (1, {'@': 376}), 13: (1, {'@': 376}), 16: (1, {'@': 376}), 18: (1, {'@': 376}), 20: (1, {'@': 376}), 21: (1, {'@': 376}), 22: (1, {'@': 376}), 23: (1, {'@': 376}), 25: (1, {'@': 376}), 26: (1, {'@': 376}), 28: (1, {'@': 376}), 9: (1, {'@': 376}), 5: (1, {'@': 376}), 4: (1, {'@': 376}), 6: (1, {'@': 376}), 7: (1, {'@': 376}), 17: (1, {'@': 376}), 24: (1, {'@': 376})}, 487: {154: (1, {'@': 117}), 153: (1, {'@': 117}), 157: (1, {'@': 117}), 5: (1, {'@': 117})}, 488: {154: (1, {'@': 545}), 153: (1, {'@': 545}), 157: (1, {'@': 545}), 5: (1, {'@': 545})}, 489: {33: (1, {'@': 357}), 102: (1, {'@': 357}), 124: (1, {'@': 357}), 136: (1, {'@': 357}), 121: (1, {'@': 357}), 32: (1, {'@': 357}), 4: (1, {'@': 357}), 76: (1, {'@': 357}), 100: (1, {'@': 357}), 58: (1, {'@': 357}), 117: (1, {'@': 357}), 116: (1, {'@': 357}), 125: (1, {'@': 357}), 38: (1, {'@': 357}), 40: (1, {'@': 357}), 73: (1, {'@': 357}), 77: (1, {'@': 357}), 146: (1, {'@': 357}), 164: (1, {'@': 357}), 156: (1, {'@': 357}), 5: (1, {'@': 357}), 134: (1, {'@': 357}), 70: (1, {'@': 357}), 71: (1, {'@': 357}), 106: (1, {'@': 357}), 126: (1, {'@': 357}), 65: (1, {'@': 357}), 7: (1, {'@': 357}), 151: (1, {'@': 357}), 68: (1, {'@': 357}), 53: (1, {'@': 357}), 138: (1, {'@': 357}), 142: (1, {'@': 357}), 14: (1, {'@': 357}), 37: (1, {'@': 357}), 55: (1, {'@': 357}), 60: (1, {'@': 357}), 66: (1, {'@': 357}), 152: (1, {'@': 357}), 56: (1, {'@': 357}), 153: (1, {'@': 357}), 44: (1, {'@': 357}), 1: (1, {'@': 357}), 72: (1, {'@': 357}), 81: (1, {'@': 357}), 47: (1, {'@': 357}), 107: (1, {'@': 357}), 154: (1, {'@': 357}), 67: (1, {'@': 357}), 34: (1, {'@': 357}), 24: (1, {'@': 357}), 155: (1, {'@': 357}), 75: (1, {'@': 357}), 157: (1, {'@': 357}), 158: (1, {'@': 357}), 43: (1, {'@': 357}), 145: (1, {'@': 357}), 31: (1, {'@': 357}), 122: (1, {'@': 357}), 113: (1, {'@': 357}), 162: (1, {'@': 357}), 163: (1, {'@': 357}), 175: (1, {'@': 357})}, 490: {166: (0, 183), 169: (0, 607), 29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 80: (0, 658), 41: (0, 689), 42: (0, 696), 43: (0, 300), 64: (0, 474), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 167: (0, 600), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 168: (0, 610), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 81: (0, 702), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596), 3: (1, {'@': 494})}, 491: {33: (1, {'@': 190}), 151: (1, {'@': 190}), 68: (1, {'@': 190}), 53: (1, {'@': 190}), 138: (1, {'@': 190}), 102: (1, {'@': 190}), 142: (1, {'@': 190}), 14: (1, {'@': 190}), 37: (1, {'@': 190}), 55: (1, {'@': 190}), 124: (1, {'@': 190}), 136: (1, {'@': 190}), 60: (1, {'@': 190}), 66: (1, {'@': 190}), 121: (1, {'@': 190}), 152: (1, {'@': 190}), 56: (1, {'@': 190}), 32: (1, {'@': 190}), 153: (1, {'@': 190}), 44: (1, {'@': 190}), 4: (1, {'@': 190}), 76: (1, {'@': 190}), 72: (1, {'@': 190}), 100: (1, {'@': 190}), 65: (1, {'@': 190}), 58: (1, {'@': 190}), 81: (1, {'@': 190}), 47: (1, {'@': 190}), 107: (1, {'@': 190}), 117: (1, {'@': 190}), 154: (1, {'@': 190}), 116: (1, {'@': 190}), 67: (1, {'@': 190}), 125: (1, {'@': 190}), 34: (1, {'@': 190}), 38: (1, {'@': 190}), 40: (1, {'@': 190}), 24: (1, {'@': 190}), 155: (1, {'@': 190}), 73: (1, {'@': 190}), 75: (1, {'@': 190}), 77: (1, {'@': 190}), 146: (1, {'@': 190}), 164: (1, {'@': 190}), 156: (1, {'@': 190}), 5: (1, {'@': 190}), 157: (1, {'@': 190}), 134: (1, {'@': 190}), 70: (1, {'@': 190}), 71: (1, {'@': 190}), 43: (1, {'@': 190}), 145: (1, {'@': 190}), 31: (1, {'@': 190}), 106: (1, {'@': 190}), 126: (1, {'@': 190}), 122: (1, {'@': 190}), 113: (1, {'@': 190}), 1: (1, {'@': 190}), 158: (1, {'@': 190})}, 492: {2: (1, {'@': 359}), 3: (1, {'@': 359}), 19: (1, {'@': 359}), 0: (1, {'@': 359}), 1: (1, {'@': 359}), 15: (1, {'@': 359}), 8: (1, {'@': 359}), 10: (1, {'@': 359}), 12: (1, {'@': 359}), 20: (1, {'@': 359}), 13: (1, {'@': 359}), 21: (1, {'@': 359}), 22: (1, {'@': 359}), 23: (1, {'@': 359}), 25: (1, {'@': 359}), 26: (1, {'@': 359}), 28: (1, {'@': 359}), 16: (1, {'@': 359}), 18: (1, {'@': 359}), 5: (1, {'@': 359}), 4: (1, {'@': 359}), 6: (1, {'@': 359}), 9: (1, {'@': 359}), 17: (1, {'@': 359}), 24: (1, {'@': 359})}, 493: {0: (1, {'@': 248}), 1: (1, {'@': 248})}, 494: {59: (0, 557), 30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 293), 61: (0, 581), 34: (0, 645), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 38: (0, 601), 39: (0, 608), 44: (0, 321), 40: (0, 616), 41: (0, 689), 42: (0, 696), 65: (0, 334), 50: (0, 337), 45: (0, 736), 47: (0, 244), 66: (0, 354), 68: (0, 697), 57: (0, 359), 69: (0, 371), 70: (0, 710), 71: (0, 716), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 29: (0, 531), 76: (0, 757), 77: (0, 596)}, 495: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 64: (0, 77), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 496: {40: (0, 107), 204: (0, 254), 43: (0, 262)}, 497: {259: (0, 250)}, 498: {100: (0, 353), 101: (0, 358), 216: (0, 364), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 34: (0, 645), 35: (0, 652), 4: (0, 660), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 217: (0, 709), 24: (0, 715), 108: (0, 722), 109: (0, 729), 45: (0, 736), 151: (0, 743), 227: (0, 56), 218: (0, 202), 48: (0, 467), 219: (0, 475), 49: (0, 483), 220: (0, 491), 111: (0, 500), 112: (0, 507), 29: (0, 514), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 221: (0, 188), 118: (0, 195), 119: (0, 205), 155: (0, 213), 154: (0, 220), 120: (0, 228), 58: (0, 236), 47: (0, 244), 152: (0, 252), 121: (0, 260), 157: (0, 276), 122: (0, 284), 54: (0, 293), 43: (0, 300), 62: (0, 308), 123: (0, 316), 44: (0, 321), 223: (0, 328), 65: (0, 334), 50: (0, 337), 14: (0, 342), 5: (0, 347), 66: (0, 354), 57: (0, 359), 153: (0, 365), 69: (0, 371), 224: (0, 379), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 206: (0, 611), 129: (0, 613), 40: (0, 616), 130: (0, 619), 131: (0, 622), 132: (0, 625), 135: (0, 628), 46: (0, 631), 133: (0, 634), 134: (0, 637), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 225: (0, 541), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 226: (0, 589), 145: (0, 646), 156: (0, 653), 146: (0, 661), 147: (0, 668), 63: (0, 675), 148: (0, 682), 67: (0, 690), 68: (0, 697), 228: (0, 704), 164: (0, 62), 70: (0, 710), 71: (0, 716), 149: (0, 723), 229: (0, 730), 73: (0, 737), 150: (0, 744), 230: (0, 751), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 499: {2: (1, {'@': 513}), 3: (1, {'@': 513})}, 500: {0: (1, {'@': 241}), 1: (1, {'@': 241})}, 501: {3: (1, {'@': 496})}, 502: {0: (1, {'@': 207}), 1: (1, {'@': 207})}, 503: {91: (0, 539), 85: (1, {'@': 378}), 58: (1, {'@': 378}), 89: (1, {'@': 378}), 11: (1, {'@': 378}), 90: (1, {'@': 378}), 86: (1, {'@': 378}), 14: (1, {'@': 378}), 92: (1, {'@': 378}), 87: (1, {'@': 378}), 2: (1, {'@': 378}), 93: (1, {'@': 378}), 95: (1, {'@': 378}), 27: (1, {'@': 378}), 88: (1, {'@': 378}), 96: (1, {'@': 378}), 98: (1, {'@': 378}), 3: (1, {'@': 378}), 19: (1, {'@': 378}), 15: (1, {'@': 378}), 0: (1, {'@': 378}), 1: (1, {'@': 378}), 8: (1, {'@': 378}), 10: (1, {'@': 378}), 12: (1, {'@': 378}), 13: (1, {'@': 378}), 16: (1, {'@': 378}), 18: (1, {'@': 378}), 20: (1, {'@': 378}), 21: (1, {'@': 378}), 22: (1, {'@': 378}), 23: (1, {'@': 378}), 25: (1, {'@': 378}), 26: (1, {'@': 378}), 28: (1, {'@': 378}), 9: (1, {'@': 378}), 4: (1, {'@': 378}), 5: (1, {'@': 378}), 6: (1, {'@': 378}), 7: (1, {'@': 378}), 17: (1, {'@': 378}), 24: (1, {'@': 378})}, 504: {7: (1, {'@': 582}), 85: (1, {'@': 582}), 8: (1, {'@': 582}), 9: (1, {'@': 582}), 10: (1, {'@': 582}), 11: (1, {'@': 582}), 12: (1, {'@': 582}), 13: (1, {'@': 582}), 14: (1, {'@': 582}), 87: (1, {'@': 582}), 93: (1, {'@': 582}), 15: (1, {'@': 582}), 16: (1, {'@': 582}), 0: (1, {'@': 582}), 17: (1, {'@': 582}), 18: (1, {'@': 582}), 19: (1, {'@': 582}), 88: (1, {'@': 582}), 4: (1, {'@': 582}), 58: (1, {'@': 582}), 90: (1, {'@': 582}), 20: (1, {'@': 582}), 6: (1, {'@': 582}), 92: (1, {'@': 582}), 21: (1, {'@': 582}), 22: (1, {'@': 582}), 23: (1, {'@': 582}), 24: (1, {'@': 582}), 2: (1, {'@': 582}), 95: (1, {'@': 582}), 25: (1, {'@': 582}), 26: (1, {'@': 582}), 27: (1, {'@': 582}), 28: (1, {'@': 582}), 5: (1, {'@': 582}), 96: (1, {'@': 582}), 98: (1, {'@': 582}), 3: (1, {'@': 582}), 1: (1, {'@': 582})}, 505: {19: (1, {'@': 306}), 15: (1, {'@': 306}), 33: (1, {'@': 306}), 68: (1, {'@': 306}), 53: (1, {'@': 306}), 37: (1, {'@': 306}), 55: (1, {'@': 306}), 60: (1, {'@': 306}), 66: (1, {'@': 306}), 56: (1, {'@': 306}), 32: (1, {'@': 306}), 44: (1, {'@': 306}), 76: (1, {'@': 306}), 72: (1, {'@': 306}), 47: (1, {'@': 306}), 40: (1, {'@': 306}), 73: (1, {'@': 306}), 75: (1, {'@': 306}), 77: (1, {'@': 306}), 43: (1, {'@': 306}), 31: (1, {'@': 306}), 65: (1, {'@': 306}), 88: (1, {'@': 306})}, 506: {33: (1, {'@': 576}), 151: (1, {'@': 576}), 68: (1, {'@': 576}), 53: (1, {'@': 576}), 138: (1, {'@': 576}), 102: (1, {'@': 576}), 142: (1, {'@': 576}), 14: (1, {'@': 576}), 37: (1, {'@': 576}), 55: (1, {'@': 576}), 124: (1, {'@': 576}), 136: (1, {'@': 576}), 60: (1, {'@': 576}), 66: (1, {'@': 576}), 121: (1, {'@': 576}), 152: (1, {'@': 576}), 56: (1, {'@': 576}), 32: (1, {'@': 576}), 153: (1, {'@': 576}), 44: (1, {'@': 576}), 4: (1, {'@': 576}), 76: (1, {'@': 576}), 72: (1, {'@': 576}), 100: (1, {'@': 576}), 65: (1, {'@': 576}), 58: (1, {'@': 576}), 81: (1, {'@': 576}), 47: (1, {'@': 576}), 107: (1, {'@': 576}), 117: (1, {'@': 576}), 154: (1, {'@': 576}), 116: (1, {'@': 576}), 67: (1, {'@': 576}), 125: (1, {'@': 576}), 34: (1, {'@': 576}), 38: (1, {'@': 576}), 40: (1, {'@': 576}), 24: (1, {'@': 576}), 155: (1, {'@': 576}), 73: (1, {'@': 576}), 75: (1, {'@': 576}), 77: (1, {'@': 576}), 146: (1, {'@': 576}), 164: (1, {'@': 576}), 156: (1, {'@': 576}), 5: (1, {'@': 576}), 157: (1, {'@': 576}), 134: (1, {'@': 576}), 70: (1, {'@': 576}), 71: (1, {'@': 576}), 43: (1, {'@': 576}), 145: (1, {'@': 576}), 31: (1, {'@': 576}), 106: (1, {'@': 576}), 126: (1, {'@': 576}), 122: (1, {'@': 576}), 113: (1, {'@': 576})}, 507: {0: (1, {'@': 208}), 1: (1, {'@': 208})}, 508: {85: (1, {'@': 584}), 8: (1, {'@': 584}), 9: (1, {'@': 584}), 11: (1, {'@': 584}), 12: (1, {'@': 584}), 86: (1, {'@': 584}), 87: (1, {'@': 584}), 15: (1, {'@': 584}), 0: (1, {'@': 584}), 88: (1, {'@': 584}), 4: (1, {'@': 584}), 58: (1, {'@': 584}), 90: (1, {'@': 584}), 20: (1, {'@': 584}), 6: (1, {'@': 584}), 92: (1, {'@': 584}), 21: (1, {'@': 584}), 2: (1, {'@': 584}), 25: (1, {'@': 584}), 26: (1, {'@': 584}), 27: (1, {'@': 584}), 5: (1, {'@': 584}), 3: (1, {'@': 584}), 7: (1, {'@': 584}), 10: (1, {'@': 584}), 13: (1, {'@': 584}), 14: (1, {'@': 584}), 93: (1, {'@': 584}), 16: (1, {'@': 584}), 17: (1, {'@': 584}), 18: (1, {'@': 584}), 19: (1, {'@': 584}), 22: (1, {'@': 584}), 23: (1, {'@': 584}), 24: (1, {'@': 584}), 95: (1, {'@': 584}), 28: (1, {'@': 584}), 96: (1, {'@': 584}), 98: (1, {'@': 584}), 1: (1, {'@': 584})}, 509: {3: (1, {'@': 497})}, 510: {0: (1, {'@': 243}), 1: (1, {'@': 243})}, 511: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 52: (0, 547), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 512: {29: (0, 514), 59: (0, 557), 49: (0, 483), 30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 293), 61: (0, 581), 34: (0, 645), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 63: (0, 675), 38: (0, 601), 39: (0, 608), 44: (0, 321), 40: (0, 616), 74: (0, 100), 41: (0, 689), 42: (0, 696), 65: (0, 334), 50: (0, 337), 45: (0, 736), 47: (0, 244), 48: (0, 467), 66: (0, 354), 68: (0, 697), 57: (0, 359), 69: (0, 371), 70: (0, 710), 71: (0, 716), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 513: {85: (1, {'@': 597}), 53: (1, {'@': 597}), 11: (1, {'@': 597}), 176: (1, {'@': 597}), 86: (1, {'@': 597}), 14: (1, {'@': 597}), 37: (1, {'@': 597}), 87: (1, {'@': 597}), 174: (1, {'@': 597}), 93: (1, {'@': 597}), 177: (1, {'@': 597}), 56: (1, {'@': 597}), 153: (1, {'@': 597}), 80: (1, {'@': 597}), 19: (1, {'@': 597}), 88: (1, {'@': 597}), 76: (1, {'@': 597}), 58: (1, {'@': 597}), 89: (1, {'@': 597}), 94: (1, {'@': 597}), 81: (1, {'@': 597}), 47: (1, {'@': 597}), 90: (1, {'@': 597}), 34: (1, {'@': 597}), 91: (1, {'@': 597}), 92: (1, {'@': 597}), 40: (1, {'@': 597}), 82: (1, {'@': 597}), 2: (1, {'@': 597}), 95: (1, {'@': 597}), 75: (1, {'@': 597}), 27: (1, {'@': 597}), 70: (1, {'@': 597}), 96: (1, {'@': 597}), 97: (1, {'@': 597}), 43: (1, {'@': 597}), 98: (1, {'@': 597}), 3: (1, {'@': 597}), 15: (1, {'@': 597}), 0: (1, {'@': 597}), 1: (1, {'@': 597}), 8: (1, {'@': 597}), 10: (1, {'@': 597}), 12: (1, {'@': 597}), 13: (1, {'@': 597}), 16: (1, {'@': 597}), 18: (1, {'@': 597}), 20: (1, {'@': 597}), 21: (1, {'@': 597}), 22: (1, {'@': 597}), 23: (1, {'@': 597}), 25: (1, {'@': 597}), 26: (1, {'@': 597}), 28: (1, {'@': 597}), 9: (1, {'@': 597}), 4: (1, {'@': 597}), 5: (1, {'@': 597}), 6: (1, {'@': 597}), 7: (1, {'@': 597}), 17: (1, {'@': 597}), 24: (1, {'@': 597})}, 514: {91: (0, 494), 260: (0, 503), 85: (1, {'@': 379}), 58: (1, {'@': 379}), 89: (1, {'@': 379}), 11: (1, {'@': 379}), 90: (1, {'@': 379}), 86: (1, {'@': 379}), 14: (1, {'@': 379}), 92: (1, {'@': 379}), 87: (1, {'@': 379}), 2: (1, {'@': 379}), 93: (1, {'@': 379}), 95: (1, {'@': 379}), 27: (1, {'@': 379}), 88: (1, {'@': 379}), 96: (1, {'@': 379}), 98: (1, {'@': 379}), 3: (1, {'@': 379}), 19: (1, {'@': 379}), 15: (1, {'@': 379}), 0: (1, {'@': 379}), 1: (1, {'@': 379}), 8: (1, {'@': 379}), 10: (1, {'@': 379}), 12: (1, {'@': 379}), 13: (1, {'@': 379}), 16: (1, {'@': 379}), 18: (1, {'@': 379}), 20: (1, {'@': 379}), 21: (1, {'@': 379}), 22: (1, {'@': 379}), 23: (1, {'@': 379}), 25: (1, {'@': 379}), 26: (1, {'@': 379}), 28: (1, {'@': 379}), 9: (1, {'@': 379}), 4: (1, {'@': 379}), 5: (1, {'@': 379}), 6: (1, {'@': 379}), 7: (1, {'@': 379}), 17: (1, {'@': 379}), 24: (1, {'@': 379})}, 515: {85: (1, {'@': 586}), 8: (1, {'@': 586}), 9: (1, {'@': 586}), 11: (1, {'@': 586}), 12: (1, {'@': 586}), 86: (1, {'@': 586}), 87: (1, {'@': 586}), 15: (1, {'@': 586}), 0: (1, {'@': 586}), 88: (1, {'@': 586}), 4: (1, {'@': 586}), 58: (1, {'@': 586}), 89: (1, {'@': 586}), 90: (1, {'@': 586}), 20: (1, {'@': 586}), 6: (1, {'@': 586}), 92: (1, {'@': 586}), 21: (1, {'@': 586}), 2: (1, {'@': 586}), 25: (1, {'@': 586}), 26: (1, {'@': 586}), 27: (1, {'@': 586}), 3: (1, {'@': 586}), 7: (1, {'@': 586}), 10: (1, {'@': 586}), 13: (1, {'@': 586}), 14: (1, {'@': 586}), 93: (1, {'@': 586}), 16: (1, {'@': 586}), 17: (1, {'@': 586}), 18: (1, {'@': 586}), 19: (1, {'@': 586}), 1: (1, {'@': 586}), 22: (1, {'@': 586}), 23: (1, {'@': 586}), 24: (1, {'@': 586}), 95: (1, {'@': 586}), 28: (1, {'@': 586}), 96: (1, {'@': 586}), 98: (1, {'@': 586}), 5: (1, {'@': 586})}, 516: {3: (0, 47)}, 517: {85: (1, {'@': 530}), 53: (1, {'@': 530}), 11: (1, {'@': 530}), 176: (1, {'@': 530}), 86: (1, {'@': 530}), 14: (1, {'@': 530}), 37: (1, {'@': 530}), 87: (1, {'@': 530}), 174: (1, {'@': 530}), 93: (1, {'@': 530}), 177: (1, {'@': 530}), 56: (1, {'@': 530}), 153: (1, {'@': 530}), 80: (1, {'@': 530}), 19: (1, {'@': 530}), 88: (1, {'@': 530}), 76: (1, {'@': 530}), 58: (1, {'@': 530}), 89: (1, {'@': 530}), 94: (1, {'@': 530}), 81: (1, {'@': 530}), 47: (1, {'@': 530}), 90: (1, {'@': 530}), 34: (1, {'@': 530}), 91: (1, {'@': 530}), 92: (1, {'@': 530}), 40: (1, {'@': 530}), 82: (1, {'@': 530}), 2: (1, {'@': 530}), 95: (1, {'@': 530}), 75: (1, {'@': 530}), 27: (1, {'@': 530}), 70: (1, {'@': 530}), 96: (1, {'@': 530}), 97: (1, {'@': 530}), 43: (1, {'@': 530}), 98: (1, {'@': 530}), 3: (1, {'@': 530}), 15: (1, {'@': 530}), 0: (1, {'@': 530}), 1: (1, {'@': 530}), 8: (1, {'@': 530}), 10: (1, {'@': 530}), 12: (1, {'@': 530}), 13: (1, {'@': 530}), 16: (1, {'@': 530}), 18: (1, {'@': 530}), 20: (1, {'@': 530}), 21: (1, {'@': 530}), 22: (1, {'@': 530}), 23: (1, {'@': 530}), 25: (1, {'@': 530}), 26: (1, {'@': 530}), 28: (1, {'@': 530}), 9: (1, {'@': 530}), 4: (1, {'@': 530}), 5: (1, {'@': 530}), 6: (1, {'@': 530}), 7: (1, {'@': 530}), 17: (1, {'@': 530}), 24: (1, {'@': 530})}, 518: {30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 165: (0, 555), 33: (0, 408), 35: (0, 652), 54: (0, 563), 61: (0, 581), 43: (0, 300), 37: (0, 674), 39: (0, 608), 44: (0, 321), 40: (0, 616), 65: (0, 334), 47: (0, 244), 66: (0, 354), 68: (0, 697), 69: (0, 371), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 519: {33: (1, {'@': 408}), 68: (1, {'@': 408}), 53: (1, {'@': 408}), 37: (1, {'@': 408}), 55: (1, {'@': 408}), 60: (1, {'@': 408}), 66: (1, {'@': 408}), 56: (1, {'@': 408}), 32: (1, {'@': 408}), 44: (1, {'@': 408}), 76: (1, {'@': 408}), 72: (1, {'@': 408}), 47: (1, {'@': 408}), 34: (1, {'@': 408}), 38: (1, {'@': 408}), 40: (1, {'@': 408}), 73: (1, {'@': 408}), 75: (1, {'@': 408}), 77: (1, {'@': 408}), 70: (1, {'@': 408}), 71: (1, {'@': 408}), 43: (1, {'@': 408}), 31: (1, {'@': 408}), 65: (1, {'@': 408})}, 520: {2: (0, 269), 261: (0, 277), 93: (1, {'@': 464}), 0: (1, {'@': 464}), 1: (1, {'@': 464})}, 521: {2: (1, {'@': 461}), 6: (1, {'@': 461})}, 522: {14: (1, {'@': 369}), 3: (1, {'@': 369}), 2: (1, {'@': 369}), 27: (1, {'@': 369}), 19: (1, {'@': 369}), 11: (1, {'@': 369}), 1: (1, {'@': 369}), 15: (1, {'@': 369}), 0: (1, {'@': 369}), 8: (1, {'@': 369}), 10: (1, {'@': 369}), 12: (1, {'@': 369}), 20: (1, {'@': 369}), 13: (1, {'@': 369}), 21: (1, {'@': 369}), 22: (1, {'@': 369}), 23: (1, {'@': 369}), 25: (1, {'@': 369}), 26: (1, {'@': 369}), 28: (1, {'@': 369}), 16: (1, {'@': 369}), 18: (1, {'@': 369}), 4: (1, {'@': 369}), 5: (1, {'@': 369}), 6: (1, {'@': 369}), 7: (1, {'@': 369}), 9: (1, {'@': 369}), 24: (1, {'@': 369}), 17: (1, {'@': 369})}, 523: {59: (0, 557), 29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 293), 61: (0, 581), 34: (0, 645), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 38: (0, 601), 39: (0, 608), 44: (0, 321), 40: (0, 616), 41: (0, 689), 42: (0, 696), 65: (0, 334), 50: (0, 337), 45: (0, 736), 47: (0, 244), 66: (0, 354), 68: (0, 697), 57: (0, 359), 69: (0, 371), 70: (0, 710), 71: (0, 716), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596), 49: (0, 266)}, 524: {3: (1, {'@': 308})}, 525: {29: (0, 514), 59: (0, 557), 49: (0, 483), 30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 293), 74: (0, 279), 61: (0, 581), 34: (0, 645), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 63: (0, 675), 38: (0, 601), 39: (0, 608), 44: (0, 321), 40: (0, 616), 41: (0, 689), 42: (0, 696), 65: (0, 334), 50: (0, 337), 45: (0, 736), 47: (0, 244), 48: (0, 467), 66: (0, 354), 68: (0, 697), 57: (0, 359), 69: (0, 371), 70: (0, 710), 71: (0, 716), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 526: {88: (0, 571)}, 527: {33: (1, {'@': 410}), 68: (1, {'@': 410}), 53: (1, {'@': 410}), 37: (1, {'@': 410}), 55: (1, {'@': 410}), 60: (1, {'@': 410}), 66: (1, {'@': 410}), 56: (1, {'@': 410}), 32: (1, {'@': 410}), 44: (1, {'@': 410}), 76: (1, {'@': 410}), 72: (1, {'@': 410}), 47: (1, {'@': 410}), 34: (1, {'@': 410}), 38: (1, {'@': 410}), 40: (1, {'@': 410}), 73: (1, {'@': 410}), 75: (1, {'@': 410}), 77: (1, {'@': 410}), 70: (1, {'@': 410}), 71: (1, {'@': 410}), 43: (1, {'@': 410}), 31: (1, {'@': 410}), 65: (1, {'@': 410})}, 528: {2: (0, 285), 261: (0, 294), 93: (1, {'@': 463}), 0: (1, {'@': 463}), 1: (1, {'@': 463})}, 529: {2: (1, {'@': 457}), 6: (1, {'@': 457})}, 530: {14: (0, 511), 2: (1, {'@': 360}), 3: (1, {'@': 360}), 19: (1, {'@': 360}), 0: (1, {'@': 360}), 1: (1, {'@': 360}), 15: (1, {'@': 360}), 8: (1, {'@': 360}), 10: (1, {'@': 360}), 12: (1, {'@': 360}), 20: (1, {'@': 360}), 13: (1, {'@': 360}), 21: (1, {'@': 360}), 22: (1, {'@': 360}), 23: (1, {'@': 360}), 25: (1, {'@': 360}), 26: (1, {'@': 360}), 28: (1, {'@': 360}), 16: (1, {'@': 360}), 18: (1, {'@': 360}), 5: (1, {'@': 360}), 4: (1, {'@': 360}), 6: (1, {'@': 360}), 9: (1, {'@': 360}), 17: (1, {'@': 360}), 24: (1, {'@': 360})}, 531: {85: (1, {'@': 588}), 8: (1, {'@': 588}), 9: (1, {'@': 588}), 11: (1, {'@': 588}), 12: (1, {'@': 588}), 86: (1, {'@': 588}), 87: (1, {'@': 588}), 15: (1, {'@': 588}), 0: (1, {'@': 588}), 88: (1, {'@': 588}), 4: (1, {'@': 588}), 58: (1, {'@': 588}), 89: (1, {'@': 588}), 90: (1, {'@': 588}), 20: (1, {'@': 588}), 6: (1, {'@': 588}), 91: (1, {'@': 588}), 92: (1, {'@': 588}), 21: (1, {'@': 588}), 2: (1, {'@': 588}), 25: (1, {'@': 588}), 26: (1, {'@': 588}), 27: (1, {'@': 588}), 3: (1, {'@': 588}), 7: (1, {'@': 588}), 10: (1, {'@': 588}), 13: (1, {'@': 588}), 14: (1, {'@': 588}), 93: (1, {'@': 588}), 16: (1, {'@': 588}), 17: (1, {'@': 588}), 18: (1, {'@': 588}), 19: (1, {'@': 588}), 1: (1, {'@': 588}), 22: (1, {'@': 588}), 23: (1, {'@': 588}), 24: (1, {'@': 588}), 95: (1, {'@': 588}), 28: (1, {'@': 588}), 96: (1, {'@': 588}), 98: (1, {'@': 588}), 5: (1, {'@': 588})}, 532: {3: (1, {'@': 309})}, 533: {181: (0, 287), 31: (0, 505)}, 534: {15: (0, 579)}, 535: {2: (0, 451), 0: (1, {'@': 277}), 1: (1, {'@': 277})}, 536: {93: (0, 301)}, 537: {15: (0, 157), 201: (0, 606), 2: (1, {'@': 454}), 6: (1, {'@': 454})}, 538: {181: (0, 518), 31: (0, 505)}, 539: {59: (0, 557), 30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 293), 61: (0, 581), 34: (0, 645), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 38: (0, 601), 39: (0, 608), 44: (0, 321), 40: (0, 616), 41: (0, 689), 42: (0, 696), 29: (0, 273), 65: (0, 334), 50: (0, 337), 45: (0, 736), 47: (0, 244), 66: (0, 354), 68: (0, 697), 57: (0, 359), 69: (0, 371), 70: (0, 710), 71: (0, 716), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 540: {174: (0, 44), 43: (0, 51), 47: (0, 57), 0: (1, {'@': 302}), 1: (1, {'@': 302})}, 541: {33: (1, {'@': 326}), 151: (1, {'@': 326}), 68: (1, {'@': 326}), 53: (1, {'@': 326}), 138: (1, {'@': 326}), 102: (1, {'@': 326}), 142: (1, {'@': 326}), 14: (1, {'@': 326}), 37: (1, {'@': 326}), 55: (1, {'@': 326}), 124: (1, {'@': 326}), 136: (1, {'@': 326}), 60: (1, {'@': 326}), 66: (1, {'@': 326}), 121: (1, {'@': 326}), 152: (1, {'@': 326}), 56: (1, {'@': 326}), 32: (1, {'@': 326}), 153: (1, {'@': 326}), 44: (1, {'@': 326}), 4: (1, {'@': 326}), 76: (1, {'@': 326}), 72: (1, {'@': 326}), 100: (1, {'@': 326}), 65: (1, {'@': 326}), 58: (1, {'@': 326}), 81: (1, {'@': 326}), 47: (1, {'@': 326}), 107: (1, {'@': 326}), 117: (1, {'@': 326}), 154: (1, {'@': 326}), 116: (1, {'@': 326}), 67: (1, {'@': 326}), 125: (1, {'@': 326}), 34: (1, {'@': 326}), 38: (1, {'@': 326}), 40: (1, {'@': 326}), 24: (1, {'@': 326}), 155: (1, {'@': 326}), 73: (1, {'@': 326}), 75: (1, {'@': 326}), 77: (1, {'@': 326}), 146: (1, {'@': 326}), 164: (1, {'@': 326}), 156: (1, {'@': 326}), 5: (1, {'@': 326}), 157: (1, {'@': 326}), 134: (1, {'@': 326}), 70: (1, {'@': 326}), 71: (1, {'@': 326}), 43: (1, {'@': 326}), 145: (1, {'@': 326}), 31: (1, {'@': 326}), 106: (1, {'@': 326}), 126: (1, {'@': 326}), 122: (1, {'@': 326}), 113: (1, {'@': 326}), 1: (1, {'@': 326}), 158: (1, {'@': 326})}, 542: {43: (0, 587)}, 543: {43: (0, 194), 0: (1, {'@': 298}), 1: (1, {'@': 298})}, 544: {11: (0, 309), 2: (1, {'@': 364}), 3: (1, {'@': 364}), 19: (1, {'@': 364}), 14: (1, {'@': 364}), 0: (1, {'@': 364}), 1: (1, {'@': 364}), 15: (1, {'@': 364}), 8: (1, {'@': 364}), 10: (1, {'@': 364}), 12: (1, {'@': 364}), 20: (1, {'@': 364}), 13: (1, {'@': 364}), 21: (1, {'@': 364}), 22: (1, {'@': 364}), 23: (1, {'@': 364}), 25: (1, {'@': 364}), 26: (1, {'@': 364}), 28: (1, {'@': 364}), 16: (1, {'@': 364}), 18: (1, {'@': 364}), 5: (1, {'@': 364}), 4: (1, {'@': 364}), 6: (1, {'@': 364}), 9: (1, {'@': 364}), 24: (1, {'@': 364}), 17: (1, {'@': 364}), 7: (1, {'@': 364})}, 545: {2: (1, {'@': 455}), 6: (1, {'@': 455})}, 546: {0: (1, {'@': 203}), 1: (1, {'@': 203})}, 547: {7: (0, 280)}, 548: {30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 563), 61: (0, 581), 43: (0, 73), 33: (0, 408), 35: (0, 652), 37: (0, 674), 39: (0, 608), 44: (0, 321), 40: (0, 616), 65: (0, 334), 47: (0, 244), 165: (0, 79), 66: (0, 354), 68: (0, 697), 69: (0, 371), 53: (0, 485), 72: (0, 390), 73: (0, 737), 186: (0, 86), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 549: {0: (1, {'@': 212}), 1: (1, {'@': 212})}, 550: {14: (1, {'@': 368}), 3: (1, {'@': 368}), 2: (1, {'@': 368}), 27: (1, {'@': 368}), 19: (1, {'@': 368}), 11: (1, {'@': 368}), 1: (1, {'@': 368}), 15: (1, {'@': 368}), 0: (1, {'@': 368}), 8: (1, {'@': 368}), 10: (1, {'@': 368}), 12: (1, {'@': 368}), 20: (1, {'@': 368}), 13: (1, {'@': 368}), 21: (1, {'@': 368}), 22: (1, {'@': 368}), 23: (1, {'@': 368}), 25: (1, {'@': 368}), 26: (1, {'@': 368}), 28: (1, {'@': 368}), 16: (1, {'@': 368}), 18: (1, {'@': 368}), 4: (1, {'@': 368}), 5: (1, {'@': 368}), 6: (1, {'@': 368}), 7: (1, {'@': 368}), 9: (1, {'@': 368}), 24: (1, {'@': 368}), 17: (1, {'@': 368})}, 551: {30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 293), 61: (0, 581), 34: (0, 645), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 38: (0, 601), 39: (0, 608), 44: (0, 321), 40: (0, 616), 41: (0, 689), 65: (0, 334), 45: (0, 736), 50: (0, 337), 47: (0, 244), 66: (0, 354), 68: (0, 697), 57: (0, 359), 59: (0, 204), 69: (0, 371), 70: (0, 710), 71: (0, 716), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 552: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 36: (0, 317), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 553: {15: (0, 180), 29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 64: (0, 712), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 172: (0, 615), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596), 6: (1, {'@': 449})}, 554: {0: (1, {'@': 201}), 1: (1, {'@': 201})}, 555: {43: (0, 288), 19: (0, 296), 0: (1, {'@': 303}), 1: (1, {'@': 303})}, 556: {262: (0, 72), 68: (0, 96)}, 557: {263: (0, 295), 234: (0, 303), 34: (0, 311), 70: (0, 319), 85: (1, {'@': 383}), 58: (1, {'@': 383}), 89: (1, {'@': 383}), 94: (1, {'@': 383}), 11: (1, {'@': 383}), 90: (1, {'@': 383}), 86: (1, {'@': 383}), 14: (1, {'@': 383}), 91: (1, {'@': 383}), 92: (1, {'@': 383}), 87: (1, {'@': 383}), 2: (1, {'@': 383}), 93: (1, {'@': 383}), 95: (1, {'@': 383}), 27: (1, {'@': 383}), 88: (1, {'@': 383}), 96: (1, {'@': 383}), 97: (1, {'@': 383}), 98: (1, {'@': 383}), 3: (1, {'@': 383}), 19: (1, {'@': 383}), 15: (1, {'@': 383}), 0: (1, {'@': 383}), 1: (1, {'@': 383}), 8: (1, {'@': 383}), 10: (1, {'@': 383}), 12: (1, {'@': 383}), 13: (1, {'@': 383}), 16: (1, {'@': 383}), 18: (1, {'@': 383}), 20: (1, {'@': 383}), 21: (1, {'@': 383}), 22: (1, {'@': 383}), 23: (1, {'@': 383}), 25: (1, {'@': 383}), 26: (1, {'@': 383}), 28: (1, {'@': 383}), 9: (1, {'@': 383}), 4: (1, {'@': 383}), 5: (1, {'@': 383}), 6: (1, {'@': 383}), 7: (1, {'@': 383}), 17: (1, {'@': 383}), 24: (1, {'@': 383})}, 558: {5: (0, 104), 209: (0, 109), 208: (0, 114), 4: (0, 119), 2: (0, 124), 214: (0, 129), 194: (0, 134)}, 559: {85: (1, {'@': 592}), 8: (1, {'@': 592}), 9: (1, {'@': 592}), 11: (1, {'@': 592}), 12: (1, {'@': 592}), 86: (1, {'@': 592}), 87: (1, {'@': 592}), 15: (1, {'@': 592}), 0: (1, {'@': 592}), 88: (1, {'@': 592}), 4: (1, {'@': 592}), 58: (1, {'@': 592}), 89: (1, {'@': 592}), 90: (1, {'@': 592}), 20: (1, {'@': 592}), 6: (1, {'@': 592}), 91: (1, {'@': 592}), 92: (1, {'@': 592}), 21: (1, {'@': 592}), 2: (1, {'@': 592}), 25: (1, {'@': 592}), 26: (1, {'@': 592}), 27: (1, {'@': 592}), 70: (1, {'@': 592}), 3: (1, {'@': 592}), 7: (1, {'@': 592}), 10: (1, {'@': 592}), 13: (1, {'@': 592}), 14: (1, {'@': 592}), 93: (1, {'@': 592}), 16: (1, {'@': 592}), 17: (1, {'@': 592}), 18: (1, {'@': 592}), 19: (1, {'@': 592}), 1: (1, {'@': 592}), 94: (1, {'@': 592}), 34: (1, {'@': 592}), 22: (1, {'@': 592}), 23: (1, {'@': 592}), 24: (1, {'@': 592}), 95: (1, {'@': 592}), 28: (1, {'@': 592}), 96: (1, {'@': 592}), 97: (1, {'@': 592}), 98: (1, {'@': 592}), 5: (1, {'@': 592})}, 560: {2: (0, 647), 0: (1, {'@': 282}), 1: (1, {'@': 282})}, 561: {2: (1, {'@': 598}), 6: (1, {'@': 598})}, 562: {0: (1, {'@': 245}), 1: (1, {'@': 245})}, 563: {174: (0, 44), 43: (0, 51), 47: (0, 57), 19: (1, {'@': 307}), 0: (1, {'@': 307}), 1: (1, {'@': 307}), 2: (1, {'@': 307}), 3: (1, {'@': 307}), 6: (1, {'@': 307})}, 564: {236: (0, 102)}, 565: {0: (1, {'@': 202}), 1: (1, {'@': 202})}, 566: {6: (0, 139)}, 567: {31: (0, 212), 264: (0, 219)}, 568: {59: (0, 557), 30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 293), 61: (0, 581), 34: (0, 645), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 38: (0, 601), 39: (0, 608), 44: (0, 321), 40: (0, 616), 41: (0, 689), 42: (0, 654), 65: (0, 334), 45: (0, 736), 50: (0, 337), 47: (0, 244), 66: (0, 354), 68: (0, 697), 57: (0, 359), 69: (0, 371), 70: (0, 710), 71: (0, 716), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 569: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 99: (0, 577), 68: (0, 697), 69: (0, 371), 77: (0, 596), 70: (0, 710), 71: (0, 716), 64: (0, 33), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 80: (0, 585), 9: (1, {'@': 480})}, 570: {33: (1, {'@': 541}), 151: (1, {'@': 541}), 68: (1, {'@': 541}), 53: (1, {'@': 541}), 138: (1, {'@': 541}), 102: (1, {'@': 541}), 142: (1, {'@': 541}), 14: (1, {'@': 541}), 37: (1, {'@': 541}), 55: (1, {'@': 541}), 124: (1, {'@': 541}), 136: (1, {'@': 541}), 60: (1, {'@': 541}), 66: (1, {'@': 541}), 121: (1, {'@': 541}), 152: (1, {'@': 541}), 56: (1, {'@': 541}), 32: (1, {'@': 541}), 153: (1, {'@': 541}), 44: (1, {'@': 541}), 4: (1, {'@': 541}), 76: (1, {'@': 541}), 1: (1, {'@': 541}), 72: (1, {'@': 541}), 100: (1, {'@': 541}), 65: (1, {'@': 541}), 58: (1, {'@': 541}), 81: (1, {'@': 541}), 47: (1, {'@': 541}), 107: (1, {'@': 541}), 117: (1, {'@': 541}), 154: (1, {'@': 541}), 116: (1, {'@': 541}), 67: (1, {'@': 541}), 125: (1, {'@': 541}), 34: (1, {'@': 541}), 38: (1, {'@': 541}), 40: (1, {'@': 541}), 24: (1, {'@': 541}), 155: (1, {'@': 541}), 73: (1, {'@': 541}), 75: (1, {'@': 541}), 77: (1, {'@': 541}), 146: (1, {'@': 541}), 156: (1, {'@': 541}), 5: (1, {'@': 541}), 157: (1, {'@': 541}), 134: (1, {'@': 541}), 70: (1, {'@': 541}), 71: (1, {'@': 541}), 43: (1, {'@': 541}), 145: (1, {'@': 541}), 31: (1, {'@': 541}), 106: (1, {'@': 541}), 158: (1, {'@': 541}), 126: (1, {'@': 541}), 122: (1, {'@': 541}), 113: (1, {'@': 541})}, 571: {265: (0, 304), 266: (0, 312), 267: (0, 320), 268: (0, 649)}, 572: {30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 563), 61: (0, 581), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 39: (0, 608), 44: (0, 321), 40: (0, 616), 65: (0, 334), 269: (0, 413), 47: (0, 244), 66: (0, 354), 165: (0, 416), 68: (0, 697), 69: (0, 371), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 573: {85: (1, {'@': 436}), 11: (1, {'@': 436}), 176: (1, {'@': 436}), 86: (1, {'@': 436}), 14: (1, {'@': 436}), 87: (1, {'@': 436}), 174: (1, {'@': 436}), 93: (1, {'@': 436}), 177: (1, {'@': 436}), 153: (1, {'@': 436}), 80: (1, {'@': 436}), 19: (1, {'@': 436}), 88: (1, {'@': 436}), 58: (1, {'@': 436}), 89: (1, {'@': 436}), 94: (1, {'@': 436}), 81: (1, {'@': 436}), 47: (1, {'@': 436}), 90: (1, {'@': 436}), 34: (1, {'@': 436}), 91: (1, {'@': 436}), 92: (1, {'@': 436}), 82: (1, {'@': 436}), 2: (1, {'@': 436}), 95: (1, {'@': 436}), 27: (1, {'@': 436}), 70: (1, {'@': 436}), 96: (1, {'@': 436}), 97: (1, {'@': 436}), 43: (1, {'@': 436}), 98: (1, {'@': 436}), 3: (1, {'@': 436}), 15: (1, {'@': 436}), 0: (1, {'@': 436}), 1: (1, {'@': 436}), 8: (1, {'@': 436}), 10: (1, {'@': 436}), 12: (1, {'@': 436}), 13: (1, {'@': 436}), 16: (1, {'@': 436}), 18: (1, {'@': 436}), 20: (1, {'@': 436}), 21: (1, {'@': 436}), 22: (1, {'@': 436}), 23: (1, {'@': 436}), 25: (1, {'@': 436}), 26: (1, {'@': 436}), 28: (1, {'@': 436}), 9: (1, {'@': 436}), 4: (1, {'@': 436}), 5: (1, {'@': 436}), 6: (1, {'@': 436}), 7: (1, {'@': 436}), 17: (1, {'@': 436}), 24: (1, {'@': 436})}, 574: {6: (0, 144)}, 575: {2: (0, 227), 15: (1, {'@': 353})}, 576: {33: (1, {'@': 393}), 68: (1, {'@': 393}), 53: (1, {'@': 393}), 37: (1, {'@': 393}), 55: (1, {'@': 393}), 60: (1, {'@': 393}), 66: (1, {'@': 393}), 56: (1, {'@': 393}), 32: (1, {'@': 393}), 44: (1, {'@': 393}), 76: (1, {'@': 393}), 72: (1, {'@': 393}), 47: (1, {'@': 393}), 34: (1, {'@': 393}), 38: (1, {'@': 393}), 40: (1, {'@': 393}), 73: (1, {'@': 393}), 75: (1, {'@': 393}), 77: (1, {'@': 393}), 70: (1, {'@': 393}), 71: (1, {'@': 393}), 43: (1, {'@': 393}), 31: (1, {'@': 393}), 65: (1, {'@': 393})}, 577: {2: (1, {'@': 608}), 9: (1, {'@': 608})}, 578: {31: (0, 505), 181: (0, 526)}, 579: {100: (0, 353), 101: (0, 358), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 35: (0, 652), 34: (0, 645), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 24: (0, 715), 108: (0, 722), 45: (0, 736), 109: (0, 729), 48: (0, 467), 49: (0, 483), 110: (0, 663), 111: (0, 500), 29: (0, 514), 112: (0, 507), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 118: (0, 195), 119: (0, 205), 120: (0, 228), 47: (0, 244), 58: (0, 236), 121: (0, 260), 122: (0, 284), 43: (0, 300), 54: (0, 293), 62: (0, 308), 123: (0, 316), 44: (0, 321), 65: (0, 334), 50: (0, 337), 66: (0, 354), 57: (0, 359), 69: (0, 371), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 40: (0, 616), 129: (0, 613), 130: (0, 619), 131: (0, 622), 132: (0, 625), 46: (0, 631), 133: (0, 634), 134: (0, 637), 135: (0, 489), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 145: (0, 646), 146: (0, 661), 147: (0, 668), 63: (0, 675), 1: (0, 497), 148: (0, 682), 67: (0, 690), 68: (0, 697), 70: (0, 710), 71: (0, 716), 149: (0, 723), 73: (0, 737), 150: (0, 744), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 580: {15: (0, 419)}, 581: {85: (1, {'@': 433}), 11: (1, {'@': 433}), 176: (1, {'@': 433}), 86: (1, {'@': 433}), 14: (1, {'@': 433}), 87: (1, {'@': 433}), 174: (1, {'@': 433}), 93: (1, {'@': 433}), 177: (1, {'@': 433}), 153: (1, {'@': 433}), 80: (1, {'@': 433}), 19: (1, {'@': 433}), 88: (1, {'@': 433}), 58: (1, {'@': 433}), 89: (1, {'@': 433}), 94: (1, {'@': 433}), 81: (1, {'@': 433}), 47: (1, {'@': 433}), 90: (1, {'@': 433}), 34: (1, {'@': 433}), 91: (1, {'@': 433}), 92: (1, {'@': 433}), 82: (1, {'@': 433}), 2: (1, {'@': 433}), 95: (1, {'@': 433}), 27: (1, {'@': 433}), 70: (1, {'@': 433}), 96: (1, {'@': 433}), 97: (1, {'@': 433}), 43: (1, {'@': 433}), 98: (1, {'@': 433}), 3: (1, {'@': 433}), 15: (1, {'@': 433}), 0: (1, {'@': 433}), 1: (1, {'@': 433}), 8: (1, {'@': 433}), 10: (1, {'@': 433}), 12: (1, {'@': 433}), 13: (1, {'@': 433}), 16: (1, {'@': 433}), 18: (1, {'@': 433}), 20: (1, {'@': 433}), 21: (1, {'@': 433}), 22: (1, {'@': 433}), 23: (1, {'@': 433}), 25: (1, {'@': 433}), 26: (1, {'@': 433}), 28: (1, {'@': 433}), 9: (1, {'@': 433}), 4: (1, {'@': 433}), 5: (1, {'@': 433}), 6: (1, {'@': 433}), 7: (1, {'@': 433}), 17: (1, {'@': 433}), 24: (1, {'@': 433})}, 582: {6: (1, {'@': 442})}, 583: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 213: (0, 235), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 64: (0, 122), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 584: {33: (1, {'@': 394}), 68: (1, {'@': 394}), 53: (1, {'@': 394}), 37: (1, {'@': 394}), 55: (1, {'@': 394}), 60: (1, {'@': 394}), 66: (1, {'@': 394}), 56: (1, {'@': 394}), 32: (1, {'@': 394}), 44: (1, {'@': 394}), 76: (1, {'@': 394}), 72: (1, {'@': 394}), 47: (1, {'@': 394}), 34: (1, {'@': 394}), 38: (1, {'@': 394}), 40: (1, {'@': 394}), 73: (1, {'@': 394}), 75: (1, {'@': 394}), 77: (1, {'@': 394}), 70: (1, {'@': 394}), 71: (1, {'@': 394}), 43: (1, {'@': 394}), 31: (1, {'@': 394}), 65: (1, {'@': 394})}, 585: {29: (0, 514), 59: (0, 557), 49: (0, 483), 30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 293), 61: (0, 581), 34: (0, 645), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 63: (0, 675), 38: (0, 601), 39: (0, 608), 44: (0, 321), 40: (0, 616), 41: (0, 689), 42: (0, 696), 65: (0, 334), 50: (0, 337), 45: (0, 736), 47: (0, 244), 48: (0, 467), 66: (0, 354), 68: (0, 697), 57: (0, 359), 69: (0, 371), 70: (0, 710), 71: (0, 716), 53: (0, 485), 74: (0, 618), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 586: {85: (1, {'@': 438}), 11: (1, {'@': 438}), 176: (1, {'@': 438}), 86: (1, {'@': 438}), 14: (1, {'@': 438}), 87: (1, {'@': 438}), 174: (1, {'@': 438}), 93: (1, {'@': 438}), 177: (1, {'@': 438}), 153: (1, {'@': 438}), 80: (1, {'@': 438}), 19: (1, {'@': 438}), 88: (1, {'@': 438}), 58: (1, {'@': 438}), 89: (1, {'@': 438}), 94: (1, {'@': 438}), 81: (1, {'@': 438}), 47: (1, {'@': 438}), 90: (1, {'@': 438}), 34: (1, {'@': 438}), 91: (1, {'@': 438}), 92: (1, {'@': 438}), 82: (1, {'@': 438}), 2: (1, {'@': 438}), 95: (1, {'@': 438}), 27: (1, {'@': 438}), 70: (1, {'@': 438}), 96: (1, {'@': 438}), 97: (1, {'@': 438}), 43: (1, {'@': 438}), 98: (1, {'@': 438}), 3: (1, {'@': 438}), 15: (1, {'@': 438}), 0: (1, {'@': 438}), 1: (1, {'@': 438}), 8: (1, {'@': 438}), 10: (1, {'@': 438}), 12: (1, {'@': 438}), 13: (1, {'@': 438}), 16: (1, {'@': 438}), 18: (1, {'@': 438}), 20: (1, {'@': 438}), 21: (1, {'@': 438}), 22: (1, {'@': 438}), 23: (1, {'@': 438}), 25: (1, {'@': 438}), 26: (1, {'@': 438}), 28: (1, {'@': 438}), 9: (1, {'@': 438}), 4: (1, {'@': 438}), 5: (1, {'@': 438}), 6: (1, {'@': 438}), 7: (1, {'@': 438}), 17: (1, {'@': 438}), 24: (1, {'@': 438})}, 587: {79: (0, 208), 78: (0, 216), 81: (0, 231), 84: (0, 247), 3: (0, 659), 80: (0, 255), 231: (0, 673), 83: (0, 263), 31: (0, 270)}, 588: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 64: (0, 422), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 589: {154: (1, {'@': 544}), 153: (1, {'@': 544}), 157: (1, {'@': 544}), 5: (1, {'@': 544})}, 590: {85: (1, {'@': 425}), 11: (1, {'@': 425}), 176: (1, {'@': 425}), 86: (1, {'@': 425}), 14: (1, {'@': 425}), 87: (1, {'@': 425}), 174: (1, {'@': 425}), 93: (1, {'@': 425}), 177: (1, {'@': 425}), 153: (1, {'@': 425}), 80: (1, {'@': 425}), 19: (1, {'@': 425}), 88: (1, {'@': 425}), 58: (1, {'@': 425}), 89: (1, {'@': 425}), 94: (1, {'@': 425}), 81: (1, {'@': 425}), 47: (1, {'@': 425}), 90: (1, {'@': 425}), 34: (1, {'@': 425}), 91: (1, {'@': 425}), 92: (1, {'@': 425}), 82: (1, {'@': 425}), 2: (1, {'@': 425}), 95: (1, {'@': 425}), 27: (1, {'@': 425}), 70: (1, {'@': 425}), 96: (1, {'@': 425}), 97: (1, {'@': 425}), 43: (1, {'@': 425}), 98: (1, {'@': 425}), 3: (1, {'@': 425}), 15: (1, {'@': 425}), 0: (1, {'@': 425}), 1: (1, {'@': 425}), 8: (1, {'@': 425}), 10: (1, {'@': 425}), 12: (1, {'@': 425}), 13: (1, {'@': 425}), 16: (1, {'@': 425}), 18: (1, {'@': 425}), 20: (1, {'@': 425}), 21: (1, {'@': 425}), 22: (1, {'@': 425}), 23: (1, {'@': 425}), 25: (1, {'@': 425}), 26: (1, {'@': 425}), 28: (1, {'@': 425}), 9: (1, {'@': 425}), 4: (1, {'@': 425}), 5: (1, {'@': 425}), 6: (1, {'@': 425}), 7: (1, {'@': 425}), 17: (1, {'@': 425}), 24: (1, {'@': 425})}, 591: {29: (0, 514), 59: (0, 557), 49: (0, 483), 30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 293), 61: (0, 581), 34: (0, 645), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 63: (0, 675), 38: (0, 601), 39: (0, 608), 44: (0, 321), 40: (0, 616), 41: (0, 689), 42: (0, 696), 65: (0, 334), 50: (0, 337), 45: (0, 736), 47: (0, 244), 48: (0, 467), 66: (0, 354), 68: (0, 697), 57: (0, 359), 69: (0, 371), 70: (0, 710), 71: (0, 716), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 74: (0, 243), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 592: {94: (0, 576), 270: (0, 662), 97: (0, 584), 85: (1, {'@': 380}), 58: (1, {'@': 380}), 89: (1, {'@': 380}), 11: (1, {'@': 380}), 90: (1, {'@': 380}), 86: (1, {'@': 380}), 14: (1, {'@': 380}), 91: (1, {'@': 380}), 92: (1, {'@': 380}), 87: (1, {'@': 380}), 19: (1, {'@': 380}), 2: (1, {'@': 380}), 93: (1, {'@': 380}), 95: (1, {'@': 380}), 27: (1, {'@': 380}), 96: (1, {'@': 380}), 98: (1, {'@': 380}), 3: (1, {'@': 380}), 88: (1, {'@': 380}), 15: (1, {'@': 380}), 0: (1, {'@': 380}), 1: (1, {'@': 380}), 8: (1, {'@': 380}), 10: (1, {'@': 380}), 12: (1, {'@': 380}), 13: (1, {'@': 380}), 16: (1, {'@': 380}), 18: (1, {'@': 380}), 20: (1, {'@': 380}), 21: (1, {'@': 380}), 22: (1, {'@': 380}), 23: (1, {'@': 380}), 25: (1, {'@': 380}), 26: (1, {'@': 380}), 28: (1, {'@': 380}), 9: (1, {'@': 380}), 5: (1, {'@': 380}), 4: (1, {'@': 380}), 6: (1, {'@': 380}), 7: (1, {'@': 380}), 17: (1, {'@': 380}), 24: (1, {'@': 380})}, 593: {2: (1, {'@': 607}), 9: (1, {'@': 607})}, 594: {2: (1, {'@': 613}), 3: (1, {'@': 613})}, 595: {0: (1, {'@': 244}), 1: (1, {'@': 244})}, 596: {85: (1, {'@': 437}), 11: (1, {'@': 437}), 176: (1, {'@': 437}), 86: (1, {'@': 437}), 14: (1, {'@': 437}), 87: (1, {'@': 437}), 174: (1, {'@': 437}), 93: (1, {'@': 437}), 177: (1, {'@': 437}), 153: (1, {'@': 437}), 80: (1, {'@': 437}), 19: (1, {'@': 437}), 88: (1, {'@': 437}), 58: (1, {'@': 437}), 89: (1, {'@': 437}), 94: (1, {'@': 437}), 81: (1, {'@': 437}), 47: (1, {'@': 437}), 90: (1, {'@': 437}), 34: (1, {'@': 437}), 91: (1, {'@': 437}), 92: (1, {'@': 437}), 82: (1, {'@': 437}), 2: (1, {'@': 437}), 95: (1, {'@': 437}), 27: (1, {'@': 437}), 70: (1, {'@': 437}), 96: (1, {'@': 437}), 97: (1, {'@': 437}), 43: (1, {'@': 437}), 98: (1, {'@': 437}), 3: (1, {'@': 437}), 15: (1, {'@': 437}), 0: (1, {'@': 437}), 1: (1, {'@': 437}), 8: (1, {'@': 437}), 10: (1, {'@': 437}), 12: (1, {'@': 437}), 13: (1, {'@': 437}), 16: (1, {'@': 437}), 18: (1, {'@': 437}), 20: (1, {'@': 437}), 21: (1, {'@': 437}), 22: (1, {'@': 437}), 23: (1, {'@': 437}), 25: (1, {'@': 437}), 26: (1, {'@': 437}), 28: (1, {'@': 437}), 9: (1, {'@': 437}), 4: (1, {'@': 437}), 5: (1, {'@': 437}), 6: (1, {'@': 437}), 7: (1, {'@': 437}), 17: (1, {'@': 437}), 24: (1, {'@': 437})}, 597: {3: (1, {'@': 505})}, 598: {0: (1, {'@': 205}), 1: (1, {'@': 205})}, 599: {8: (1, {'@': 446}), 10: (1, {'@': 446}), 12: (1, {'@': 446}), 20: (1, {'@': 446}), 13: (1, {'@': 446}), 21: (1, {'@': 446}), 22: (1, {'@': 446}), 23: (1, {'@': 446}), 2: (1, {'@': 446}), 25: (1, {'@': 446}), 26: (1, {'@': 446}), 28: (1, {'@': 446}), 15: (1, {'@': 446}), 16: (1, {'@': 446}), 0: (1, {'@': 446}), 18: (1, {'@': 446}), 19: (1, {'@': 446}), 1: (1, {'@': 446}), 9: (1, {'@': 446}), 6: (1, {'@': 446}), 3: (1, {'@': 446})}, 600: {2: (1, {'@': 611}), 3: (1, {'@': 611})}, 601: {30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 257), 61: (0, 581), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 39: (0, 608), 44: (0, 321), 40: (0, 616), 65: (0, 334), 47: (0, 244), 66: (0, 354), 68: (0, 697), 69: (0, 371), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 602: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 64: (0, 207), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 603: {3: (1, {'@': 507})}, 604: {0: (1, {'@': 197}), 1: (1, {'@': 197})}, 605: {33: (1, {'@': 220}), 68: (1, {'@': 220}), 53: (1, {'@': 220}), 37: (1, {'@': 220}), 55: (1, {'@': 220}), 60: (1, {'@': 220}), 66: (1, {'@': 220}), 56: (1, {'@': 220}), 32: (1, {'@': 220}), 44: (1, {'@': 220}), 76: (1, {'@': 220}), 72: (1, {'@': 220}), 58: (1, {'@': 220}), 47: (1, {'@': 220}), 107: (1, {'@': 220}), 67: (1, {'@': 220}), 34: (1, {'@': 220}), 38: (1, {'@': 220}), 40: (1, {'@': 220}), 73: (1, {'@': 220}), 75: (1, {'@': 220}), 77: (1, {'@': 220}), 70: (1, {'@': 220}), 71: (1, {'@': 220}), 43: (1, {'@': 220}), 31: (1, {'@': 220}), 65: (1, {'@': 220})}, 606: {2: (1, {'@': 453}), 6: (1, {'@': 453})}, 607: {3: (1, {'@': 492})}, 608: {85: (1, {'@': 596}), 53: (1, {'@': 596}), 11: (1, {'@': 596}), 176: (1, {'@': 596}), 86: (1, {'@': 596}), 14: (1, {'@': 596}), 37: (1, {'@': 596}), 87: (1, {'@': 596}), 174: (1, {'@': 596}), 93: (1, {'@': 596}), 177: (1, {'@': 596}), 56: (1, {'@': 596}), 153: (1, {'@': 596}), 80: (1, {'@': 596}), 19: (1, {'@': 596}), 88: (1, {'@': 596}), 76: (1, {'@': 596}), 58: (1, {'@': 596}), 89: (1, {'@': 596}), 94: (1, {'@': 596}), 81: (1, {'@': 596}), 47: (1, {'@': 596}), 90: (1, {'@': 596}), 34: (1, {'@': 596}), 91: (1, {'@': 596}), 92: (1, {'@': 596}), 40: (1, {'@': 596}), 82: (1, {'@': 596}), 2: (1, {'@': 596}), 95: (1, {'@': 596}), 75: (1, {'@': 596}), 27: (1, {'@': 596}), 70: (1, {'@': 596}), 96: (1, {'@': 596}), 97: (1, {'@': 596}), 43: (1, {'@': 596}), 98: (1, {'@': 596}), 3: (1, {'@': 596}), 15: (1, {'@': 596}), 0: (1, {'@': 596}), 1: (1, {'@': 596}), 8: (1, {'@': 596}), 10: (1, {'@': 596}), 12: (1, {'@': 596}), 13: (1, {'@': 596}), 16: (1, {'@': 596}), 18: (1, {'@': 596}), 20: (1, {'@': 596}), 21: (1, {'@': 596}), 22: (1, {'@': 596}), 23: (1, {'@': 596}), 25: (1, {'@': 596}), 26: (1, {'@': 596}), 28: (1, {'@': 596}), 9: (1, {'@': 596}), 4: (1, {'@': 596}), 5: (1, {'@': 596}), 6: (1, {'@': 596}), 7: (1, {'@': 596}), 17: (1, {'@': 596}), 24: (1, {'@': 596})}, 609: {33: (1, {'@': 228}), 68: (1, {'@': 228}), 53: (1, {'@': 228}), 37: (1, {'@': 228}), 55: (1, {'@': 228}), 60: (1, {'@': 228}), 66: (1, {'@': 228}), 56: (1, {'@': 228}), 32: (1, {'@': 228}), 44: (1, {'@': 228}), 76: (1, {'@': 228}), 72: (1, {'@': 228}), 58: (1, {'@': 228}), 47: (1, {'@': 228}), 107: (1, {'@': 228}), 67: (1, {'@': 228}), 34: (1, {'@': 228}), 38: (1, {'@': 228}), 40: (1, {'@': 228}), 73: (1, {'@': 228}), 75: (1, {'@': 228}), 77: (1, {'@': 228}), 70: (1, {'@': 228}), 71: (1, {'@': 228}), 43: (1, {'@': 228}), 31: (1, {'@': 228}), 65: (1, {'@': 228})}, 610: {3: (1, {'@': 493})}, 611: {33: (1, {'@': 323}), 151: (1, {'@': 323}), 68: (1, {'@': 323}), 53: (1, {'@': 323}), 138: (1, {'@': 323}), 102: (1, {'@': 323}), 142: (1, {'@': 323}), 14: (1, {'@': 323}), 37: (1, {'@': 323}), 55: (1, {'@': 323}), 124: (1, {'@': 323}), 136: (1, {'@': 323}), 60: (1, {'@': 323}), 66: (1, {'@': 323}), 121: (1, {'@': 323}), 152: (1, {'@': 323}), 56: (1, {'@': 323}), 32: (1, {'@': 323}), 153: (1, {'@': 323}), 44: (1, {'@': 323}), 4: (1, {'@': 323}), 76: (1, {'@': 323}), 72: (1, {'@': 323}), 100: (1, {'@': 323}), 65: (1, {'@': 323}), 58: (1, {'@': 323}), 81: (1, {'@': 323}), 47: (1, {'@': 323}), 107: (1, {'@': 323}), 117: (1, {'@': 323}), 154: (1, {'@': 323}), 116: (1, {'@': 323}), 67: (1, {'@': 323}), 125: (1, {'@': 323}), 34: (1, {'@': 323}), 38: (1, {'@': 323}), 40: (1, {'@': 323}), 24: (1, {'@': 323}), 155: (1, {'@': 323}), 73: (1, {'@': 323}), 75: (1, {'@': 323}), 77: (1, {'@': 323}), 146: (1, {'@': 323}), 164: (1, {'@': 323}), 156: (1, {'@': 323}), 5: (1, {'@': 323}), 157: (1, {'@': 323}), 134: (1, {'@': 323}), 70: (1, {'@': 323}), 71: (1, {'@': 323}), 43: (1, {'@': 323}), 145: (1, {'@': 323}), 31: (1, {'@': 323}), 106: (1, {'@': 323}), 126: (1, {'@': 323}), 122: (1, {'@': 323}), 113: (1, {'@': 323}), 1: (1, {'@': 323}), 158: (1, {'@': 323})}, 612: {33: (1, {'@': 225}), 68: (1, {'@': 225}), 53: (1, {'@': 225}), 37: (1, {'@': 225}), 55: (1, {'@': 225}), 60: (1, {'@': 225}), 66: (1, {'@': 225}), 56: (1, {'@': 225}), 32: (1, {'@': 225}), 44: (1, {'@': 225}), 76: (1, {'@': 225}), 72: (1, {'@': 225}), 58: (1, {'@': 225}), 47: (1, {'@': 225}), 107: (1, {'@': 225}), 67: (1, {'@': 225}), 34: (1, {'@': 225}), 38: (1, {'@': 225}), 40: (1, {'@': 225}), 73: (1, {'@': 225}), 75: (1, {'@': 225}), 77: (1, {'@': 225}), 70: (1, {'@': 225}), 71: (1, {'@': 225}), 43: (1, {'@': 225}), 31: (1, {'@': 225}), 65: (1, {'@': 225})}, 613: {8: (1, {'@': 447}), 10: (1, {'@': 447}), 12: (1, {'@': 447}), 20: (1, {'@': 447}), 13: (1, {'@': 447}), 21: (1, {'@': 447}), 22: (1, {'@': 447}), 23: (1, {'@': 447}), 2: (1, {'@': 447}), 25: (1, {'@': 447}), 26: (1, {'@': 447}), 28: (1, {'@': 447}), 15: (1, {'@': 447}), 16: (1, {'@': 447}), 0: (1, {'@': 447}), 18: (1, {'@': 447}), 19: (1, {'@': 447}), 1: (1, {'@': 447}), 9: (1, {'@': 447}), 4: (1, {'@': 447}), 5: (1, {'@': 447}), 6: (1, {'@': 447}), 3: (1, {'@': 447})}, 614: {33: (1, {'@': 226}), 68: (1, {'@': 226}), 53: (1, {'@': 226}), 37: (1, {'@': 226}), 55: (1, {'@': 226}), 60: (1, {'@': 226}), 66: (1, {'@': 226}), 56: (1, {'@': 226}), 32: (1, {'@': 226}), 44: (1, {'@': 226}), 76: (1, {'@': 226}), 72: (1, {'@': 226}), 58: (1, {'@': 226}), 47: (1, {'@': 226}), 107: (1, {'@': 226}), 67: (1, {'@': 226}), 34: (1, {'@': 226}), 38: (1, {'@': 226}), 40: (1, {'@': 226}), 73: (1, {'@': 226}), 75: (1, {'@': 226}), 77: (1, {'@': 226}), 70: (1, {'@': 226}), 71: (1, {'@': 226}), 43: (1, {'@': 226}), 31: (1, {'@': 226}), 65: (1, {'@': 226})}, 615: {2: (1, {'@': 599}), 6: (1, {'@': 599})}, 616: {85: (1, {'@': 532}), 53: (1, {'@': 532}), 11: (1, {'@': 532}), 176: (1, {'@': 532}), 86: (1, {'@': 532}), 14: (1, {'@': 532}), 37: (1, {'@': 532}), 87: (1, {'@': 532}), 174: (1, {'@': 532}), 93: (1, {'@': 532}), 177: (1, {'@': 532}), 56: (1, {'@': 532}), 153: (1, {'@': 532}), 80: (1, {'@': 532}), 19: (1, {'@': 532}), 88: (1, {'@': 532}), 76: (1, {'@': 532}), 58: (1, {'@': 532}), 89: (1, {'@': 532}), 94: (1, {'@': 532}), 81: (1, {'@': 532}), 47: (1, {'@': 532}), 90: (1, {'@': 532}), 34: (1, {'@': 532}), 91: (1, {'@': 532}), 92: (1, {'@': 532}), 40: (1, {'@': 532}), 82: (1, {'@': 532}), 2: (1, {'@': 532}), 95: (1, {'@': 532}), 75: (1, {'@': 532}), 27: (1, {'@': 532}), 70: (1, {'@': 532}), 96: (1, {'@': 532}), 97: (1, {'@': 532}), 43: (1, {'@': 532}), 98: (1, {'@': 532}), 3: (1, {'@': 532}), 15: (1, {'@': 532}), 0: (1, {'@': 532}), 1: (1, {'@': 532}), 8: (1, {'@': 532}), 10: (1, {'@': 532}), 12: (1, {'@': 532}), 13: (1, {'@': 532}), 16: (1, {'@': 532}), 18: (1, {'@': 532}), 20: (1, {'@': 532}), 21: (1, {'@': 532}), 22: (1, {'@': 532}), 23: (1, {'@': 532}), 25: (1, {'@': 532}), 26: (1, {'@': 532}), 28: (1, {'@': 532}), 9: (1, {'@': 532}), 4: (1, {'@': 532}), 5: (1, {'@': 532}), 6: (1, {'@': 532}), 7: (1, {'@': 532}), 17: (1, {'@': 532}), 24: (1, {'@': 532})}, 617: {33: (1, {'@': 224}), 68: (1, {'@': 224}), 53: (1, {'@': 224}), 37: (1, {'@': 224}), 55: (1, {'@': 224}), 60: (1, {'@': 224}), 66: (1, {'@': 224}), 56: (1, {'@': 224}), 32: (1, {'@': 224}), 44: (1, {'@': 224}), 76: (1, {'@': 224}), 72: (1, {'@': 224}), 58: (1, {'@': 224}), 47: (1, {'@': 224}), 107: (1, {'@': 224}), 67: (1, {'@': 224}), 34: (1, {'@': 224}), 38: (1, {'@': 224}), 40: (1, {'@': 224}), 73: (1, {'@': 224}), 75: (1, {'@': 224}), 77: (1, {'@': 224}), 70: (1, {'@': 224}), 71: (1, {'@': 224}), 43: (1, {'@': 224}), 31: (1, {'@': 224}), 65: (1, {'@': 224})}, 618: {2: (1, {'@': 609}), 9: (1, {'@': 609})}, 619: {0: (1, {'@': 199}), 1: (1, {'@': 199})}, 620: {33: (1, {'@': 222}), 68: (1, {'@': 222}), 53: (1, {'@': 222}), 37: (1, {'@': 222}), 55: (1, {'@': 222}), 60: (1, {'@': 222}), 66: (1, {'@': 222}), 56: (1, {'@': 222}), 32: (1, {'@': 222}), 44: (1, {'@': 222}), 76: (1, {'@': 222}), 72: (1, {'@': 222}), 58: (1, {'@': 222}), 47: (1, {'@': 222}), 107: (1, {'@': 222}), 67: (1, {'@': 222}), 34: (1, {'@': 222}), 38: (1, {'@': 222}), 40: (1, {'@': 222}), 73: (1, {'@': 222}), 75: (1, {'@': 222}), 77: (1, {'@': 222}), 70: (1, {'@': 222}), 71: (1, {'@': 222}), 43: (1, {'@': 222}), 31: (1, {'@': 222}), 65: (1, {'@': 222})}, 621: {15: (0, 402)}, 622: {0: (1, {'@': 210}), 1: (1, {'@': 210})}, 623: {33: (1, {'@': 223}), 68: (1, {'@': 223}), 53: (1, {'@': 223}), 37: (1, {'@': 223}), 55: (1, {'@': 223}), 60: (1, {'@': 223}), 66: (1, {'@': 223}), 56: (1, {'@': 223}), 32: (1, {'@': 223}), 44: (1, {'@': 223}), 76: (1, {'@': 223}), 72: (1, {'@': 223}), 58: (1, {'@': 223}), 47: (1, {'@': 223}), 107: (1, {'@': 223}), 67: (1, {'@': 223}), 34: (1, {'@': 223}), 38: (1, {'@': 223}), 40: (1, {'@': 223}), 73: (1, {'@': 223}), 75: (1, {'@': 223}), 77: (1, {'@': 223}), 70: (1, {'@': 223}), 71: (1, {'@': 223}), 43: (1, {'@': 223}), 31: (1, {'@': 223}), 65: (1, {'@': 223})}, 624: {15: (0, 407)}, 625: {0: (1, {'@': 214}), 1: (1, {'@': 214})}, 626: {19: (0, 215), 0: (1, {'@': 217}), 1: (1, {'@': 217})}, 627: {7: (1, {'@': 571}), 175: (1, {'@': 571}), 33: (1, {'@': 571}), 151: (1, {'@': 571}), 68: (1, {'@': 571}), 53: (1, {'@': 571}), 138: (1, {'@': 571}), 102: (1, {'@': 571}), 142: (1, {'@': 571}), 124: (1, {'@': 571}), 14: (1, {'@': 571}), 136: (1, {'@': 571}), 37: (1, {'@': 571}), 55: (1, {'@': 571}), 60: (1, {'@': 571}), 66: (1, {'@': 571}), 113: (1, {'@': 571}), 121: (1, {'@': 571}), 152: (1, {'@': 571}), 56: (1, {'@': 571}), 32: (1, {'@': 571}), 153: (1, {'@': 571}), 44: (1, {'@': 571}), 4: (1, {'@': 571}), 76: (1, {'@': 571}), 1: (1, {'@': 571}), 72: (1, {'@': 571}), 100: (1, {'@': 571}), 58: (1, {'@': 571}), 81: (1, {'@': 571}), 47: (1, {'@': 571}), 107: (1, {'@': 571}), 117: (1, {'@': 571}), 154: (1, {'@': 571}), 116: (1, {'@': 571}), 67: (1, {'@': 571}), 125: (1, {'@': 571}), 34: (1, {'@': 571}), 38: (1, {'@': 571}), 40: (1, {'@': 571}), 73: (1, {'@': 571}), 24: (1, {'@': 571}), 155: (1, {'@': 571}), 122: (1, {'@': 571}), 77: (1, {'@': 571}), 75: (1, {'@': 571}), 146: (1, {'@': 571}), 164: (1, {'@': 571}), 156: (1, {'@': 571}), 134: (1, {'@': 571}), 157: (1, {'@': 571}), 70: (1, {'@': 571}), 71: (1, {'@': 571}), 158: (1, {'@': 571}), 43: (1, {'@': 571}), 145: (1, {'@': 571}), 31: (1, {'@': 571}), 106: (1, {'@': 571}), 126: (1, {'@': 571}), 65: (1, {'@': 571}), 5: (1, {'@': 571})}, 628: {33: (1, {'@': 189}), 151: (1, {'@': 189}), 68: (1, {'@': 189}), 53: (1, {'@': 189}), 138: (1, {'@': 189}), 102: (1, {'@': 189}), 142: (1, {'@': 189}), 14: (1, {'@': 189}), 37: (1, {'@': 189}), 55: (1, {'@': 189}), 124: (1, {'@': 189}), 136: (1, {'@': 189}), 60: (1, {'@': 189}), 66: (1, {'@': 189}), 121: (1, {'@': 189}), 152: (1, {'@': 189}), 56: (1, {'@': 189}), 32: (1, {'@': 189}), 153: (1, {'@': 189}), 44: (1, {'@': 189}), 4: (1, {'@': 189}), 76: (1, {'@': 189}), 72: (1, {'@': 189}), 100: (1, {'@': 189}), 65: (1, {'@': 189}), 58: (1, {'@': 189}), 81: (1, {'@': 189}), 47: (1, {'@': 189}), 107: (1, {'@': 189}), 117: (1, {'@': 189}), 154: (1, {'@': 189}), 116: (1, {'@': 189}), 67: (1, {'@': 189}), 125: (1, {'@': 189}), 34: (1, {'@': 189}), 38: (1, {'@': 189}), 40: (1, {'@': 189}), 24: (1, {'@': 189}), 155: (1, {'@': 189}), 73: (1, {'@': 189}), 75: (1, {'@': 189}), 77: (1, {'@': 189}), 146: (1, {'@': 189}), 164: (1, {'@': 189}), 156: (1, {'@': 189}), 5: (1, {'@': 189}), 157: (1, {'@': 189}), 134: (1, {'@': 189}), 70: (1, {'@': 189}), 71: (1, {'@': 189}), 43: (1, {'@': 189}), 145: (1, {'@': 189}), 31: (1, {'@': 189}), 106: (1, {'@': 189}), 126: (1, {'@': 189}), 122: (1, {'@': 189}), 113: (1, {'@': 189}), 1: (1, {'@': 189}), 158: (1, {'@': 189})}, 629: {33: (1, {'@': 232}), 68: (1, {'@': 232}), 53: (1, {'@': 232}), 37: (1, {'@': 232}), 55: (1, {'@': 232}), 60: (1, {'@': 232}), 66: (1, {'@': 232}), 56: (1, {'@': 232}), 32: (1, {'@': 232}), 44: (1, {'@': 232}), 76: (1, {'@': 232}), 72: (1, {'@': 232}), 58: (1, {'@': 232}), 47: (1, {'@': 232}), 107: (1, {'@': 232}), 67: (1, {'@': 232}), 34: (1, {'@': 232}), 38: (1, {'@': 232}), 40: (1, {'@': 232}), 73: (1, {'@': 232}), 75: (1, {'@': 232}), 77: (1, {'@': 232}), 70: (1, {'@': 232}), 71: (1, {'@': 232}), 43: (1, {'@': 232}), 31: (1, {'@': 232}), 65: (1, {'@': 232})}, 630: {154: (1, {'@': 115}), 153: (1, {'@': 115}), 157: (1, {'@': 115}), 5: (1, {'@': 115})}, 631: {2: (1, {'@': 361}), 3: (1, {'@': 361}), 19: (1, {'@': 361}), 0: (1, {'@': 361}), 1: (1, {'@': 361}), 15: (1, {'@': 361}), 8: (1, {'@': 361}), 10: (1, {'@': 361}), 12: (1, {'@': 361}), 20: (1, {'@': 361}), 13: (1, {'@': 361}), 21: (1, {'@': 361}), 22: (1, {'@': 361}), 23: (1, {'@': 361}), 25: (1, {'@': 361}), 26: (1, {'@': 361}), 28: (1, {'@': 361}), 16: (1, {'@': 361}), 18: (1, {'@': 361}), 5: (1, {'@': 361}), 4: (1, {'@': 361}), 6: (1, {'@': 361}), 9: (1, {'@': 361}), 17: (1, {'@': 361}), 24: (1, {'@': 361})}, 632: {33: (1, {'@': 231}), 68: (1, {'@': 231}), 53: (1, {'@': 231}), 37: (1, {'@': 231}), 55: (1, {'@': 231}), 60: (1, {'@': 231}), 66: (1, {'@': 231}), 56: (1, {'@': 231}), 32: (1, {'@': 231}), 44: (1, {'@': 231}), 76: (1, {'@': 231}), 72: (1, {'@': 231}), 58: (1, {'@': 231}), 47: (1, {'@': 231}), 107: (1, {'@': 231}), 67: (1, {'@': 231}), 34: (1, {'@': 231}), 38: (1, {'@': 231}), 40: (1, {'@': 231}), 73: (1, {'@': 231}), 75: (1, {'@': 231}), 77: (1, {'@': 231}), 70: (1, {'@': 231}), 71: (1, {'@': 231}), 43: (1, {'@': 231}), 31: (1, {'@': 231}), 65: (1, {'@': 231})}, 633: {0: (1, {'@': 297}), 1: (1, {'@': 297})}, 634: {0: (1, {'@': 204}), 1: (1, {'@': 204})}, 635: {33: (1, {'@': 230}), 68: (1, {'@': 230}), 53: (1, {'@': 230}), 37: (1, {'@': 230}), 55: (1, {'@': 230}), 60: (1, {'@': 230}), 66: (1, {'@': 230}), 56: (1, {'@': 230}), 32: (1, {'@': 230}), 44: (1, {'@': 230}), 76: (1, {'@': 230}), 72: (1, {'@': 230}), 58: (1, {'@': 230}), 47: (1, {'@': 230}), 107: (1, {'@': 230}), 67: (1, {'@': 230}), 34: (1, {'@': 230}), 38: (1, {'@': 230}), 40: (1, {'@': 230}), 73: (1, {'@': 230}), 75: (1, {'@': 230}), 77: (1, {'@': 230}), 70: (1, {'@': 230}), 71: (1, {'@': 230}), 43: (1, {'@': 230}), 31: (1, {'@': 230}), 65: (1, {'@': 230})}, 636: {15: (1, {'@': 175})}, 637: {31: (0, 265)}, 638: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 139: (0, 222), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 107: (0, 703), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 199: (0, 230), 61: (0, 581), 62: (0, 308), 63: (0, 675), 64: (0, 655), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 200: (0, 670), 76: (0, 757), 77: (0, 596)}, 639: {81: (0, 231), 80: (0, 255), 83: (0, 201), 84: (0, 211), 3: (1, {'@': 137})}, 640: {2: (1, {'@': 547}), 3: (1, {'@': 547})}, 641: {158: (1, {'@': 112})}, 642: {33: (1, {'@': 221}), 68: (1, {'@': 221}), 53: (1, {'@': 221}), 37: (1, {'@': 221}), 55: (1, {'@': 221}), 60: (1, {'@': 221}), 66: (1, {'@': 221}), 56: (1, {'@': 221}), 32: (1, {'@': 221}), 44: (1, {'@': 221}), 76: (1, {'@': 221}), 72: (1, {'@': 221}), 58: (1, {'@': 221}), 47: (1, {'@': 221}), 107: (1, {'@': 221}), 67: (1, {'@': 221}), 34: (1, {'@': 221}), 38: (1, {'@': 221}), 40: (1, {'@': 221}), 73: (1, {'@': 221}), 75: (1, {'@': 221}), 77: (1, {'@': 221}), 70: (1, {'@': 221}), 71: (1, {'@': 221}), 43: (1, {'@': 221}), 31: (1, {'@': 221}), 65: (1, {'@': 221})}, 643: {2: (0, 190), 3: (1, {'@': 130})}, 644: {193: (0, 125), 2: (0, 130), 3: (1, {'@': 499})}, 645: {33: (1, {'@': 388}), 68: (1, {'@': 388}), 53: (1, {'@': 388}), 37: (1, {'@': 388}), 55: (1, {'@': 388}), 60: (1, {'@': 388}), 66: (1, {'@': 388}), 56: (1, {'@': 388}), 32: (1, {'@': 388}), 44: (1, {'@': 388}), 76: (1, {'@': 388}), 72: (1, {'@': 388}), 47: (1, {'@': 388}), 34: (1, {'@': 388}), 38: (1, {'@': 388}), 40: (1, {'@': 388}), 73: (1, {'@': 388}), 75: (1, {'@': 388}), 77: (1, {'@': 388}), 71: (1, {'@': 388}), 70: (1, {'@': 388}), 43: (1, {'@': 388}), 31: (1, {'@': 388}), 65: (1, {'@': 388})}, 646: {40: (0, 107), 204: (0, 112)}, 647: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 64: (0, 0), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 648: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 64: (0, 669), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 649: {43: (1, {'@': 285}), 236: (1, {'@': 285}), 47: (1, {'@': 285})}, 650: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 64: (0, 621), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 651: {3: (1, {'@': 501})}, 652: {40: (0, 616), 75: (0, 399), 56: (0, 517), 39: (0, 513), 53: (0, 485), 37: (0, 674), 76: (0, 757), 85: (1, {'@': 440}), 11: (1, {'@': 440}), 176: (1, {'@': 440}), 86: (1, {'@': 440}), 14: (1, {'@': 440}), 87: (1, {'@': 440}), 174: (1, {'@': 440}), 93: (1, {'@': 440}), 177: (1, {'@': 440}), 153: (1, {'@': 440}), 80: (1, {'@': 440}), 19: (1, {'@': 440}), 88: (1, {'@': 440}), 58: (1, {'@': 440}), 89: (1, {'@': 440}), 94: (1, {'@': 440}), 81: (1, {'@': 440}), 47: (1, {'@': 440}), 90: (1, {'@': 440}), 34: (1, {'@': 440}), 91: (1, {'@': 440}), 92: (1, {'@': 440}), 82: (1, {'@': 440}), 2: (1, {'@': 440}), 95: (1, {'@': 440}), 27: (1, {'@': 440}), 70: (1, {'@': 440}), 96: (1, {'@': 440}), 97: (1, {'@': 440}), 43: (1, {'@': 440}), 98: (1, {'@': 440}), 3: (1, {'@': 440}), 15: (1, {'@': 440}), 0: (1, {'@': 440}), 1: (1, {'@': 440}), 8: (1, {'@': 440}), 10: (1, {'@': 440}), 12: (1, {'@': 440}), 13: (1, {'@': 440}), 16: (1, {'@': 440}), 18: (1, {'@': 440}), 20: (1, {'@': 440}), 21: (1, {'@': 440}), 22: (1, {'@': 440}), 23: (1, {'@': 440}), 25: (1, {'@': 440}), 26: (1, {'@': 440}), 28: (1, {'@': 440}), 9: (1, {'@': 440}), 4: (1, {'@': 440}), 5: (1, {'@': 440}), 6: (1, {'@': 440}), 7: (1, {'@': 440}), 17: (1, {'@': 440}), 24: (1, {'@': 440})}, 653: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 213: (0, 117), 63: (0, 675), 64: (0, 122), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 77: (0, 596), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 271: (0, 127), 76: (0, 757)}, 654: {85: (1, {'@': 590}), 8: (1, {'@': 590}), 9: (1, {'@': 590}), 11: (1, {'@': 590}), 12: (1, {'@': 590}), 86: (1, {'@': 590}), 87: (1, {'@': 590}), 15: (1, {'@': 590}), 0: (1, {'@': 590}), 88: (1, {'@': 590}), 4: (1, {'@': 590}), 58: (1, {'@': 590}), 89: (1, {'@': 590}), 90: (1, {'@': 590}), 20: (1, {'@': 590}), 6: (1, {'@': 590}), 91: (1, {'@': 590}), 92: (1, {'@': 590}), 21: (1, {'@': 590}), 2: (1, {'@': 590}), 25: (1, {'@': 590}), 26: (1, {'@': 590}), 27: (1, {'@': 590}), 5: (1, {'@': 590}), 3: (1, {'@': 590}), 7: (1, {'@': 590}), 10: (1, {'@': 590}), 13: (1, {'@': 590}), 14: (1, {'@': 590}), 93: (1, {'@': 590}), 16: (1, {'@': 590}), 17: (1, {'@': 590}), 18: (1, {'@': 590}), 19: (1, {'@': 590}), 94: (1, {'@': 590}), 22: (1, {'@': 590}), 23: (1, {'@': 590}), 24: (1, {'@': 590}), 95: (1, {'@': 590}), 28: (1, {'@': 590}), 96: (1, {'@': 590}), 97: (1, {'@': 590}), 98: (1, {'@': 590}), 1: (1, {'@': 590})}, 655: {272: (0, 676), 2: (0, 683), 15: (1, {'@': 471}), 0: (1, {'@': 471}), 1: (1, {'@': 471}), 3: (1, {'@': 471}), 19: (1, {'@': 471})}, 656: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 47: (0, 244), 48: (0, 467), 49: (0, 483), 129: (0, 520), 50: (0, 337), 53: (0, 485), 74: (0, 528), 54: (0, 293), 55: (0, 586), 56: (0, 517), 81: (0, 525), 57: (0, 359), 59: (0, 557), 60: (0, 573), 61: (0, 581), 63: (0, 675), 196: (0, 417), 65: (0, 334), 66: (0, 354), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 657: {7: (0, 624), 33: (1, {'@': 332}), 151: (1, {'@': 332}), 68: (1, {'@': 332}), 53: (1, {'@': 332}), 138: (1, {'@': 332}), 102: (1, {'@': 332}), 142: (1, {'@': 332}), 14: (1, {'@': 332}), 37: (1, {'@': 332}), 55: (1, {'@': 332}), 124: (1, {'@': 332}), 136: (1, {'@': 332}), 60: (1, {'@': 332}), 66: (1, {'@': 332}), 121: (1, {'@': 332}), 152: (1, {'@': 332}), 56: (1, {'@': 332}), 32: (1, {'@': 332}), 153: (1, {'@': 332}), 44: (1, {'@': 332}), 4: (1, {'@': 332}), 76: (1, {'@': 332}), 72: (1, {'@': 332}), 100: (1, {'@': 332}), 65: (1, {'@': 332}), 58: (1, {'@': 332}), 81: (1, {'@': 332}), 47: (1, {'@': 332}), 107: (1, {'@': 332}), 117: (1, {'@': 332}), 154: (1, {'@': 332}), 116: (1, {'@': 332}), 67: (1, {'@': 332}), 125: (1, {'@': 332}), 34: (1, {'@': 332}), 38: (1, {'@': 332}), 40: (1, {'@': 332}), 24: (1, {'@': 332}), 155: (1, {'@': 332}), 73: (1, {'@': 332}), 75: (1, {'@': 332}), 77: (1, {'@': 332}), 146: (1, {'@': 332}), 164: (1, {'@': 332}), 156: (1, {'@': 332}), 5: (1, {'@': 332}), 157: (1, {'@': 332}), 134: (1, {'@': 332}), 70: (1, {'@': 332}), 71: (1, {'@': 332}), 43: (1, {'@': 332}), 145: (1, {'@': 332}), 31: (1, {'@': 332}), 106: (1, {'@': 332}), 126: (1, {'@': 332}), 122: (1, {'@': 332}), 113: (1, {'@': 332}), 1: (1, {'@': 332}), 158: (1, {'@': 332})}, 658: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 64: (0, 135), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 659: {253: (0, 588), 15: (0, 411)}, 660: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 47: (0, 244), 48: (0, 467), 49: (0, 483), 129: (0, 520), 50: (0, 337), 53: (0, 485), 74: (0, 528), 54: (0, 293), 55: (0, 586), 56: (0, 517), 81: (0, 525), 57: (0, 359), 59: (0, 557), 60: (0, 573), 61: (0, 581), 63: (0, 675), 65: (0, 334), 196: (0, 536), 66: (0, 354), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 661: {232: (0, 132), 273: (0, 137), 187: (0, 142), 31: (0, 694)}, 662: {59: (0, 557), 30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 293), 61: (0, 581), 34: (0, 645), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 38: (0, 601), 39: (0, 608), 44: (0, 321), 40: (0, 616), 41: (0, 689), 65: (0, 334), 45: (0, 736), 50: (0, 337), 47: (0, 244), 66: (0, 354), 68: (0, 697), 57: (0, 359), 69: (0, 371), 70: (0, 710), 71: (0, 716), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 42: (0, 7), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 663: {7: (0, 580), 33: (1, {'@': 337}), 151: (1, {'@': 337}), 68: (1, {'@': 337}), 53: (1, {'@': 337}), 138: (1, {'@': 337}), 102: (1, {'@': 337}), 142: (1, {'@': 337}), 14: (1, {'@': 337}), 37: (1, {'@': 337}), 55: (1, {'@': 337}), 124: (1, {'@': 337}), 136: (1, {'@': 337}), 60: (1, {'@': 337}), 66: (1, {'@': 337}), 121: (1, {'@': 337}), 152: (1, {'@': 337}), 56: (1, {'@': 337}), 32: (1, {'@': 337}), 153: (1, {'@': 337}), 44: (1, {'@': 337}), 4: (1, {'@': 337}), 76: (1, {'@': 337}), 72: (1, {'@': 337}), 100: (1, {'@': 337}), 65: (1, {'@': 337}), 58: (1, {'@': 337}), 81: (1, {'@': 337}), 47: (1, {'@': 337}), 107: (1, {'@': 337}), 117: (1, {'@': 337}), 154: (1, {'@': 337}), 116: (1, {'@': 337}), 67: (1, {'@': 337}), 125: (1, {'@': 337}), 34: (1, {'@': 337}), 38: (1, {'@': 337}), 40: (1, {'@': 337}), 24: (1, {'@': 337}), 155: (1, {'@': 337}), 73: (1, {'@': 337}), 75: (1, {'@': 337}), 77: (1, {'@': 337}), 146: (1, {'@': 337}), 164: (1, {'@': 337}), 156: (1, {'@': 337}), 5: (1, {'@': 337}), 157: (1, {'@': 337}), 134: (1, {'@': 337}), 70: (1, {'@': 337}), 71: (1, {'@': 337}), 43: (1, {'@': 337}), 145: (1, {'@': 337}), 31: (1, {'@': 337}), 106: (1, {'@': 337}), 126: (1, {'@': 337}), 122: (1, {'@': 337}), 113: (1, {'@': 337}), 1: (1, {'@': 337}), 158: (1, {'@': 337})}, 664: {0: (1, {'@': 519}), 1: (1, {'@': 519}), 3: (1, {'@': 519}), 19: (1, {'@': 519})}, 665: {7: (1, {'@': 570}), 175: (1, {'@': 570}), 33: (1, {'@': 570}), 151: (1, {'@': 570}), 68: (1, {'@': 570}), 53: (1, {'@': 570}), 138: (1, {'@': 570}), 102: (1, {'@': 570}), 142: (1, {'@': 570}), 124: (1, {'@': 570}), 14: (1, {'@': 570}), 136: (1, {'@': 570}), 37: (1, {'@': 570}), 55: (1, {'@': 570}), 60: (1, {'@': 570}), 66: (1, {'@': 570}), 113: (1, {'@': 570}), 121: (1, {'@': 570}), 152: (1, {'@': 570}), 56: (1, {'@': 570}), 32: (1, {'@': 570}), 153: (1, {'@': 570}), 44: (1, {'@': 570}), 4: (1, {'@': 570}), 76: (1, {'@': 570}), 1: (1, {'@': 570}), 72: (1, {'@': 570}), 100: (1, {'@': 570}), 58: (1, {'@': 570}), 81: (1, {'@': 570}), 47: (1, {'@': 570}), 107: (1, {'@': 570}), 117: (1, {'@': 570}), 154: (1, {'@': 570}), 116: (1, {'@': 570}), 67: (1, {'@': 570}), 125: (1, {'@': 570}), 34: (1, {'@': 570}), 38: (1, {'@': 570}), 40: (1, {'@': 570}), 73: (1, {'@': 570}), 24: (1, {'@': 570}), 155: (1, {'@': 570}), 122: (1, {'@': 570}), 77: (1, {'@': 570}), 75: (1, {'@': 570}), 146: (1, {'@': 570}), 164: (1, {'@': 570}), 156: (1, {'@': 570}), 134: (1, {'@': 570}), 157: (1, {'@': 570}), 70: (1, {'@': 570}), 71: (1, {'@': 570}), 158: (1, {'@': 570}), 43: (1, {'@': 570}), 145: (1, {'@': 570}), 31: (1, {'@': 570}), 106: (1, {'@': 570}), 126: (1, {'@': 570}), 65: (1, {'@': 570}), 5: (1, {'@': 570})}, 666: {209: (0, 362), 5: (0, 104), 208: (0, 114), 4: (0, 119), 19: (0, 140), 194: (0, 134), 2: (1, {'@': 514}), 3: (1, {'@': 514})}, 667: {274: (0, 544), 11: (0, 552), 2: (1, {'@': 365}), 3: (1, {'@': 365}), 19: (1, {'@': 365}), 14: (1, {'@': 365}), 0: (1, {'@': 365}), 1: (1, {'@': 365}), 15: (1, {'@': 365}), 8: (1, {'@': 365}), 10: (1, {'@': 365}), 12: (1, {'@': 365}), 20: (1, {'@': 365}), 13: (1, {'@': 365}), 21: (1, {'@': 365}), 22: (1, {'@': 365}), 23: (1, {'@': 365}), 25: (1, {'@': 365}), 26: (1, {'@': 365}), 28: (1, {'@': 365}), 16: (1, {'@': 365}), 18: (1, {'@': 365}), 5: (1, {'@': 365}), 4: (1, {'@': 365}), 6: (1, {'@': 365}), 9: (1, {'@': 365}), 24: (1, {'@': 365}), 17: (1, {'@': 365}), 7: (1, {'@': 365})}, 668: {0: (1, {'@': 206}), 1: (1, {'@': 206})}, 669: {0: (1, {'@': 521}), 1: (1, {'@': 521}), 3: (1, {'@': 521}), 19: (1, {'@': 521})}, 670: {15: (1, {'@': 472}), 0: (1, {'@': 472}), 1: (1, {'@': 472}), 3: (1, {'@': 472}), 19: (1, {'@': 472})}, 671: {184: (0, 627), 175: (0, 650), 33: (1, {'@': 333}), 102: (1, {'@': 333}), 124: (1, {'@': 333}), 136: (1, {'@': 333}), 121: (1, {'@': 333}), 32: (1, {'@': 333}), 4: (1, {'@': 333}), 76: (1, {'@': 333}), 100: (1, {'@': 333}), 58: (1, {'@': 333}), 117: (1, {'@': 333}), 116: (1, {'@': 333}), 125: (1, {'@': 333}), 38: (1, {'@': 333}), 40: (1, {'@': 333}), 73: (1, {'@': 333}), 77: (1, {'@': 333}), 146: (1, {'@': 333}), 164: (1, {'@': 333}), 156: (1, {'@': 333}), 5: (1, {'@': 333}), 134: (1, {'@': 333}), 70: (1, {'@': 333}), 71: (1, {'@': 333}), 106: (1, {'@': 333}), 126: (1, {'@': 333}), 65: (1, {'@': 333}), 7: (1, {'@': 333}), 151: (1, {'@': 333}), 68: (1, {'@': 333}), 53: (1, {'@': 333}), 138: (1, {'@': 333}), 142: (1, {'@': 333}), 14: (1, {'@': 333}), 37: (1, {'@': 333}), 55: (1, {'@': 333}), 60: (1, {'@': 333}), 66: (1, {'@': 333}), 152: (1, {'@': 333}), 56: (1, {'@': 333}), 153: (1, {'@': 333}), 44: (1, {'@': 333}), 1: (1, {'@': 333}), 72: (1, {'@': 333}), 81: (1, {'@': 333}), 47: (1, {'@': 333}), 107: (1, {'@': 333}), 154: (1, {'@': 333}), 67: (1, {'@': 333}), 34: (1, {'@': 333}), 24: (1, {'@': 333}), 155: (1, {'@': 333}), 75: (1, {'@': 333}), 157: (1, {'@': 333}), 158: (1, {'@': 333}), 43: (1, {'@': 333}), 145: (1, {'@': 333}), 31: (1, {'@': 333}), 122: (1, {'@': 333}), 113: (1, {'@': 333})}, 672: {3: (1, {'@': 500})}, 673: {3: (0, 414)}, 674: {85: (1, {'@': 533}), 53: (1, {'@': 533}), 11: (1, {'@': 533}), 176: (1, {'@': 533}), 86: (1, {'@': 533}), 14: (1, {'@': 533}), 37: (1, {'@': 533}), 87: (1, {'@': 533}), 174: (1, {'@': 533}), 93: (1, {'@': 533}), 177: (1, {'@': 533}), 56: (1, {'@': 533}), 153: (1, {'@': 533}), 80: (1, {'@': 533}), 19: (1, {'@': 533}), 88: (1, {'@': 533}), 76: (1, {'@': 533}), 58: (1, {'@': 533}), 89: (1, {'@': 533}), 94: (1, {'@': 533}), 81: (1, {'@': 533}), 47: (1, {'@': 533}), 90: (1, {'@': 533}), 34: (1, {'@': 533}), 91: (1, {'@': 533}), 92: (1, {'@': 533}), 40: (1, {'@': 533}), 82: (1, {'@': 533}), 2: (1, {'@': 533}), 95: (1, {'@': 533}), 75: (1, {'@': 533}), 27: (1, {'@': 533}), 70: (1, {'@': 533}), 96: (1, {'@': 533}), 97: (1, {'@': 533}), 43: (1, {'@': 533}), 98: (1, {'@': 533}), 3: (1, {'@': 533}), 15: (1, {'@': 533}), 0: (1, {'@': 533}), 1: (1, {'@': 533}), 8: (1, {'@': 533}), 10: (1, {'@': 533}), 12: (1, {'@': 533}), 13: (1, {'@': 533}), 16: (1, {'@': 533}), 18: (1, {'@': 533}), 20: (1, {'@': 533}), 21: (1, {'@': 533}), 22: (1, {'@': 533}), 23: (1, {'@': 533}), 25: (1, {'@': 533}), 26: (1, {'@': 533}), 28: (1, {'@': 533}), 9: (1, {'@': 533}), 4: (1, {'@': 533}), 5: (1, {'@': 533}), 6: (1, {'@': 533}), 7: (1, {'@': 533}), 17: (1, {'@': 533}), 24: (1, {'@': 533})}, 675: {92: (1, {'@': 373}), 85: (1, {'@': 373}), 87: (1, {'@': 373}), 19: (1, {'@': 373}), 2: (1, {'@': 373}), 93: (1, {'@': 373}), 95: (1, {'@': 373}), 58: (1, {'@': 373}), 27: (1, {'@': 373}), 11: (1, {'@': 373}), 90: (1, {'@': 373}), 96: (1, {'@': 373}), 98: (1, {'@': 373}), 3: (1, {'@': 373}), 88: (1, {'@': 373}), 14: (1, {'@': 373}), 15: (1, {'@': 373}), 0: (1, {'@': 373}), 1: (1, {'@': 373}), 8: (1, {'@': 373}), 10: (1, {'@': 373}), 12: (1, {'@': 373}), 20: (1, {'@': 373}), 13: (1, {'@': 373}), 21: (1, {'@': 373}), 22: (1, {'@': 373}), 23: (1, {'@': 373}), 25: (1, {'@': 373}), 26: (1, {'@': 373}), 28: (1, {'@': 373}), 16: (1, {'@': 373}), 18: (1, {'@': 373}), 9: (1, {'@': 373}), 5: (1, {'@': 373}), 4: (1, {'@': 373}), 6: (1, {'@': 373}), 7: (1, {'@': 373}), 17: (1, {'@': 373}), 24: (1, {'@': 373})}, 676: {2: (0, 13), 15: (1, {'@': 474}), 0: (1, {'@': 474}), 1: (1, {'@': 474}), 3: (1, {'@': 474}), 19: (1, {'@': 474})}, 677: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 129: (0, 613), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 81: (0, 525), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 108: (0, 731), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596), 64: (0, 599), 21: (1, {'@': 236}), 22: (1, {'@': 236}), 8: (1, {'@': 236}), 23: (1, {'@': 236}), 10: (1, {'@': 236}), 25: (1, {'@': 236}), 26: (1, {'@': 236}), 28: (1, {'@': 236}), 15: (1, {'@': 236}), 16: (1, {'@': 236}), 0: (1, {'@': 236}), 12: (1, {'@': 236}), 20: (1, {'@': 236}), 13: (1, {'@': 236}), 18: (1, {'@': 236}), 19: (1, {'@': 236}), 1: (1, {'@': 236})}, 678: {1: (0, 630)}, 679: {187: (0, 691), 146: (0, 698), 31: (0, 694)}, 680: {85: (1, {'@': 416}), 11: (1, {'@': 416}), 176: (1, {'@': 416}), 86: (1, {'@': 416}), 14: (1, {'@': 416}), 87: (1, {'@': 416}), 174: (1, {'@': 416}), 93: (1, {'@': 416}), 177: (1, {'@': 416}), 153: (1, {'@': 416}), 80: (1, {'@': 416}), 19: (1, {'@': 416}), 88: (1, {'@': 416}), 58: (1, {'@': 416}), 89: (1, {'@': 416}), 94: (1, {'@': 416}), 81: (1, {'@': 416}), 47: (1, {'@': 416}), 90: (1, {'@': 416}), 34: (1, {'@': 416}), 91: (1, {'@': 416}), 92: (1, {'@': 416}), 82: (1, {'@': 416}), 2: (1, {'@': 416}), 95: (1, {'@': 416}), 27: (1, {'@': 416}), 70: (1, {'@': 416}), 96: (1, {'@': 416}), 97: (1, {'@': 416}), 43: (1, {'@': 416}), 98: (1, {'@': 416}), 3: (1, {'@': 416}), 15: (1, {'@': 416}), 0: (1, {'@': 416}), 1: (1, {'@': 416}), 8: (1, {'@': 416}), 10: (1, {'@': 416}), 12: (1, {'@': 416}), 13: (1, {'@': 416}), 16: (1, {'@': 416}), 18: (1, {'@': 416}), 20: (1, {'@': 416}), 21: (1, {'@': 416}), 22: (1, {'@': 416}), 23: (1, {'@': 416}), 25: (1, {'@': 416}), 26: (1, {'@': 416}), 28: (1, {'@': 416}), 9: (1, {'@': 416}), 4: (1, {'@': 416}), 5: (1, {'@': 416}), 6: (1, {'@': 416}), 7: (1, {'@': 416}), 17: (1, {'@': 416}), 24: (1, {'@': 416})}, 681: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 64: (0, 560), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 682: {0: (1, {'@': 195}), 1: (1, {'@': 195})}, 683: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 64: (0, 19), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596), 15: (1, {'@': 475}), 0: (1, {'@': 475}), 1: (1, {'@': 475}), 3: (1, {'@': 475}), 19: (1, {'@': 475})}, 684: {249: (0, 420), 29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 67: (0, 423), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 53: (0, 485), 52: (0, 426), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 250: (0, 429), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 685: {154: (1, {'@': 116}), 153: (1, {'@': 116}), 157: (1, {'@': 116}), 5: (1, {'@': 116})}, 686: {29: (0, 514), 59: (0, 557), 49: (0, 483), 30: (0, 404), 31: (0, 382), 48: (0, 258), 32: (0, 398), 60: (0, 573), 54: (0, 293), 61: (0, 581), 34: (0, 645), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 38: (0, 601), 39: (0, 608), 44: (0, 321), 40: (0, 616), 41: (0, 689), 42: (0, 696), 65: (0, 334), 50: (0, 337), 45: (0, 736), 47: (0, 244), 66: (0, 354), 68: (0, 697), 57: (0, 359), 69: (0, 371), 70: (0, 710), 71: (0, 716), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 687: {174: (0, 705), 31: (1, {'@': 264}), 146: (1, {'@': 264})}, 688: {3: (1, {'@': 502})}, 689: {85: (1, {'@': 387}), 58: (1, {'@': 387}), 89: (1, {'@': 387}), 94: (1, {'@': 387}), 11: (1, {'@': 387}), 81: (1, {'@': 387}), 90: (1, {'@': 387}), 176: (1, {'@': 387}), 86: (1, {'@': 387}), 14: (1, {'@': 387}), 34: (1, {'@': 387}), 91: (1, {'@': 387}), 92: (1, {'@': 387}), 87: (1, {'@': 387}), 82: (1, {'@': 387}), 2: (1, {'@': 387}), 93: (1, {'@': 387}), 95: (1, {'@': 387}), 27: (1, {'@': 387}), 177: (1, {'@': 387}), 88: (1, {'@': 387}), 153: (1, {'@': 387}), 70: (1, {'@': 387}), 96: (1, {'@': 387}), 97: (1, {'@': 387}), 98: (1, {'@': 387}), 3: (1, {'@': 387}), 19: (1, {'@': 387}), 15: (1, {'@': 387}), 0: (1, {'@': 387}), 1: (1, {'@': 387}), 8: (1, {'@': 387}), 10: (1, {'@': 387}), 12: (1, {'@': 387}), 13: (1, {'@': 387}), 16: (1, {'@': 387}), 18: (1, {'@': 387}), 20: (1, {'@': 387}), 21: (1, {'@': 387}), 22: (1, {'@': 387}), 23: (1, {'@': 387}), 25: (1, {'@': 387}), 26: (1, {'@': 387}), 28: (1, {'@': 387}), 9: (1, {'@': 387}), 4: (1, {'@': 387}), 5: (1, {'@': 387}), 6: (1, {'@': 387}), 7: (1, {'@': 387}), 17: (1, {'@': 387}), 24: (1, {'@': 387})}, 690: {189: (0, 150), 81: (0, 155), 31: (0, 159), 190: (0, 164), 15: (0, 169), 80: (0, 174), 254: (0, 179), 233: (0, 185)}, 691: {146: (0, 26)}, 692: {3: (1, {'@': 534}), 6: (1, {'@': 534})}, 693: {3: (0, 633)}, 694: {174: (0, 711), 275: (0, 717), 3: (1, {'@': 276}), 2: (1, {'@': 276}), 0: (1, {'@': 276}), 17: (1, {'@': 276}), 1: (1, {'@': 276}), 43: (1, {'@': 276}), 146: (1, {'@': 276})}, 695: {3: (0, 145)}, 696: {270: (0, 568), 94: (0, 576), 97: (0, 584), 276: (0, 592), 85: (1, {'@': 381}), 58: (1, {'@': 381}), 89: (1, {'@': 381}), 11: (1, {'@': 381}), 90: (1, {'@': 381}), 86: (1, {'@': 381}), 14: (1, {'@': 381}), 91: (1, {'@': 381}), 92: (1, {'@': 381}), 87: (1, {'@': 381}), 19: (1, {'@': 381}), 2: (1, {'@': 381}), 93: (1, {'@': 381}), 95: (1, {'@': 381}), 27: (1, {'@': 381}), 96: (1, {'@': 381}), 98: (1, {'@': 381}), 3: (1, {'@': 381}), 88: (1, {'@': 381}), 15: (1, {'@': 381}), 0: (1, {'@': 381}), 1: (1, {'@': 381}), 8: (1, {'@': 381}), 10: (1, {'@': 381}), 12: (1, {'@': 381}), 13: (1, {'@': 381}), 16: (1, {'@': 381}), 18: (1, {'@': 381}), 20: (1, {'@': 381}), 21: (1, {'@': 381}), 22: (1, {'@': 381}), 23: (1, {'@': 381}), 25: (1, {'@': 381}), 26: (1, {'@': 381}), 28: (1, {'@': 381}), 9: (1, {'@': 381}), 5: (1, {'@': 381}), 4: (1, {'@': 381}), 6: (1, {'@': 381}), 7: (1, {'@': 381}), 17: (1, {'@': 381}), 24: (1, {'@': 381})}, 697: {85: (1, {'@': 522}), 11: (1, {'@': 522}), 176: (1, {'@': 522}), 86: (1, {'@': 522}), 14: (1, {'@': 522}), 87: (1, {'@': 522}), 174: (1, {'@': 522}), 93: (1, {'@': 522}), 177: (1, {'@': 522}), 153: (1, {'@': 522}), 80: (1, {'@': 522}), 19: (1, {'@': 522}), 88: (1, {'@': 522}), 58: (1, {'@': 522}), 89: (1, {'@': 522}), 94: (1, {'@': 522}), 81: (1, {'@': 522}), 47: (1, {'@': 522}), 90: (1, {'@': 522}), 34: (1, {'@': 522}), 91: (1, {'@': 522}), 92: (1, {'@': 522}), 82: (1, {'@': 522}), 2: (1, {'@': 522}), 95: (1, {'@': 522}), 27: (1, {'@': 522}), 70: (1, {'@': 522}), 96: (1, {'@': 522}), 97: (1, {'@': 522}), 43: (1, {'@': 522}), 98: (1, {'@': 522}), 3: (1, {'@': 522}), 15: (1, {'@': 522}), 0: (1, {'@': 522}), 1: (1, {'@': 522}), 8: (1, {'@': 522}), 10: (1, {'@': 522}), 12: (1, {'@': 522}), 13: (1, {'@': 522}), 16: (1, {'@': 522}), 18: (1, {'@': 522}), 20: (1, {'@': 522}), 21: (1, {'@': 522}), 22: (1, {'@': 522}), 23: (1, {'@': 522}), 25: (1, {'@': 522}), 26: (1, {'@': 522}), 28: (1, {'@': 522}), 9: (1, {'@': 522}), 4: (1, {'@': 522}), 5: (1, {'@': 522}), 6: (1, {'@': 522}), 7: (1, {'@': 522}), 17: (1, {'@': 522}), 24: (1, {'@': 522})}, 698: {159: (0, 32), 31: (0, 36), 160: (0, 42), 81: (0, 48), 43: (0, 54)}, 699: {14: (1, {'@': 615}), 9: (1, {'@': 615}), 4: (1, {'@': 615}), 5: (1, {'@': 615}), 6: (1, {'@': 615}), 3: (1, {'@': 615})}, 700: {2: (0, 451), 0: (1, {'@': 315}), 1: (1, {'@': 315})}, 701: {31: (1, {'@': 558}), 146: (1, {'@': 558}), 174: (1, {'@': 558})}, 702: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 64: (0, 152), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596)}, 703: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 24: (0, 648), 54: (0, 293), 55: (0, 586), 56: (0, 517), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 64: (0, 655), 65: (0, 334), 66: (0, 354), 67: (0, 690), 199: (0, 664), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 200: (0, 670), 76: (0, 757), 77: (0, 596), 0: (1, {'@': 520}), 1: (1, {'@': 520}), 3: (1, {'@': 520}), 19: (1, {'@': 520})}, 704: {33: (1, {'@': 318}), 151: (1, {'@': 318}), 68: (1, {'@': 318}), 53: (1, {'@': 318}), 138: (1, {'@': 318}), 102: (1, {'@': 318}), 142: (1, {'@': 318}), 14: (1, {'@': 318}), 37: (1, {'@': 318}), 55: (1, {'@': 318}), 124: (1, {'@': 318}), 136: (1, {'@': 318}), 60: (1, {'@': 318}), 66: (1, {'@': 318}), 121: (1, {'@': 318}), 152: (1, {'@': 318}), 56: (1, {'@': 318}), 32: (1, {'@': 318}), 153: (1, {'@': 318}), 44: (1, {'@': 318}), 4: (1, {'@': 318}), 76: (1, {'@': 318}), 72: (1, {'@': 318}), 100: (1, {'@': 318}), 65: (1, {'@': 318}), 58: (1, {'@': 318}), 81: (1, {'@': 318}), 47: (1, {'@': 318}), 107: (1, {'@': 318}), 117: (1, {'@': 318}), 154: (1, {'@': 318}), 116: (1, {'@': 318}), 67: (1, {'@': 318}), 125: (1, {'@': 318}), 34: (1, {'@': 318}), 38: (1, {'@': 318}), 40: (1, {'@': 318}), 24: (1, {'@': 318}), 155: (1, {'@': 318}), 73: (1, {'@': 318}), 75: (1, {'@': 318}), 77: (1, {'@': 318}), 146: (1, {'@': 318}), 164: (1, {'@': 318}), 156: (1, {'@': 318}), 5: (1, {'@': 318}), 157: (1, {'@': 318}), 134: (1, {'@': 318}), 70: (1, {'@': 318}), 71: (1, {'@': 318}), 43: (1, {'@': 318}), 145: (1, {'@': 318}), 31: (1, {'@': 318}), 106: (1, {'@': 318}), 126: (1, {'@': 318}), 122: (1, {'@': 318}), 113: (1, {'@': 318}), 1: (1, {'@': 318}), 158: (1, {'@': 318})}, 705: {31: (1, {'@': 559}), 146: (1, {'@': 559}), 174: (1, {'@': 559})}, 706: {93: (0, 433)}, 707: {2: (1, {'@': 575}), 15: (1, {'@': 575})}, 708: {146: (0, 724)}, 709: {33: (1, {'@': 321}), 151: (1, {'@': 321}), 68: (1, {'@': 321}), 53: (1, {'@': 321}), 138: (1, {'@': 321}), 102: (1, {'@': 321}), 142: (1, {'@': 321}), 14: (1, {'@': 321}), 37: (1, {'@': 321}), 55: (1, {'@': 321}), 124: (1, {'@': 321}), 136: (1, {'@': 321}), 60: (1, {'@': 321}), 66: (1, {'@': 321}), 121: (1, {'@': 321}), 152: (1, {'@': 321}), 56: (1, {'@': 321}), 32: (1, {'@': 321}), 153: (1, {'@': 321}), 44: (1, {'@': 321}), 4: (1, {'@': 321}), 76: (1, {'@': 321}), 72: (1, {'@': 321}), 100: (1, {'@': 321}), 65: (1, {'@': 321}), 58: (1, {'@': 321}), 81: (1, {'@': 321}), 47: (1, {'@': 321}), 107: (1, {'@': 321}), 117: (1, {'@': 321}), 154: (1, {'@': 321}), 116: (1, {'@': 321}), 67: (1, {'@': 321}), 125: (1, {'@': 321}), 34: (1, {'@': 321}), 38: (1, {'@': 321}), 40: (1, {'@': 321}), 24: (1, {'@': 321}), 155: (1, {'@': 321}), 73: (1, {'@': 321}), 75: (1, {'@': 321}), 77: (1, {'@': 321}), 146: (1, {'@': 321}), 164: (1, {'@': 321}), 156: (1, {'@': 321}), 5: (1, {'@': 321}), 157: (1, {'@': 321}), 134: (1, {'@': 321}), 70: (1, {'@': 321}), 71: (1, {'@': 321}), 43: (1, {'@': 321}), 145: (1, {'@': 321}), 31: (1, {'@': 321}), 106: (1, {'@': 321}), 126: (1, {'@': 321}), 122: (1, {'@': 321}), 113: (1, {'@': 321}), 1: (1, {'@': 321}), 158: (1, {'@': 321})}, 710: {33: (1, {'@': 389}), 68: (1, {'@': 389}), 53: (1, {'@': 389}), 37: (1, {'@': 389}), 55: (1, {'@': 389}), 60: (1, {'@': 389}), 66: (1, {'@': 389}), 56: (1, {'@': 389}), 32: (1, {'@': 389}), 44: (1, {'@': 389}), 76: (1, {'@': 389}), 72: (1, {'@': 389}), 47: (1, {'@': 389}), 34: (1, {'@': 389}), 38: (1, {'@': 389}), 40: (1, {'@': 389}), 73: (1, {'@': 389}), 75: (1, {'@': 389}), 77: (1, {'@': 389}), 71: (1, {'@': 389}), 70: (1, {'@': 389}), 43: (1, {'@': 389}), 31: (1, {'@': 389}), 65: (1, {'@': 389})}, 711: {31: (0, 60)}, 712: {15: (0, 171), 2: (1, {'@': 452}), 6: (1, {'@': 452})}, 713: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 129: (0, 613), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 108: (0, 91), 56: (0, 517), 81: (0, 525), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596), 64: (0, 599), 3: (1, {'@': 443}), 6: (1, {'@': 443})}, 714: {2: (1, {'@': 563}), 0: (1, {'@': 563}), 1: (1, {'@': 563})}, 715: {277: (0, 679), 278: (0, 687), 31: (0, 694), 174: (0, 701), 187: (0, 708)}, 716: {33: (1, {'@': 390}), 68: (1, {'@': 390}), 53: (1, {'@': 390}), 37: (1, {'@': 390}), 55: (1, {'@': 390}), 60: (1, {'@': 390}), 66: (1, {'@': 390}), 56: (1, {'@': 390}), 32: (1, {'@': 390}), 44: (1, {'@': 390}), 76: (1, {'@': 390}), 72: (1, {'@': 390}), 47: (1, {'@': 390}), 34: (1, {'@': 390}), 38: (1, {'@': 390}), 40: (1, {'@': 390}), 73: (1, {'@': 390}), 75: (1, {'@': 390}), 77: (1, {'@': 390}), 71: (1, {'@': 390}), 70: (1, {'@': 390}), 43: (1, {'@': 390}), 31: (1, {'@': 390}), 65: (1, {'@': 390})}, 717: {174: (0, 67), 3: (1, {'@': 275}), 2: (1, {'@': 275}), 0: (1, {'@': 275}), 17: (1, {'@': 275}), 1: (1, {'@': 275}), 43: (1, {'@': 275}), 146: (1, {'@': 275})}, 718: {279: (0, 176), 2: (0, 181), 6: (1, {'@': 448})}, 719: {2: (0, 738), 21: (1, {'@': 235}), 22: (1, {'@': 235}), 8: (1, {'@': 235}), 23: (1, {'@': 235}), 10: (1, {'@': 235}), 25: (1, {'@': 235}), 26: (1, {'@': 235}), 28: (1, {'@': 235}), 15: (1, {'@': 235}), 16: (1, {'@': 235}), 0: (1, {'@': 235}), 12: (1, {'@': 235}), 20: (1, {'@': 235}), 13: (1, {'@': 235}), 18: (1, {'@': 235}), 19: (1, {'@': 235}), 1: (1, {'@': 235})}, 720: {15: (0, 436)}, 721: {15: (1, {'@': 163})}, 722: {2: (0, 677), 214: (0, 719), 21: (1, {'@': 233}), 22: (1, {'@': 233}), 8: (1, {'@': 233}), 23: (1, {'@': 233}), 10: (1, {'@': 233}), 25: (1, {'@': 233}), 26: (1, {'@': 233}), 28: (1, {'@': 233}), 15: (1, {'@': 233}), 16: (1, {'@': 233}), 0: (1, {'@': 233}), 12: (1, {'@': 233}), 20: (1, {'@': 233}), 13: (1, {'@': 233}), 18: (1, {'@': 233}), 19: (1, {'@': 233}), 1: (1, {'@': 233})}, 723: {0: (1, {'@': 242}), 1: (1, {'@': 242})}, 724: {159: (0, 32), 31: (0, 36), 160: (0, 74), 81: (0, 80), 43: (0, 87)}, 725: {6: (0, 186)}, 726: {0: (0, 745), 1: (0, 752)}, 727: {0: (1, {'@': 299}), 1: (1, {'@': 299})}, 728: {15: (1, {'@': 164})}, 729: {280: (0, 726), 0: (0, 733), 1: (0, 741)}, 730: {33: (1, {'@': 319}), 151: (1, {'@': 319}), 68: (1, {'@': 319}), 53: (1, {'@': 319}), 138: (1, {'@': 319}), 102: (1, {'@': 319}), 142: (1, {'@': 319}), 14: (1, {'@': 319}), 37: (1, {'@': 319}), 55: (1, {'@': 319}), 124: (1, {'@': 319}), 136: (1, {'@': 319}), 60: (1, {'@': 319}), 66: (1, {'@': 319}), 121: (1, {'@': 319}), 152: (1, {'@': 319}), 56: (1, {'@': 319}), 32: (1, {'@': 319}), 153: (1, {'@': 319}), 44: (1, {'@': 319}), 4: (1, {'@': 319}), 76: (1, {'@': 319}), 72: (1, {'@': 319}), 100: (1, {'@': 319}), 65: (1, {'@': 319}), 58: (1, {'@': 319}), 81: (1, {'@': 319}), 47: (1, {'@': 319}), 107: (1, {'@': 319}), 117: (1, {'@': 319}), 154: (1, {'@': 319}), 116: (1, {'@': 319}), 67: (1, {'@': 319}), 125: (1, {'@': 319}), 34: (1, {'@': 319}), 38: (1, {'@': 319}), 40: (1, {'@': 319}), 24: (1, {'@': 319}), 155: (1, {'@': 319}), 73: (1, {'@': 319}), 75: (1, {'@': 319}), 77: (1, {'@': 319}), 146: (1, {'@': 319}), 164: (1, {'@': 319}), 156: (1, {'@': 319}), 5: (1, {'@': 319}), 157: (1, {'@': 319}), 134: (1, {'@': 319}), 70: (1, {'@': 319}), 71: (1, {'@': 319}), 43: (1, {'@': 319}), 145: (1, {'@': 319}), 31: (1, {'@': 319}), 106: (1, {'@': 319}), 126: (1, {'@': 319}), 122: (1, {'@': 319}), 113: (1, {'@': 319}), 1: (1, {'@': 319}), 158: (1, {'@': 319})}, 731: {2: (1, {'@': 556}), 9: (1, {'@': 556}), 6: (1, {'@': 556}), 3: (1, {'@': 556}), 8: (1, {'@': 556}), 10: (1, {'@': 556}), 12: (1, {'@': 556}), 20: (1, {'@': 556}), 13: (1, {'@': 556}), 21: (1, {'@': 556}), 22: (1, {'@': 556}), 23: (1, {'@': 556}), 25: (1, {'@': 556}), 26: (1, {'@': 556}), 28: (1, {'@': 556}), 15: (1, {'@': 556}), 16: (1, {'@': 556}), 0: (1, {'@': 556}), 18: (1, {'@': 556}), 19: (1, {'@': 556}), 1: (1, {'@': 556})}, 732: {85: (1, {'@': 435}), 11: (1, {'@': 435}), 176: (1, {'@': 435}), 86: (1, {'@': 435}), 14: (1, {'@': 435}), 87: (1, {'@': 435}), 174: (1, {'@': 435}), 93: (1, {'@': 435}), 177: (1, {'@': 435}), 153: (1, {'@': 435}), 80: (1, {'@': 435}), 19: (1, {'@': 435}), 88: (1, {'@': 435}), 58: (1, {'@': 435}), 89: (1, {'@': 435}), 94: (1, {'@': 435}), 81: (1, {'@': 435}), 47: (1, {'@': 435}), 90: (1, {'@': 435}), 34: (1, {'@': 435}), 91: (1, {'@': 435}), 92: (1, {'@': 435}), 82: (1, {'@': 435}), 2: (1, {'@': 435}), 95: (1, {'@': 435}), 27: (1, {'@': 435}), 70: (1, {'@': 435}), 96: (1, {'@': 435}), 97: (1, {'@': 435}), 43: (1, {'@': 435}), 98: (1, {'@': 435}), 3: (1, {'@': 435}), 15: (1, {'@': 435}), 0: (1, {'@': 435}), 1: (1, {'@': 435}), 8: (1, {'@': 435}), 10: (1, {'@': 435}), 12: (1, {'@': 435}), 13: (1, {'@': 435}), 16: (1, {'@': 435}), 18: (1, {'@': 435}), 20: (1, {'@': 435}), 21: (1, {'@': 435}), 22: (1, {'@': 435}), 23: (1, {'@': 435}), 25: (1, {'@': 435}), 26: (1, {'@': 435}), 28: (1, {'@': 435}), 9: (1, {'@': 435}), 4: (1, {'@': 435}), 5: (1, {'@': 435}), 6: (1, {'@': 435}), 7: (1, {'@': 435}), 17: (1, {'@': 435}), 24: (1, {'@': 435})}, 733: {100: (0, 353), 101: (0, 358), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 24: (0, 715), 108: (0, 722), 45: (0, 736), 48: (0, 467), 49: (0, 483), 111: (0, 500), 112: (0, 507), 29: (0, 514), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 118: (0, 195), 119: (0, 205), 120: (0, 228), 47: (0, 244), 58: (0, 236), 121: (0, 260), 122: (0, 284), 54: (0, 293), 43: (0, 300), 62: (0, 308), 123: (0, 316), 44: (0, 321), 65: (0, 334), 50: (0, 337), 66: (0, 354), 57: (0, 359), 69: (0, 371), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 40: (0, 616), 129: (0, 613), 131: (0, 622), 130: (0, 619), 132: (0, 625), 46: (0, 631), 1: (0, 465), 133: (0, 634), 134: (0, 637), 109: (0, 473), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 145: (0, 646), 146: (0, 661), 147: (0, 668), 63: (0, 675), 148: (0, 682), 67: (0, 690), 68: (0, 697), 70: (0, 710), 71: (0, 716), 149: (0, 723), 73: (0, 737), 150: (0, 744), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 734: {54: (0, 444), 30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 61: (0, 581), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 39: (0, 608), 44: (0, 321), 40: (0, 616), 65: (0, 334), 47: (0, 244), 66: (0, 354), 68: (0, 697), 69: (0, 371), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 735: {2: (1, {'@': 549}), 15: (1, {'@': 549})}, 736: {30: (0, 404), 31: (0, 382), 32: (0, 398), 60: (0, 573), 54: (0, 293), 61: (0, 581), 34: (0, 645), 43: (0, 300), 33: (0, 408), 35: (0, 652), 37: (0, 674), 38: (0, 601), 39: (0, 608), 44: (0, 321), 40: (0, 616), 41: (0, 689), 65: (0, 334), 45: (0, 736), 47: (0, 244), 66: (0, 354), 68: (0, 697), 57: (0, 359), 50: (0, 748), 69: (0, 371), 71: (0, 716), 70: (0, 710), 53: (0, 485), 72: (0, 390), 73: (0, 737), 55: (0, 586), 75: (0, 399), 56: (0, 517), 76: (0, 757), 77: (0, 596)}, 737: {85: (1, {'@': 526}), 11: (1, {'@': 526}), 176: (1, {'@': 526}), 86: (1, {'@': 526}), 14: (1, {'@': 526}), 87: (1, {'@': 526}), 174: (1, {'@': 526}), 93: (1, {'@': 526}), 177: (1, {'@': 526}), 153: (1, {'@': 526}), 80: (1, {'@': 526}), 19: (1, {'@': 526}), 88: (1, {'@': 526}), 58: (1, {'@': 526}), 89: (1, {'@': 526}), 94: (1, {'@': 526}), 81: (1, {'@': 526}), 47: (1, {'@': 526}), 90: (1, {'@': 526}), 34: (1, {'@': 526}), 91: (1, {'@': 526}), 92: (1, {'@': 526}), 82: (1, {'@': 526}), 2: (1, {'@': 526}), 95: (1, {'@': 526}), 27: (1, {'@': 526}), 70: (1, {'@': 526}), 96: (1, {'@': 526}), 97: (1, {'@': 526}), 43: (1, {'@': 526}), 98: (1, {'@': 526}), 3: (1, {'@': 526}), 15: (1, {'@': 526}), 0: (1, {'@': 526}), 1: (1, {'@': 526}), 8: (1, {'@': 526}), 10: (1, {'@': 526}), 12: (1, {'@': 526}), 13: (1, {'@': 526}), 16: (1, {'@': 526}), 18: (1, {'@': 526}), 20: (1, {'@': 526}), 21: (1, {'@': 526}), 22: (1, {'@': 526}), 23: (1, {'@': 526}), 25: (1, {'@': 526}), 26: (1, {'@': 526}), 28: (1, {'@': 526}), 9: (1, {'@': 526}), 4: (1, {'@': 526}), 5: (1, {'@': 526}), 6: (1, {'@': 526}), 7: (1, {'@': 526}), 17: (1, {'@': 526}), 24: (1, {'@': 526})}, 738: {29: (0, 514), 30: (0, 404), 31: (0, 382), 32: (0, 398), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 38: (0, 601), 39: (0, 608), 40: (0, 616), 129: (0, 613), 41: (0, 689), 42: (0, 696), 43: (0, 300), 44: (0, 321), 45: (0, 736), 46: (0, 631), 47: (0, 244), 48: (0, 467), 49: (0, 483), 50: (0, 337), 51: (0, 522), 52: (0, 530), 53: (0, 485), 54: (0, 293), 55: (0, 586), 108: (0, 91), 56: (0, 517), 81: (0, 525), 57: (0, 359), 58: (0, 236), 59: (0, 557), 60: (0, 573), 61: (0, 581), 62: (0, 308), 63: (0, 675), 65: (0, 334), 66: (0, 354), 67: (0, 690), 68: (0, 697), 69: (0, 371), 70: (0, 710), 71: (0, 716), 72: (0, 390), 73: (0, 737), 74: (0, 394), 75: (0, 399), 76: (0, 757), 77: (0, 596), 64: (0, 599), 21: (1, {'@': 234}), 22: (1, {'@': 234}), 8: (1, {'@': 234}), 23: (1, {'@': 234}), 10: (1, {'@': 234}), 25: (1, {'@': 234}), 26: (1, {'@': 234}), 28: (1, {'@': 234}), 15: (1, {'@': 234}), 16: (1, {'@': 234}), 0: (1, {'@': 234}), 12: (1, {'@': 234}), 20: (1, {'@': 234}), 13: (1, {'@': 234}), 18: (1, {'@': 234}), 19: (1, {'@': 234}), 1: (1, {'@': 234})}, 739: {85: (1, {'@': 420}), 11: (1, {'@': 420}), 176: (1, {'@': 420}), 86: (1, {'@': 420}), 14: (1, {'@': 420}), 87: (1, {'@': 420}), 174: (1, {'@': 420}), 93: (1, {'@': 420}), 177: (1, {'@': 420}), 153: (1, {'@': 420}), 80: (1, {'@': 420}), 19: (1, {'@': 420}), 88: (1, {'@': 420}), 58: (1, {'@': 420}), 89: (1, {'@': 420}), 94: (1, {'@': 420}), 81: (1, {'@': 420}), 47: (1, {'@': 420}), 90: (1, {'@': 420}), 34: (1, {'@': 420}), 91: (1, {'@': 420}), 92: (1, {'@': 420}), 82: (1, {'@': 420}), 2: (1, {'@': 420}), 95: (1, {'@': 420}), 27: (1, {'@': 420}), 70: (1, {'@': 420}), 96: (1, {'@': 420}), 97: (1, {'@': 420}), 43: (1, {'@': 420}), 98: (1, {'@': 420}), 3: (1, {'@': 420}), 15: (1, {'@': 420}), 0: (1, {'@': 420}), 1: (1, {'@': 420}), 8: (1, {'@': 420}), 10: (1, {'@': 420}), 12: (1, {'@': 420}), 13: (1, {'@': 420}), 16: (1, {'@': 420}), 18: (1, {'@': 420}), 20: (1, {'@': 420}), 21: (1, {'@': 420}), 22: (1, {'@': 420}), 23: (1, {'@': 420}), 25: (1, {'@': 420}), 26: (1, {'@': 420}), 28: (1, {'@': 420}), 9: (1, {'@': 420}), 4: (1, {'@': 420}), 5: (1, {'@': 420}), 6: (1, {'@': 420}), 7: (1, {'@': 420}), 17: (1, {'@': 420}), 24: (1, {'@': 420})}, 740: {15: (0, 439)}, 741: {7: (1, {'@': 194}), 33: (1, {'@': 194}), 151: (1, {'@': 194}), 68: (1, {'@': 194}), 53: (1, {'@': 194}), 138: (1, {'@': 194}), 102: (1, {'@': 194}), 142: (1, {'@': 194}), 124: (1, {'@': 194}), 14: (1, {'@': 194}), 136: (1, {'@': 194}), 37: (1, {'@': 194}), 55: (1, {'@': 194}), 60: (1, {'@': 194}), 66: (1, {'@': 194}), 113: (1, {'@': 194}), 121: (1, {'@': 194}), 152: (1, {'@': 194}), 56: (1, {'@': 194}), 32: (1, {'@': 194}), 153: (1, {'@': 194}), 44: (1, {'@': 194}), 4: (1, {'@': 194}), 76: (1, {'@': 194}), 1: (1, {'@': 194}), 72: (1, {'@': 194}), 100: (1, {'@': 194}), 58: (1, {'@': 194}), 81: (1, {'@': 194}), 47: (1, {'@': 194}), 107: (1, {'@': 194}), 117: (1, {'@': 194}), 154: (1, {'@': 194}), 116: (1, {'@': 194}), 67: (1, {'@': 194}), 125: (1, {'@': 194}), 34: (1, {'@': 194}), 38: (1, {'@': 194}), 40: (1, {'@': 194}), 73: (1, {'@': 194}), 24: (1, {'@': 194}), 155: (1, {'@': 194}), 122: (1, {'@': 194}), 77: (1, {'@': 194}), 75: (1, {'@': 194}), 146: (1, {'@': 194}), 164: (1, {'@': 194}), 156: (1, {'@': 194}), 134: (1, {'@': 194}), 157: (1, {'@': 194}), 70: (1, {'@': 194}), 71: (1, {'@': 194}), 158: (1, {'@': 194}), 43: (1, {'@': 194}), 145: (1, {'@': 194}), 31: (1, {'@': 194}), 106: (1, {'@': 194}), 126: (1, {'@': 194}), 65: (1, {'@': 194}), 5: (1, {'@': 194}), 162: (1, {'@': 194}), 163: (1, {'@': 194}), 175: (1, {'@': 194})}, 742: {190: (0, 636), 189: (0, 735), 80: (0, 174), 31: (0, 159), 15: (1, {'@': 176})}, 743: {15: (0, 755)}, 744: {0: (1, {'@': 253}), 1: (1, {'@': 253})}, 745: {100: (0, 353), 101: (0, 358), 102: (0, 376), 31: (0, 382), 1: (0, 189), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 34: (0, 645), 35: (0, 652), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 24: (0, 715), 108: (0, 722), 45: (0, 736), 48: (0, 467), 49: (0, 483), 111: (0, 500), 112: (0, 507), 29: (0, 514), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 118: (0, 195), 119: (0, 205), 120: (0, 228), 47: (0, 244), 58: (0, 236), 121: (0, 260), 122: (0, 284), 54: (0, 293), 43: (0, 300), 62: (0, 308), 123: (0, 316), 44: (0, 321), 65: (0, 334), 50: (0, 337), 66: (0, 354), 57: (0, 359), 69: (0, 371), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 109: (0, 198), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 40: (0, 616), 129: (0, 613), 131: (0, 622), 130: (0, 619), 132: (0, 625), 46: (0, 631), 133: (0, 634), 134: (0, 637), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 143: (0, 549), 59: (0, 557), 144: (0, 565), 60: (0, 573), 61: (0, 581), 145: (0, 646), 146: (0, 661), 147: (0, 668), 63: (0, 675), 148: (0, 682), 67: (0, 690), 68: (0, 697), 70: (0, 710), 71: (0, 716), 149: (0, 723), 73: (0, 737), 150: (0, 744), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 746: {85: (1, {'@': 423}), 11: (1, {'@': 423}), 176: (1, {'@': 423}), 86: (1, {'@': 423}), 14: (1, {'@': 423}), 87: (1, {'@': 423}), 174: (1, {'@': 423}), 93: (1, {'@': 423}), 177: (1, {'@': 423}), 153: (1, {'@': 423}), 80: (1, {'@': 423}), 19: (1, {'@': 423}), 88: (1, {'@': 423}), 58: (1, {'@': 423}), 89: (1, {'@': 423}), 94: (1, {'@': 423}), 81: (1, {'@': 423}), 47: (1, {'@': 423}), 90: (1, {'@': 423}), 34: (1, {'@': 423}), 91: (1, {'@': 423}), 92: (1, {'@': 423}), 82: (1, {'@': 423}), 2: (1, {'@': 423}), 95: (1, {'@': 423}), 27: (1, {'@': 423}), 70: (1, {'@': 423}), 96: (1, {'@': 423}), 97: (1, {'@': 423}), 43: (1, {'@': 423}), 98: (1, {'@': 423}), 3: (1, {'@': 423}), 15: (1, {'@': 423}), 0: (1, {'@': 423}), 1: (1, {'@': 423}), 8: (1, {'@': 423}), 10: (1, {'@': 423}), 12: (1, {'@': 423}), 13: (1, {'@': 423}), 16: (1, {'@': 423}), 18: (1, {'@': 423}), 20: (1, {'@': 423}), 21: (1, {'@': 423}), 22: (1, {'@': 423}), 23: (1, {'@': 423}), 25: (1, {'@': 423}), 26: (1, {'@': 423}), 28: (1, {'@': 423}), 9: (1, {'@': 423}), 4: (1, {'@': 423}), 5: (1, {'@': 423}), 6: (1, {'@': 423}), 7: (1, {'@': 423}), 17: (1, {'@': 423}), 24: (1, {'@': 423})}, 747: {3: (0, 441)}, 748: {85: (1, {'@': 386}), 58: (1, {'@': 386}), 89: (1, {'@': 386}), 94: (1, {'@': 386}), 11: (1, {'@': 386}), 81: (1, {'@': 386}), 90: (1, {'@': 386}), 176: (1, {'@': 386}), 86: (1, {'@': 386}), 14: (1, {'@': 386}), 34: (1, {'@': 386}), 91: (1, {'@': 386}), 92: (1, {'@': 386}), 87: (1, {'@': 386}), 82: (1, {'@': 386}), 2: (1, {'@': 386}), 93: (1, {'@': 386}), 95: (1, {'@': 386}), 27: (1, {'@': 386}), 177: (1, {'@': 386}), 88: (1, {'@': 386}), 153: (1, {'@': 386}), 70: (1, {'@': 386}), 96: (1, {'@': 386}), 97: (1, {'@': 386}), 98: (1, {'@': 386}), 3: (1, {'@': 386}), 19: (1, {'@': 386}), 15: (1, {'@': 386}), 0: (1, {'@': 386}), 1: (1, {'@': 386}), 8: (1, {'@': 386}), 10: (1, {'@': 386}), 12: (1, {'@': 386}), 13: (1, {'@': 386}), 16: (1, {'@': 386}), 18: (1, {'@': 386}), 20: (1, {'@': 386}), 21: (1, {'@': 386}), 22: (1, {'@': 386}), 23: (1, {'@': 386}), 25: (1, {'@': 386}), 26: (1, {'@': 386}), 28: (1, {'@': 386}), 9: (1, {'@': 386}), 4: (1, {'@': 386}), 5: (1, {'@': 386}), 6: (1, {'@': 386}), 7: (1, {'@': 386}), 17: (1, {'@': 386}), 24: (1, {'@': 386})}, 749: {15: (1, {'@': 178})}, 750: {33: (1, {'@': 540}), 151: (1, {'@': 540}), 68: (1, {'@': 540}), 53: (1, {'@': 540}), 138: (1, {'@': 540}), 102: (1, {'@': 540}), 142: (1, {'@': 540}), 14: (1, {'@': 540}), 37: (1, {'@': 540}), 55: (1, {'@': 540}), 124: (1, {'@': 540}), 136: (1, {'@': 540}), 60: (1, {'@': 540}), 66: (1, {'@': 540}), 121: (1, {'@': 540}), 152: (1, {'@': 540}), 56: (1, {'@': 540}), 32: (1, {'@': 540}), 153: (1, {'@': 540}), 44: (1, {'@': 540}), 4: (1, {'@': 540}), 76: (1, {'@': 540}), 1: (1, {'@': 540}), 72: (1, {'@': 540}), 100: (1, {'@': 540}), 65: (1, {'@': 540}), 58: (1, {'@': 540}), 81: (1, {'@': 540}), 47: (1, {'@': 540}), 107: (1, {'@': 540}), 117: (1, {'@': 540}), 154: (1, {'@': 540}), 116: (1, {'@': 540}), 67: (1, {'@': 540}), 125: (1, {'@': 540}), 34: (1, {'@': 540}), 38: (1, {'@': 540}), 40: (1, {'@': 540}), 24: (1, {'@': 540}), 155: (1, {'@': 540}), 73: (1, {'@': 540}), 75: (1, {'@': 540}), 77: (1, {'@': 540}), 146: (1, {'@': 540}), 156: (1, {'@': 540}), 5: (1, {'@': 540}), 157: (1, {'@': 540}), 134: (1, {'@': 540}), 70: (1, {'@': 540}), 71: (1, {'@': 540}), 43: (1, {'@': 540}), 145: (1, {'@': 540}), 31: (1, {'@': 540}), 106: (1, {'@': 540}), 158: (1, {'@': 540}), 126: (1, {'@': 540}), 122: (1, {'@': 540}), 113: (1, {'@': 540})}, 751: {33: (1, {'@': 320}), 151: (1, {'@': 320}), 68: (1, {'@': 320}), 53: (1, {'@': 320}), 138: (1, {'@': 320}), 102: (1, {'@': 320}), 142: (1, {'@': 320}), 14: (1, {'@': 320}), 37: (1, {'@': 320}), 55: (1, {'@': 320}), 124: (1, {'@': 320}), 136: (1, {'@': 320}), 60: (1, {'@': 320}), 66: (1, {'@': 320}), 121: (1, {'@': 320}), 152: (1, {'@': 320}), 56: (1, {'@': 320}), 32: (1, {'@': 320}), 153: (1, {'@': 320}), 44: (1, {'@': 320}), 4: (1, {'@': 320}), 76: (1, {'@': 320}), 72: (1, {'@': 320}), 100: (1, {'@': 320}), 65: (1, {'@': 320}), 58: (1, {'@': 320}), 81: (1, {'@': 320}), 47: (1, {'@': 320}), 107: (1, {'@': 320}), 117: (1, {'@': 320}), 154: (1, {'@': 320}), 116: (1, {'@': 320}), 67: (1, {'@': 320}), 125: (1, {'@': 320}), 34: (1, {'@': 320}), 38: (1, {'@': 320}), 40: (1, {'@': 320}), 24: (1, {'@': 320}), 155: (1, {'@': 320}), 73: (1, {'@': 320}), 75: (1, {'@': 320}), 77: (1, {'@': 320}), 146: (1, {'@': 320}), 164: (1, {'@': 320}), 156: (1, {'@': 320}), 5: (1, {'@': 320}), 157: (1, {'@': 320}), 134: (1, {'@': 320}), 70: (1, {'@': 320}), 71: (1, {'@': 320}), 43: (1, {'@': 320}), 145: (1, {'@': 320}), 31: (1, {'@': 320}), 106: (1, {'@': 320}), 126: (1, {'@': 320}), 122: (1, {'@': 320}), 113: (1, {'@': 320}), 1: (1, {'@': 320}), 158: (1, {'@': 320})}, 752: {7: (1, {'@': 192}), 33: (1, {'@': 192}), 151: (1, {'@': 192}), 68: (1, {'@': 192}), 53: (1, {'@': 192}), 138: (1, {'@': 192}), 102: (1, {'@': 192}), 142: (1, {'@': 192}), 124: (1, {'@': 192}), 14: (1, {'@': 192}), 136: (1, {'@': 192}), 37: (1, {'@': 192}), 55: (1, {'@': 192}), 60: (1, {'@': 192}), 66: (1, {'@': 192}), 113: (1, {'@': 192}), 121: (1, {'@': 192}), 152: (1, {'@': 192}), 56: (1, {'@': 192}), 32: (1, {'@': 192}), 153: (1, {'@': 192}), 44: (1, {'@': 192}), 4: (1, {'@': 192}), 76: (1, {'@': 192}), 1: (1, {'@': 192}), 72: (1, {'@': 192}), 100: (1, {'@': 192}), 58: (1, {'@': 192}), 81: (1, {'@': 192}), 47: (1, {'@': 192}), 107: (1, {'@': 192}), 117: (1, {'@': 192}), 154: (1, {'@': 192}), 116: (1, {'@': 192}), 67: (1, {'@': 192}), 125: (1, {'@': 192}), 34: (1, {'@': 192}), 38: (1, {'@': 192}), 40: (1, {'@': 192}), 73: (1, {'@': 192}), 24: (1, {'@': 192}), 155: (1, {'@': 192}), 122: (1, {'@': 192}), 77: (1, {'@': 192}), 75: (1, {'@': 192}), 146: (1, {'@': 192}), 164: (1, {'@': 192}), 156: (1, {'@': 192}), 134: (1, {'@': 192}), 157: (1, {'@': 192}), 70: (1, {'@': 192}), 71: (1, {'@': 192}), 158: (1, {'@': 192}), 43: (1, {'@': 192}), 145: (1, {'@': 192}), 31: (1, {'@': 192}), 106: (1, {'@': 192}), 126: (1, {'@': 192}), 65: (1, {'@': 192}), 5: (1, {'@': 192}), 162: (1, {'@': 192}), 163: (1, {'@': 192}), 175: (1, {'@': 192})}, 753: {85: (1, {'@': 421}), 11: (1, {'@': 421}), 176: (1, {'@': 421}), 86: (1, {'@': 421}), 14: (1, {'@': 421}), 87: (1, {'@': 421}), 174: (1, {'@': 421}), 93: (1, {'@': 421}), 177: (1, {'@': 421}), 153: (1, {'@': 421}), 80: (1, {'@': 421}), 19: (1, {'@': 421}), 88: (1, {'@': 421}), 58: (1, {'@': 421}), 89: (1, {'@': 421}), 94: (1, {'@': 421}), 81: (1, {'@': 421}), 47: (1, {'@': 421}), 90: (1, {'@': 421}), 34: (1, {'@': 421}), 91: (1, {'@': 421}), 92: (1, {'@': 421}), 82: (1, {'@': 421}), 2: (1, {'@': 421}), 95: (1, {'@': 421}), 27: (1, {'@': 421}), 70: (1, {'@': 421}), 96: (1, {'@': 421}), 97: (1, {'@': 421}), 43: (1, {'@': 421}), 98: (1, {'@': 421}), 3: (1, {'@': 421}), 15: (1, {'@': 421}), 0: (1, {'@': 421}), 1: (1, {'@': 421}), 8: (1, {'@': 421}), 10: (1, {'@': 421}), 12: (1, {'@': 421}), 13: (1, {'@': 421}), 16: (1, {'@': 421}), 18: (1, {'@': 421}), 20: (1, {'@': 421}), 21: (1, {'@': 421}), 22: (1, {'@': 421}), 23: (1, {'@': 421}), 25: (1, {'@': 421}), 26: (1, {'@': 421}), 28: (1, {'@': 421}), 9: (1, {'@': 421}), 4: (1, {'@': 421}), 5: (1, {'@': 421}), 6: (1, {'@': 421}), 7: (1, {'@': 421}), 17: (1, {'@': 421}), 24: (1, {'@': 421})}, 754: {33: (1, {'@': 491}), 151: (1, {'@': 491}), 68: (1, {'@': 491}), 53: (1, {'@': 491}), 138: (1, {'@': 491}), 102: (1, {'@': 491}), 142: (1, {'@': 491}), 14: (1, {'@': 491}), 37: (1, {'@': 491}), 55: (1, {'@': 491}), 124: (1, {'@': 491}), 136: (1, {'@': 491}), 60: (1, {'@': 491}), 66: (1, {'@': 491}), 121: (1, {'@': 491}), 152: (1, {'@': 491}), 56: (1, {'@': 491}), 32: (1, {'@': 491}), 153: (1, {'@': 491}), 44: (1, {'@': 491}), 4: (1, {'@': 491}), 76: (1, {'@': 491}), 72: (1, {'@': 491}), 100: (1, {'@': 491}), 65: (1, {'@': 491}), 58: (1, {'@': 491}), 81: (1, {'@': 491}), 47: (1, {'@': 491}), 107: (1, {'@': 491}), 117: (1, {'@': 491}), 154: (1, {'@': 491}), 116: (1, {'@': 491}), 67: (1, {'@': 491}), 125: (1, {'@': 491}), 34: (1, {'@': 491}), 38: (1, {'@': 491}), 40: (1, {'@': 491}), 24: (1, {'@': 491}), 155: (1, {'@': 491}), 73: (1, {'@': 491}), 75: (1, {'@': 491}), 77: (1, {'@': 491}), 146: (1, {'@': 491}), 164: (1, {'@': 491}), 156: (1, {'@': 491}), 5: (1, {'@': 491}), 157: (1, {'@': 491}), 134: (1, {'@': 491}), 70: (1, {'@': 491}), 71: (1, {'@': 491}), 43: (1, {'@': 491}), 145: (1, {'@': 491}), 31: (1, {'@': 491}), 106: (1, {'@': 491}), 126: (1, {'@': 491}), 122: (1, {'@': 491}), 113: (1, {'@': 491}), 1: (1, {'@': 491}), 158: (1, {'@': 491})}, 755: {100: (0, 353), 101: (0, 358), 102: (0, 376), 31: (0, 382), 103: (0, 388), 104: (0, 393), 32: (0, 398), 105: (0, 403), 33: (0, 408), 35: (0, 652), 34: (0, 645), 36: (0, 667), 37: (0, 674), 106: (0, 681), 41: (0, 689), 42: (0, 696), 107: (0, 703), 24: (0, 715), 108: (0, 722), 45: (0, 736), 109: (0, 729), 48: (0, 467), 49: (0, 483), 111: (0, 500), 29: (0, 514), 112: (0, 507), 51: (0, 522), 52: (0, 530), 113: (0, 538), 114: (0, 546), 115: (0, 554), 116: (0, 562), 117: (0, 578), 55: (0, 586), 118: (0, 195), 119: (0, 205), 120: (0, 228), 47: (0, 244), 58: (0, 236), 121: (0, 260), 122: (0, 284), 43: (0, 300), 54: (0, 293), 62: (0, 308), 123: (0, 316), 44: (0, 321), 65: (0, 334), 50: (0, 337), 66: (0, 354), 57: (0, 359), 69: (0, 371), 124: (0, 384), 72: (0, 390), 74: (0, 394), 75: (0, 399), 30: (0, 404), 125: (0, 409), 126: (0, 595), 127: (0, 598), 38: (0, 601), 128: (0, 604), 39: (0, 608), 40: (0, 616), 129: (0, 613), 130: (0, 619), 131: (0, 622), 132: (0, 625), 46: (0, 631), 110: (0, 481), 133: (0, 634), 134: (0, 637), 135: (0, 489), 136: (0, 461), 137: (0, 469), 138: (0, 477), 53: (0, 485), 139: (0, 493), 140: (0, 502), 141: (0, 510), 56: (0, 517), 81: (0, 525), 142: (0, 533), 143: (0, 549), 59: (0, 557), 144: (0, 565), 61: (0, 581), 60: (0, 573), 145: (0, 646), 146: (0, 661), 147: (0, 668), 63: (0, 675), 1: (0, 497), 148: (0, 682), 67: (0, 690), 68: (0, 697), 70: (0, 710), 71: (0, 716), 149: (0, 723), 73: (0, 737), 150: (0, 744), 76: (0, 757), 77: (0, 596), 64: (0, 599)}, 756: {15: (1, {'@': 181})}, 757: {85: (1, {'@': 531}), 53: (1, {'@': 531}), 11: (1, {'@': 531}), 176: (1, {'@': 531}), 86: (1, {'@': 531}), 14: (1, {'@': 531}), 37: (1, {'@': 531}), 87: (1, {'@': 531}), 174: (1, {'@': 531}), 93: (1, {'@': 531}), 177: (1, {'@': 531}), 56: (1, {'@': 531}), 153: (1, {'@': 531}), 80: (1, {'@': 531}), 19: (1, {'@': 531}), 88: (1, {'@': 531}), 76: (1, {'@': 531}), 58: (1, {'@': 531}), 89: (1, {'@': 531}), 94: (1, {'@': 531}), 81: (1, {'@': 531}), 47: (1, {'@': 531}), 90: (1, {'@': 531}), 34: (1, {'@': 531}), 91: (1, {'@': 531}), 92: (1, {'@': 531}), 40: (1, {'@': 531}), 82: (1, {'@': 531}), 2: (1, {'@': 531}), 95: (1, {'@': 531}), 75: (1, {'@': 531}), 27: (1, {'@': 531}), 70: (1, {'@': 531}), 96: (1, {'@': 531}), 97: (1, {'@': 531}), 43: (1, {'@': 531}), 98: (1, {'@': 531}), 3: (1, {'@': 531}), 15: (1, {'@': 531}), 0: (1, {'@': 531}), 1: (1, {'@': 531}), 8: (1, {'@': 531}), 10: (1, {'@': 531}), 12: (1, {'@': 531}), 13: (1, {'@': 531}), 16: (1, {'@': 531}), 18: (1, {'@': 531}), 20: (1, {'@': 531}), 21: (1, {'@': 531}), 22: (1, {'@': 531}), 23: (1, {'@': 531}), 25: (1, {'@': 531}), 26: (1, {'@': 531}), 28: (1, {'@': 531}), 9: (1, {'@': 531}), 4: (1, {'@': 531}), 5: (1, {'@': 531}), 6: (1, {'@': 531}), 7: (1, {'@': 531}), 17: (1, {'@': 531}), 24: (1, {'@': 531})}}, 'start_states': {'start': 335}, 'end_states': {'start': 370}}, '__type__': 'ParsingFrontend'}, 'rules': [{'@': 112}, {'@': 113}, {'@': 114}, {'@': 115}, {'@': 116}, {'@': 117}, {'@': 118}, {'@': 119}, {'@': 120}, {'@': 121}, {'@': 122}, {'@': 123}, {'@': 124}, {'@': 125}, {'@': 126}, {'@': 127}, {'@': 128}, {'@': 129}, {'@': 130}, {'@': 131}, {'@': 132}, {'@': 133}, {'@': 134}, {'@': 135}, {'@': 136}, {'@': 137}, {'@': 138}, {'@': 139}, {'@': 140}, {'@': 141}, {'@': 142}, {'@': 143}, {'@': 144}, {'@': 145}, {'@': 146}, {'@': 147}, {'@': 148}, {'@': 149}, {'@': 150}, {'@': 151}, {'@': 152}, {'@': 153}, {'@': 154}, {'@': 155}, {'@': 156}, {'@': 157}, {'@': 158}, {'@': 159}, {'@': 160}, {'@': 161}, {'@': 162}, {'@': 163}, {'@': 164}, {'@': 165}, {'@': 166}, {'@': 167}, {'@': 168}, {'@': 169}, {'@': 170}, {'@': 171}, {'@': 172}, {'@': 173}, {'@': 174}, {'@': 175}, {'@': 176}, {'@': 177}, {'@': 178}, {'@': 179}, {'@': 180}, {'@': 181}, {'@': 182}, {'@': 183}, {'@': 184}, {'@': 185}, {'@': 186}, {'@': 187}, {'@': 188}, {'@': 189}, {'@': 190}, {'@': 191}, {'@': 192}, {'@': 193}, {'@': 194}, {'@': 195}, {'@': 196}, {'@': 197}, {'@': 198}, {'@': 199}, {'@': 200}, {'@': 201}, {'@': 202}, {'@': 203}, {'@': 204}, {'@': 205}, {'@': 206}, {'@': 207}, {'@': 208}, {'@': 209}, {'@': 210}, {'@': 211}, {'@': 212}, {'@': 213}, {'@': 214}, {'@': 215}, {'@': 216}, {'@': 217}, {'@': 218}, {'@': 219}, {'@': 220}, {'@': 221}, {'@': 222}, {'@': 223}, {'@': 224}, {'@': 225}, {'@': 226}, {'@': 227}, {'@': 228}, {'@': 229}, {'@': 230}, {'@': 231}, {'@': 232}, {'@': 233}, {'@': 234}, {'@': 235}, {'@': 236}, {'@': 237}, {'@': 238}, {'@': 239}, {'@': 240}, {'@': 241}, {'@': 242}, {'@': 243}, {'@': 244}, {'@': 245}, {'@': 246}, {'@': 247}, {'@': 248}, {'@': 249}, {'@': 250}, {'@': 251}, {'@': 252}, {'@': 253}, {'@': 254}, {'@': 255}, {'@': 256}, {'@': 257}, {'@': 258}, {'@': 259}, {'@': 260}, {'@': 261}, {'@': 262}, {'@': 263}, {'@': 264}, {'@': 265}, {'@': 266}, {'@': 267}, {'@': 268}, {'@': 269}, {'@': 270}, {'@': 271}, {'@': 272}, {'@': 273}, {'@': 274}, {'@': 275}, {'@': 276}, {'@': 277}, {'@': 278}, {'@': 279}, {'@': 280}, {'@': 281}, {'@': 282}, {'@': 283}, {'@': 284}, {'@': 285}, {'@': 286}, {'@': 287}, {'@': 288}, {'@': 289}, {'@': 290}, {'@': 291}, {'@': 292}, {'@': 293}, {'@': 294}, {'@': 295}, {'@': 296}, {'@': 297}, {'@': 298}, {'@': 299}, {'@': 300}, {'@': 301}, {'@': 302}, {'@': 303}, {'@': 304}, {'@': 305}, {'@': 306}, {'@': 307}, {'@': 308}, {'@': 309}, {'@': 310}, {'@': 311}, {'@': 312}, {'@': 313}, {'@': 314}, {'@': 315}, {'@': 316}, {'@': 317}, {'@': 318}, {'@': 319}, {'@': 320}, {'@': 321}, {'@': 322}, {'@': 323}, {'@': 324}, {'@': 325}, {'@': 326}, {'@': 327}, {'@': 328}, {'@': 329}, {'@': 330}, {'@': 331}, {'@': 332}, {'@': 333}, {'@': 334}, {'@': 335}, {'@': 336}, {'@': 337}, {'@': 338}, {'@': 339}, {'@': 340}, {'@': 341}, {'@': 342}, {'@': 343}, {'@': 344}, {'@': 345}, {'@': 346}, {'@': 347}, {'@': 348}, {'@': 349}, {'@': 350}, {'@': 351}, {'@': 352}, {'@': 353}, {'@': 354}, {'@': 355}, {'@': 356}, {'@': 357}, {'@': 358}, {'@': 359}, {'@': 360}, {'@': 361}, {'@': 362}, {'@': 363}, {'@': 364}, {'@': 365}, {'@': 366}, {'@': 367}, {'@': 368}, {'@': 369}, {'@': 370}, {'@': 371}, {'@': 372}, {'@': 373}, {'@': 374}, {'@': 375}, {'@': 376}, {'@': 377}, {'@': 378}, {'@': 379}, {'@': 380}, {'@': 381}, {'@': 382}, {'@': 383}, {'@': 384}, {'@': 385}, {'@': 386}, {'@': 387}, {'@': 388}, {'@': 389}, {'@': 390}, {'@': 391}, {'@': 392}, {'@': 393}, {'@': 394}, {'@': 395}, {'@': 396}, {'@': 397}, {'@': 398}, {'@': 399}, {'@': 400}, {'@': 401}, {'@': 402}, {'@': 403}, {'@': 404}, {'@': 405}, {'@': 406}, {'@': 407}, {'@': 408}, {'@': 409}, {'@': 410}, {'@': 411}, {'@': 412}, {'@': 413}, {'@': 414}, {'@': 415}, {'@': 416}, {'@': 417}, {'@': 418}, {'@': 419}, {'@': 420}, {'@': 421}, {'@': 422}, {'@': 423}, {'@': 424}, {'@': 425}, {'@': 426}, {'@': 427}, {'@': 428}, {'@': 429}, {'@': 430}, {'@': 431}, {'@': 432}, {'@': 433}, {'@': 434}, {'@': 435}, {'@': 436}, {'@': 437}, {'@': 438}, {'@': 439}, {'@': 440}, {'@': 441}, {'@': 442}, {'@': 443}, {'@': 444}, {'@': 445}, {'@': 446}, {'@': 447}, {'@': 448}, {'@': 449}, {'@': 450}, {'@': 451}, {'@': 452}, {'@': 453}, {'@': 454}, {'@': 455}, {'@': 456}, {'@': 457}, {'@': 458}, {'@': 459}, {'@': 460}, {'@': 461}, {'@': 462}, {'@': 463}, {'@': 464}, {'@': 465}, {'@': 466}, {'@': 467}, {'@': 468}, {'@': 469}, {'@': 470}, {'@': 471}, {'@': 472}, {'@': 473}, {'@': 474}, {'@': 475}, {'@': 476}, {'@': 477}, {'@': 478}, {'@': 479}, {'@': 480}, {'@': 481}, {'@': 482}, {'@': 483}, {'@': 484}, {'@': 485}, {'@': 486}, {'@': 487}, {'@': 488}, {'@': 489}, {'@': 490}, {'@': 491}, {'@': 492}, {'@': 493}, {'@': 494}, {'@': 495}, {'@': 496}, {'@': 497}, {'@': 498}, {'@': 499}, {'@': 500}, {'@': 501}, {'@': 502}, {'@': 503}, {'@': 504}, {'@': 505}, {'@': 506}, {'@': 507}, {'@': 508}, {'@': 509}, {'@': 510}, {'@': 511}, {'@': 512}, {'@': 513}, {'@': 514}, {'@': 515}, {'@': 516}, {'@': 517}, {'@': 518}, {'@': 519}, {'@': 520}, {'@': 521}, {'@': 522}, {'@': 523}, {'@': 524}, {'@': 525}, {'@': 526}, {'@': 527}, {'@': 528}, {'@': 529}, {'@': 530}, {'@': 531}, {'@': 532}, {'@': 533}, {'@': 534}, {'@': 535}, {'@': 536}, {'@': 537}, {'@': 538}, {'@': 539}, {'@': 540}, {'@': 541}, {'@': 542}, {'@': 543}, {'@': 544}, {'@': 545}, {'@': 546}, {'@': 547}, {'@': 548}, {'@': 549}, {'@': 550}, {'@': 551}, {'@': 552}, {'@': 553}, {'@': 554}, {'@': 555}, {'@': 556}, {'@': 557}, {'@': 558}, {'@': 559}, {'@': 560}, {'@': 561}, {'@': 562}, {'@': 563}, {'@': 564}, {'@': 565}, {'@': 566}, {'@': 567}, {'@': 568}, {'@': 569}, {'@': 570}, {'@': 571}, {'@': 572}, {'@': 573}, {'@': 574}, {'@': 575}, {'@': 576}, {'@': 577}, {'@': 578}, {'@': 579}, {'@': 580}, {'@': 581}, {'@': 582}, {'@': 583}, {'@': 584}, {'@': 585}, {'@': 586}, {'@': 587}, {'@': 588}, {'@': 589}, {'@': 590}, {'@': 591}, {'@': 592}, {'@': 593}, {'@': 594}, {'@': 595}, {'@': 596}, {'@': 597}, {'@': 598}, {'@': 599}, {'@': 600}, {'@': 601}, {'@': 602}, {'@': 603}, {'@': 604}, {'@': 605}, {'@': 606}, {'@': 607}, {'@': 608}, {'@': 609}, {'@': 610}, {'@': 611}, {'@': 612}, {'@': 613}, {'@': 614}, {'@': 615}], 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['start'], 'priority': 'normal', 'ambiguity': 'auto', 'regex': False, 'propagate_positions': True, 'lexer_callbacks': {}, 'maybe_placeholders': False, 'edit_terminals': None, 'g_regex_flags': 0, 'use_bytes': False, 'import_paths': [], 'source_path': None}, '__type__': 'Lark'}
)
MEMO = (
{0: {'name': 'SLASH', 'pattern': {'value': '/', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 1: {'name': 'RECORD', 'pattern': {'value': 'record', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 2: {'name': 'ARRAY', 'pattern': {'value': 'array', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 3: {'name': 'DICT', 'pattern': {'value': 'dictionary', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 4: {'name': 'AWAIT', 'pattern': {'value': 'await', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 5: {'name': 'ASYNC', 'pattern': {'value': 'async', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 6: {'name': '_NEWLINE', 'pattern': {'value': '(?:(?:\r?\n[\t ]*|#[^\n]*))+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 7: {'name': '__IGNORE_0', 'pattern': {'value': '[\t \x0c]+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 8: {'name': '__IGNORE_1', 'pattern': {'value': '\\\\[\t \x0c]*\r?\n', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 9: {'name': 'NAME', 'pattern': {'value': '[a-zA-Z_]\\w*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 10: {'name': 'COMMENT', 'pattern': {'value': '#[^\n]*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 11: {'name': 'QSTRING', 'pattern': {'value': 'qr?("(?!"").*?(?<!\\\\)(\\\\\\\\)*?"|\'(?!\'\').*?(?<!\\\\)(\\\\\\\\)*?\')', 'flags': ['i'], '_width': [3, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 12: {'name': 'STRING', 'pattern': {'value': '[ub]?r?("(?!"").*?(?<!\\\\)(\\\\\\\\)*?"|\'(?!\'\').*?(?<!\\\\)(\\\\\\\\)*?\')', 'flags': ['i'], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 13: {'name': 'FSTRING', 'pattern': {'value': '[f]?r?("(?!"").*?(?<!\\\\)(\\\\\\\\)*?"|\'(?!\'\').*?(?<!\\\\)(\\\\\\\\)*?\')', 'flags': ['i'], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 14: {'name': 'QLONG_STRING', 'pattern': {'value': 'qr?(""".*?(?<!\\\\)(\\\\\\\\)*?"""|\'\'\'.*?(?<!\\\\)(\\\\\\\\)*?\'\'\')', 'flags': ['i', 's'], '_width': [7, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 15: {'name': 'LONG_STRING', 'pattern': {'value': '[ub]?r?(""".*?(?<!\\\\)(\\\\\\\\)*?"""|\'\'\'.*?(?<!\\\\)(\\\\\\\\)*?\'\'\')', 'flags': ['i', 's'], '_width': [6, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 16: {'name': 'LONG_FSTRING', 'pattern': {'value': '[f]?r?(""".*?(?<!\\\\)(\\\\\\\\)*?"""|\'\'\'.*?(?<!\\\\)(\\\\\\\\)*?\'\'\')', 'flags': ['i', 's'], '_width': [6, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 17: {'name': 'DEC_NUMBER', 'pattern': {'value': '0|[1-9][\\d_]*', 'flags': ['i'], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 18: {'name': 'HEX_NUMBER', 'pattern': {'value': '0x[\\da-f]*', 'flags': ['i'], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 2, '__type__': 'TerminalDef'}, 19: {'name': 'OCT_NUMBER', 'pattern': {'value': '0o[0-7]*', 'flags': ['i'], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 2, '__type__': 'TerminalDef'}, 20: {'name': 'BIN_NUMBER', 'pattern': {'value': '0b[0-1]*', 'flags': ['i'], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 2, '__type__': 'TerminalDef'}, 21: {'name': 'FLOAT_NUMBER', 'pattern': {'value': '((\\d+\\.[\\d_]*|\\.[\\d_]+)([Ee][-+]?\\d+)?|\\d+([Ee][-+]?\\d+))', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 2, '__type__': 'TerminalDef'}, 22: {'name': 'IMAG_NUMBER', 'pattern': {'value': '(?:((\\d+\\.[\\d_]*|\\.[\\d_]+)([Ee][-+]?\\d+)?|\\d+([Ee][-+]?\\d+))[Jj]|\\d+[Jj])', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 2, '__type__': 'TerminalDef'}, 23: {'name': 'LPAR', 'pattern': {'value': '(', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 24: {'name': 'RPAR', 'pattern': {'value': ')', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 25: {'name': 'AT', 'pattern': {'value': '@', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 26: {'name': '__ANON_0', 'pattern': {'value': '->', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 27: {'name': 'DEF', 'pattern': {'value': 'def', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 28: {'name': 'COLON', 'pattern': {'value': ':', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 29: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 30: {'name': 'STAR', 'pattern': {'value': '*', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 31: {'name': '__ANON_1', 'pattern': {'value': '**', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 32: {'name': 'EQUAL', 'pattern': {'value': '=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 33: {'name': 'LAMBDA', 'pattern': {'value': 'lambda', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 34: {'name': 'SEMICOLON', 'pattern': {'value': ';', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 35: {'name': '__ANON_2', 'pattern': {'value': '+=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 36: {'name': '__ANON_3', 'pattern': {'value': '-=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 37: {'name': '__ANON_4', 'pattern': {'value': '*=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 38: {'name': '__ANON_5', 'pattern': {'value': '@=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 39: {'name': '__ANON_6', 'pattern': {'value': '/=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 40: {'name': '__ANON_7', 'pattern': {'value': '%=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 41: {'name': '__ANON_8', 'pattern': {'value': '&=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 42: {'name': '__ANON_9', 'pattern': {'value': '|=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 43: {'name': '__ANON_10', 'pattern': {'value': '^=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 44: {'name': '__ANON_11', 'pattern': {'value': '<<=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 45: {'name': '__ANON_12', 'pattern': {'value': '>>=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 46: {'name': '__ANON_13', 'pattern': {'value': '**=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 47: {'name': '__ANON_14', 'pattern': {'value': '//=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 48: {'name': 'DEL', 'pattern': {'value': 'del', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 49: {'name': 'PASS', 'pattern': {'value': 'pass', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 50: {'name': 'BREAK', 'pattern': {'value': 'break', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 51: {'name': 'CONTINUE', 'pattern': {'value': 'continue', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 52: {'name': 'RETURN', 'pattern': {'value': 'return', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 53: {'name': 'FROM', 'pattern': {'value': 'from', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 54: {'name': 'RAISE', 'pattern': {'value': 'raise', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 55: {'name': 'IMPORT', 'pattern': {'value': 'import', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 56: {'name': 'DOT', 'pattern': {'value': '.', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 57: {'name': 'AS', 'pattern': {'value': 'as', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 58: {'name': 'GLOBAL', 'pattern': {'value': 'global', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 59: {'name': 'NONLOCAL', 'pattern': {'value': 'nonlocal', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 60: {'name': 'ASSERT', 'pattern': {'value': 'assert', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 61: {'name': 'TYPE', 'pattern': {'value': 'type', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 62: {'name': 'IS', 'pattern': {'value': 'is', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 63: {'name': 'OF', 'pattern': {'value': 'of', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 64: {'name': 'LSQB', 'pattern': {'value': '[', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 65: {'name': 'RSQB', 'pattern': {'value': ']', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 66: {'name': 'SUBTYPE', 'pattern': {'value': 'subtype', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 67: {'name': 'EXCEPTION', 'pattern': {'value': 'exception', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 68: {'name': 'VAR', 'pattern': {'value': 'var', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 69: {'name': 'CONST', 'pattern': {'value': 'const', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 70: {'name': 'CURSOR', 'pattern': {'value': 'cursor', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 71: {'name': 'FETCH', 'pattern': {'value': 'fetch', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 72: {'name': 'INTO', 'pattern': {'value': 'into', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 73: {'name': 'ELSE', 'pattern': {'value': 'else', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 74: {'name': 'IF', 'pattern': {'value': 'if', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 75: {'name': 'ELIF', 'pattern': {'value': 'elif', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 76: {'name': 'WHILE', 'pattern': {'value': 'while', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 77: {'name': 'FOR', 'pattern': {'value': 'for', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 78: {'name': 'IN', 'pattern': {'value': 'in', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 79: {'name': 'FORALL', 'pattern': {'value': 'forall', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 80: {'name': 'TRY', 'pattern': {'value': 'try', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 81: {'name': 'FINALLY', 'pattern': {'value': 'finally', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 82: {'name': 'EXCEPT', 'pattern': {'value': 'except', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 83: {'name': 'WITH', 'pattern': {'value': 'with', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 84: {'name': 'OR', 'pattern': {'value': 'or', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 85: {'name': 'AND', 'pattern': {'value': 'and', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 86: {'name': 'NOT', 'pattern': {'value': 'not', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 87: {'name': 'VBAR', 'pattern': {'value': '|', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 88: {'name': 'CIRCUMFLEX', 'pattern': {'value': '^', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 89: {'name': 'AMPERSAND', 'pattern': {'value': '&', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 90: {'name': 'PLUS', 'pattern': {'value': '+', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 91: {'name': 'MINUS', 'pattern': {'value': '-', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 92: {'name': 'TILDE', 'pattern': {'value': '~', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 93: {'name': '__ANON_15', 'pattern': {'value': '<<', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 94: {'name': '__ANON_16', 'pattern': {'value': '>>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 95: {'name': 'PERCENT', 'pattern': {'value': '%', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 96: {'name': '__ANON_17', 'pattern': {'value': '//', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 97: {'name': 'LESSTHAN', 'pattern': {'value': '<', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 98: {'name': 'MORETHAN', 'pattern': {'value': '>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 99: {'name': '__ANON_18', 'pattern': {'value': '==', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 100: {'name': '__ANON_19', 'pattern': {'value': '>=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 101: {'name': '__ANON_20', 'pattern': {'value': '<=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 102: {'name': '__ANON_21', 'pattern': {'value': '<>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 103: {'name': '__ANON_22', 'pattern': {'value': '!=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 104: {'name': 'LBRACE', 'pattern': {'value': '{', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 105: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 106: {'name': '__ANON_23', 'pattern': {'value': '...', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 107: {'name': 'NONE', 'pattern': {'value': 'None', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 108: {'name': 'TRUE', 'pattern': {'value': 'True', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 109: {'name': 'FALSE', 'pattern': {'value': 'False', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 110: {'name': 'CLASS', 'pattern': {'value': 'class', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 111: {'name': 'YIELD', 'pattern': {'value': 'yield', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 112: {'origin': {'name': Token('RULE', 'start'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'file_input', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': Token('RULE', 'file_input'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__file_input_star_0', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': Token('RULE', 'file_input'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 115: {'origin': {'name': Token('RULE', 'decorator'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arguments', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': Token('RULE', 'decorator'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, True, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 117: {'origin': {'name': Token('RULE', 'decorator'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 118: {'origin': {'name': Token('RULE', 'decorators'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__decorators_plus_2', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 119: {'origin': {'name': Token('RULE', 'decorated'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'decorators', '__type__': 'NonTerminal'}, {'name': 'classdef', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 120: {'origin': {'name': Token('RULE', 'decorated'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'decorators', '__type__': 'NonTerminal'}, {'name': 'funcdef', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 121: {'origin': {'name': Token('RULE', 'decorated'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'decorators', '__type__': 'NonTerminal'}, {'name': 'async_funcdef', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 122: {'origin': {'name': Token('RULE', 'async_funcdef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ASYNC', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'funcdef', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 123: {'origin': {'name': Token('RULE', 'funcdef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'parameters', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 124: {'origin': {'name': Token('RULE', 'funcdef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'parameters', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, False, False, True, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 125: {'origin': {'name': Token('RULE', 'funcdef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, True, False, False, False, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 126: {'origin': {'name': Token('RULE', 'funcdef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, True, False, True, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 127: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': '__parameters_star_3', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'starparams', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 128: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': '__parameters_star_3', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwparams', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 129: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': '__parameters_star_3', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, False, False, True, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 130: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': '__parameters_star_3', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, False, True, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 131: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': '__parameters_star_3', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'starparams', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 132: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': '__parameters_star_3', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwparams', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 133: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': '__parameters_star_3', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True, False, True, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 134: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': '__parameters_star_3', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True, True, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 135: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'starparams', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 136: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwparams', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 137: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, False, True, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 138: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, True, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 139: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'starparams', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 140: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwparams', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 141: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True, False, True, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 142: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'paramvalue', '__type__': 'NonTerminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True, True, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 143: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'starparams', '__type__': 'NonTerminal'}], 'order': 16, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 144: {'origin': {'name': Token('RULE', 'parameters'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'kwparams', '__type__': 'NonTerminal'}], 'order': 17, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 145: {'origin': {'name': Token('RULE', 'starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typedparam', '__type__': 'NonTerminal'}, {'name': '__parameters_star_3', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwparams', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 146: {'origin': {'name': Token('RULE', 'starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typedparam', '__type__': 'NonTerminal'}, {'name': '__parameters_star_3', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 147: {'origin': {'name': Token('RULE', 'starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typedparam', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwparams', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 148: {'origin': {'name': Token('RULE', 'starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typedparam', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 149: {'origin': {'name': Token('RULE', 'starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__parameters_star_3', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwparams', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 150: {'origin': {'name': Token('RULE', 'starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__parameters_star_3', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 151: {'origin': {'name': Token('RULE', 'starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwparams', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 152: {'origin': {'name': Token('RULE', 'starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 153: {'origin': {'name': Token('RULE', 'kwparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typedparam', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 154: {'origin': {'name': Token('RULE', 'kwparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'typedparam', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 155: {'origin': {'name': Token('RULE', 'paramvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'typedparam', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 156: {'origin': {'name': Token('RULE', 'paramvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'typedparam', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 157: {'origin': {'name': Token('RULE', 'typedparam'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 158: {'origin': {'name': Token('RULE', 'typedparam'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 159: {'origin': {'name': Token('RULE', 'lambdef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LAMBDA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_params', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 160: {'origin': {'name': Token('RULE', 'lambdef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LAMBDA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 161: {'origin': {'name': Token('RULE', 'lambdef_nocond'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LAMBDA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_params', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test_nocond', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 162: {'origin': {'name': Token('RULE', 'lambdef_nocond'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LAMBDA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test_nocond', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 163: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}, {'name': '__lambda_params_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_starparams', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 164: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}, {'name': '__lambda_params_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_kwparams', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 165: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}, {'name': '__lambda_params_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, True, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 166: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}, {'name': '__lambda_params_star_4', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 167: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_starparams', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 168: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_kwparams', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 169: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 170: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 171: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_starparams', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 172: {'origin': {'name': Token('RULE', 'lambda_params'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambda_kwparams', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 173: {'origin': {'name': Token('RULE', 'lambda_paramvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 174: {'origin': {'name': Token('RULE', 'lambda_paramvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 175: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__lambda_params_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_kwparams', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 176: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__lambda_params_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 177: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__lambda_params_star_4', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 178: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_kwparams', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 179: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 180: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 181: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__lambda_params_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_kwparams', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True, False, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 182: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__lambda_params_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 183: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__lambda_params_star_4', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 184: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_kwparams', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 185: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 186: {'origin': {'name': Token('RULE', 'lambda_starparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 187: {'origin': {'name': Token('RULE', 'lambda_kwparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 188: {'origin': {'name': Token('RULE', 'lambda_kwparams'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 189: {'origin': {'name': Token('RULE', 'stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'simple_stmt', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 190: {'origin': {'name': Token('RULE', 'stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'compound_stmt', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 191: {'origin': {'name': Token('RULE', 'simple_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'small_stmt', '__type__': 'NonTerminal'}, {'name': '__simple_stmt_star_5', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 192: {'origin': {'name': Token('RULE', 'simple_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'small_stmt', '__type__': 'NonTerminal'}, {'name': '__simple_stmt_star_5', '__type__': 'NonTerminal'}, {'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 193: {'origin': {'name': Token('RULE', 'simple_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'small_stmt', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 194: {'origin': {'name': Token('RULE', 'simple_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'small_stmt', '__type__': 'NonTerminal'}, {'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 195: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr_stmt', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 196: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'assign_stmt', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 197: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'del_stmt', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 198: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'pass_stmt', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 199: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'flow_stmt', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 200: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import_stmt', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 201: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'type_stmt', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 202: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'subtype_stmt', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 203: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'var_stmt', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 204: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'const_stmt', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 205: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cursor_stmt', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 206: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'fetchinto_stmt', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 207: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'global_stmt', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 208: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'nonlocal_stmt', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 209: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'assert_stmt', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 210: {'origin': {'name': Token('RULE', 'small_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'exception_stmt', '__type__': 'NonTerminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 211: {'origin': {'name': Token('RULE', 'expr_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'testlist_star_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 212: {'origin': {'name': Token('RULE', 'assign_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'annassign', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 213: {'origin': {'name': Token('RULE', 'assign_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'augassign', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 214: {'origin': {'name': Token('RULE', 'assign_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'assign', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 215: {'origin': {'name': Token('RULE', 'annassign'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'testlist_star_expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 216: {'origin': {'name': Token('RULE', 'annassign'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'testlist_star_expr', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 217: {'origin': {'name': Token('RULE', 'assign'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'testlist_star_expr', '__type__': 'NonTerminal'}, {'name': '__assign_plus_6', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 218: {'origin': {'name': Token('RULE', 'augassign'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'testlist_star_expr', '__type__': 'NonTerminal'}, {'name': 'augassign_op', '__type__': 'NonTerminal'}, {'name': 'yield_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 219: {'origin': {'name': Token('RULE', 'augassign'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'testlist_star_expr', '__type__': 'NonTerminal'}, {'name': 'augassign_op', '__type__': 'NonTerminal'}, {'name': 'testlist', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 220: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_2', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 221: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_3', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 222: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_4', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 223: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_5', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 224: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_6', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 225: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_7', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 226: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_8', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 227: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_9', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 228: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_10', 'filter_out': False, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 229: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_11', 'filter_out': False, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 230: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_12', 'filter_out': False, '__type__': 'Terminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 231: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_13', 'filter_out': False, '__type__': 'Terminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 232: {'origin': {'name': Token('RULE', 'augassign_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_14', 'filter_out': False, '__type__': 'Terminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 233: {'origin': {'name': Token('RULE', 'testlist_star_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 234: {'origin': {'name': Token('RULE', 'testlist_star_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': '__testlist_star_expr_plus_7', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 235: {'origin': {'name': Token('RULE', 'testlist_star_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': '__testlist_star_expr_plus_7', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 236: {'origin': {'name': Token('RULE', 'testlist_star_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 237: {'origin': {'name': Token('RULE', 'del_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'exprlist', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 238: {'origin': {'name': Token('RULE', 'pass_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PASS', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 239: {'origin': {'name': Token('RULE', 'flow_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'break_stmt', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 240: {'origin': {'name': Token('RULE', 'flow_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'continue_stmt', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 241: {'origin': {'name': Token('RULE', 'flow_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'return_stmt', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 242: {'origin': {'name': Token('RULE', 'flow_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'raise_stmt', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 243: {'origin': {'name': Token('RULE', 'flow_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'yield_stmt', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 244: {'origin': {'name': Token('RULE', 'break_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BREAK', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 245: {'origin': {'name': Token('RULE', 'continue_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CONTINUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 246: {'origin': {'name': Token('RULE', 'return_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RETURN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'testlist', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 247: {'origin': {'name': Token('RULE', 'return_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RETURN', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 248: {'origin': {'name': Token('RULE', 'yield_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'yield_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 249: {'origin': {'name': Token('RULE', 'raise_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RAISE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 250: {'origin': {'name': Token('RULE', 'raise_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RAISE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 251: {'origin': {'name': Token('RULE', 'raise_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RAISE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 252: {'origin': {'name': Token('RULE', 'import_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import_name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 253: {'origin': {'name': Token('RULE', 'import_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import_from', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 254: {'origin': {'name': Token('RULE', 'import_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dotted_as_names', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 255: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dots', '__type__': 'NonTerminal'}, {'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 256: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dots', '__type__': 'NonTerminal'}, {'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'import_as_names', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 257: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dots', '__type__': 'NonTerminal'}, {'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'import_as_names', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 258: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 259: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'import_as_names', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 260: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'import_as_names', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 261: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dots', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 262: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dots', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'import_as_names', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 263: {'origin': {'name': Token('RULE', 'import_from'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dots', '__type__': 'NonTerminal'}, {'name': 'IMPORT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'import_as_names', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 264: {'origin': {'name': Token('RULE', 'dots'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__dots_plus_8', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 265: {'origin': {'name': Token('RULE', 'import_as_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'AS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 266: {'origin': {'name': Token('RULE', 'import_as_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 267: {'origin': {'name': Token('RULE', 'dotted_as_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dotted_name', '__type__': 'NonTerminal'}, {'name': 'AS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 268: {'origin': {'name': Token('RULE', 'dotted_as_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dotted_name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 269: {'origin': {'name': Token('RULE', 'import_as_names'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import_as_name', '__type__': 'NonTerminal'}, {'name': '__import_as_names_star_9', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 270: {'origin': {'name': Token('RULE', 'import_as_names'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import_as_name', '__type__': 'NonTerminal'}, {'name': '__import_as_names_star_9', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 271: {'origin': {'name': Token('RULE', 'import_as_names'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import_as_name', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 272: {'origin': {'name': Token('RULE', 'import_as_names'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'import_as_name', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 273: {'origin': {'name': Token('RULE', 'dotted_as_names'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dotted_as_name', '__type__': 'NonTerminal'}, {'name': '__dotted_as_names_star_10', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 274: {'origin': {'name': Token('RULE', 'dotted_as_names'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dotted_as_name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 275: {'origin': {'name': Token('RULE', 'dotted_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__dotted_name_star_11', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 276: {'origin': {'name': Token('RULE', 'dotted_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 277: {'origin': {'name': Token('RULE', 'global_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'GLOBAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__global_stmt_star_12', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 278: {'origin': {'name': Token('RULE', 'global_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'GLOBAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 279: {'origin': {'name': Token('RULE', 'nonlocal_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NONLOCAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__global_stmt_star_12', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 280: {'origin': {'name': Token('RULE', 'nonlocal_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NONLOCAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 281: {'origin': {'name': Token('RULE', 'assert_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ASSERT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 282: {'origin': {'name': Token('RULE', 'assert_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ASSERT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 283: {'origin': {'name': Token('RULE', 'type_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TYPE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'decl_name', '__type__': 'NonTerminal'}, {'name': 'IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'type_selector', '__type__': 'NonTerminal'}, {'name': 'type_param', '__type__': 'NonTerminal'}, {'name': 'OF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'type_body', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 284: {'origin': {'name': Token('RULE', 'type_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TYPE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'decl_name', '__type__': 'NonTerminal'}, {'name': 'IS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'type_selector', '__type__': 'NonTerminal'}, {'name': 'OF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'type_body', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, False, True, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 285: {'origin': {'name': Token('RULE', 'type_selector'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RECORD', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 286: {'origin': {'name': Token('RULE', 'type_selector'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ARRAY', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 287: {'origin': {'name': Token('RULE', 'type_selector'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DICT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 288: {'origin': {'name': Token('RULE', 'type_param'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'type_size', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 289: {'origin': {'name': Token('RULE', 'type_param'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'index_type', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 290: {'origin': {'name': Token('RULE', 'index_type'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'decl_type', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 291: {'origin': {'name': Token('RULE', 'type_size'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEC_NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 292: {'origin': {'name': Token('RULE', 'type_body'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'decl_fields', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 293: {'origin': {'name': Token('RULE', 'type_body'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'decl_type', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 294: {'origin': {'name': Token('RULE', 'decl_fields'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'decl_field', '__type__': 'NonTerminal'}, {'name': '__decl_fields_star_13', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 295: {'origin': {'name': Token('RULE', 'decl_fields'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'decl_field', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 296: {'origin': {'name': Token('RULE', 'decl_field'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'decl_name', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'decl_type', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 297: {'origin': {'name': Token('RULE', 'subtype_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SUBTYPE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'decl_name', '__type__': 'NonTerminal'}, {'name': 'decl_type', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'type_constraint', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 298: {'origin': {'name': Token('RULE', 'subtype_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SUBTYPE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'decl_name', '__type__': 'NonTerminal'}, {'name': 'decl_type', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 299: {'origin': {'name': Token('RULE', 'exception_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EXCEPTION', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'decl_name', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 300: {'origin': {'name': Token('RULE', 'var_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'decl_name', '__type__': 'NonTerminal'}, {'name': 'decl_type', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'type_constraint', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 301: {'origin': {'name': Token('RULE', 'var_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'decl_name', '__type__': 'NonTerminal'}, {'name': 'decl_type', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'type_constraint', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 302: {'origin': {'name': Token('RULE', 'var_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'decl_name', '__type__': 'NonTerminal'}, {'name': 'decl_type', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom_expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, True, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 303: {'origin': {'name': Token('RULE', 'var_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'decl_name', '__type__': 'NonTerminal'}, {'name': 'decl_type', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, True, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 304: {'origin': {'name': Token('RULE', 'const_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CONST', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'decl_name', '__type__': 'NonTerminal'}, {'name': 'decl_type', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'type_constraint', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 305: {'origin': {'name': Token('RULE', 'const_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CONST', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'decl_name', '__type__': 'NonTerminal'}, {'name': 'decl_type', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, True, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 306: {'origin': {'name': Token('RULE', 'decl_name'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 307: {'origin': {'name': Token('RULE', 'decl_type'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 308: {'origin': {'name': Token('RULE', 'type_constraint'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'dotted_name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 309: {'origin': {'name': Token('RULE', 'type_constraint'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEC_NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 310: {'origin': {'name': Token('RULE', 'cursor_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CURSOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'decl_name', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'parameters', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'query', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 311: {'origin': {'name': Token('RULE', 'cursor_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CURSOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'decl_name', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'query', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, True, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 312: {'origin': {'name': Token('RULE', 'cursor_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CURSOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'decl_name', '__type__': 'NonTerminal'}, {'name': 'query', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 313: {'origin': {'name': Token('RULE', 'query'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'QSTRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 314: {'origin': {'name': Token('RULE', 'fetchinto_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FETCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'query', '__type__': 'NonTerminal'}, {'name': 'INTO', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'names', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 315: {'origin': {'name': Token('RULE', 'names'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__global_stmt_star_12', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 316: {'origin': {'name': Token('RULE', 'names'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 317: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'if_stmt', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 318: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'while_stmt', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 319: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'for_stmt', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 320: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'forall_stmt', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 321: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'try_stmt', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 322: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'with_stmt', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 323: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'funcdef', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 324: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'classdef', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 325: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'decorated', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 326: {'origin': {'name': Token('RULE', 'compound_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'async_stmt', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 327: {'origin': {'name': Token('RULE', 'async_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ASYNC', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'funcdef', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 328: {'origin': {'name': Token('RULE', 'async_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ASYNC', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'with_stmt', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 329: {'origin': {'name': Token('RULE', 'async_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ASYNC', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'for_stmt', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 330: {'origin': {'name': Token('RULE', 'async_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ASYNC', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'forall_stmt', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 331: {'origin': {'name': Token('RULE', 'if_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}, {'name': 'elifs', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 332: {'origin': {'name': Token('RULE', 'if_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}, {'name': 'elifs', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 333: {'origin': {'name': Token('RULE', 'elifs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__elifs_star_14', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 334: {'origin': {'name': Token('RULE', 'elifs'), '__type__': 'NonTerminal'}, 'expansion': [], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 335: {'origin': {'name': Token('RULE', 'elif_'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ELIF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 336: {'origin': {'name': Token('RULE', 'while_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 337: {'origin': {'name': Token('RULE', 'while_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 338: {'origin': {'name': Token('RULE', 'for_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'exprlist', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'testlist', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 339: {'origin': {'name': Token('RULE', 'for_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'exprlist', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'testlist', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 340: {'origin': {'name': Token('RULE', 'forall_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FORALL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'exprlist', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'testlist', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 341: {'origin': {'name': Token('RULE', 'forall_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FORALL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'exprlist', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'testlist', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 342: {'origin': {'name': Token('RULE', 'try_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}, {'name': 'except_clauses', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 343: {'origin': {'name': Token('RULE', 'try_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}, {'name': 'except_clauses', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, False, False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 344: {'origin': {'name': Token('RULE', 'try_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}, {'name': 'except_clauses', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 345: {'origin': {'name': Token('RULE', 'try_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}, {'name': 'except_clauses', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, False, True, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 346: {'origin': {'name': Token('RULE', 'try_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}, {'name': 'finally', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'try_finally', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 347: {'origin': {'name': Token('RULE', 'finally'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FINALLY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 348: {'origin': {'name': Token('RULE', 'except_clauses'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__except_clauses_plus_15', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 349: {'origin': {'name': Token('RULE', 'except_clause'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EXCEPT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'AS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 350: {'origin': {'name': Token('RULE', 'except_clause'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EXCEPT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 351: {'origin': {'name': Token('RULE', 'except_clause'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EXCEPT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True, True, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 352: {'origin': {'name': Token('RULE', 'with_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'WITH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'with_items', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 353: {'origin': {'name': Token('RULE', 'with_items'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'with_item', '__type__': 'NonTerminal'}, {'name': '__with_items_star_16', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 354: {'origin': {'name': Token('RULE', 'with_items'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'with_item', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 355: {'origin': {'name': Token('RULE', 'with_item'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'AS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 356: {'origin': {'name': Token('RULE', 'with_item'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 357: {'origin': {'name': Token('RULE', 'suite'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'simple_stmt', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 358: {'origin': {'name': Token('RULE', 'suite'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_INDENT', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__suite_plus_17', '__type__': 'NonTerminal'}, {'name': '_DEDENT', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 359: {'origin': {'name': Token('RULE', 'test'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'or_test', '__type__': 'NonTerminal'}, {'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'or_test', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 360: {'origin': {'name': Token('RULE', 'test'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'or_test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 361: {'origin': {'name': Token('RULE', 'test'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambdef', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 362: {'origin': {'name': Token('RULE', 'test_nocond'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'or_test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 363: {'origin': {'name': Token('RULE', 'test_nocond'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'lambdef_nocond', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 364: {'origin': {'name': Token('RULE', 'or_test'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'and_test', '__type__': 'NonTerminal'}, {'name': '__or_test_star_18', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 365: {'origin': {'name': Token('RULE', 'or_test'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'and_test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 366: {'origin': {'name': Token('RULE', 'and_test'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'not_test_', '__type__': 'NonTerminal'}, {'name': '__and_test_star_19', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 367: {'origin': {'name': Token('RULE', 'and_test'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'not_test_', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 368: {'origin': {'name': Token('RULE', 'not_test_'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'not_test_', '__type__': 'NonTerminal'}], 'order': 0, 'alias': 'not_test', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 369: {'origin': {'name': Token('RULE', 'not_test_'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'comparison', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 370: {'origin': {'name': Token('RULE', 'comparison'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': '__comparison_star_20', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 371: {'origin': {'name': Token('RULE', 'comparison'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 372: {'origin': {'name': Token('RULE', 'star_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 373: {'origin': {'name': Token('RULE', 'expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'or_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 374: {'origin': {'name': Token('RULE', 'or_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'xor_expr', '__type__': 'NonTerminal'}, {'name': '__or_expr_star_21', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 375: {'origin': {'name': Token('RULE', 'or_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'xor_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 376: {'origin': {'name': Token('RULE', 'xor_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'and_expr', '__type__': 'NonTerminal'}, {'name': '__xor_expr_star_22', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 377: {'origin': {'name': Token('RULE', 'xor_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'and_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 378: {'origin': {'name': Token('RULE', 'and_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'shift_expr', '__type__': 'NonTerminal'}, {'name': '__and_expr_star_23', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 379: {'origin': {'name': Token('RULE', 'and_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'shift_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 380: {'origin': {'name': Token('RULE', 'shift_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arith_expr', '__type__': 'NonTerminal'}, {'name': '__shift_expr_star_24', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 381: {'origin': {'name': Token('RULE', 'shift_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arith_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 382: {'origin': {'name': Token('RULE', 'arith_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}, {'name': '__arith_expr_star_25', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 383: {'origin': {'name': Token('RULE', 'arith_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 384: {'origin': {'name': Token('RULE', 'term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'factor', '__type__': 'NonTerminal'}, {'name': '__term_star_26', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 385: {'origin': {'name': Token('RULE', 'term'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'factor', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 386: {'origin': {'name': Token('RULE', 'factor'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_unary_op', '__type__': 'NonTerminal'}, {'name': 'factor', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 387: {'origin': {'name': Token('RULE', 'factor'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'power', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 388: {'origin': {'name': Token('RULE', '_unary_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 389: {'origin': {'name': Token('RULE', '_unary_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 390: {'origin': {'name': Token('RULE', '_unary_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TILDE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 391: {'origin': {'name': Token('RULE', '_add_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 392: {'origin': {'name': Token('RULE', '_add_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 393: {'origin': {'name': Token('RULE', '_shift_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_15', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 394: {'origin': {'name': Token('RULE', '_shift_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_16', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 395: {'origin': {'name': Token('RULE', '_mul_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 396: {'origin': {'name': Token('RULE', '_mul_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 397: {'origin': {'name': Token('RULE', '_mul_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SLASH', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 398: {'origin': {'name': Token('RULE', '_mul_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PERCENT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 399: {'origin': {'name': Token('RULE', '_mul_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_17', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 400: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LESSTHAN', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 401: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MORETHAN', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 402: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_18', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 403: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_19', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 404: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_20', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 405: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_21', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 406: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_22', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 407: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 408: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NOT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'IN', 'filter_out': False, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 409: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 410: {'origin': {'name': Token('RULE', 'comp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'NOT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 411: {'origin': {'name': Token('RULE', 'power'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'await_expr', '__type__': 'NonTerminal'}, {'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'factor', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 412: {'origin': {'name': Token('RULE', 'power'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'await_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 413: {'origin': {'name': Token('RULE', 'await_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AWAIT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'atom_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 414: {'origin': {'name': Token('RULE', 'await_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 415: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arguments', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'funccall', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 416: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'funccall', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 417: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'subscriptlist', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'getitem', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 418: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': 'getattr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 419: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 420: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'yield_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 421: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_tuple_inner', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 422: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 423: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'comprehension{test_or_star_expr}', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'tuple_comprehension', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 424: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_testlist_comp', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 425: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': 'list', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 426: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'comprehension{test_or_star_expr}', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'list_comprehension', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 427: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_dict_exprlist', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': 'dict', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 428: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'dict', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 429: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'comprehension{key_value}', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': 'dict_comprehension', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 430: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_set_exprlist', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 10, 'alias': 'set', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 431: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'comprehension{test}', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 11, 'alias': 'set_comprehension', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 432: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 12, 'alias': 'var', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 433: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'number', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 434: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string_concat', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 435: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 436: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_23', 'filter_out': True, '__type__': 'Terminal'}], 'order': 16, 'alias': 'ellipsis', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 437: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'NONE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 17, 'alias': 'const_none', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 438: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 18, 'alias': 'const_true', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 439: {'origin': {'name': Token('RULE', 'atom'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 19, 'alias': 'const_false', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 440: {'origin': {'name': Token('RULE', 'string_concat'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__string_concat_plus_27', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 441: {'origin': {'name': Token('RULE', '_testlist_comp'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 442: {'origin': {'name': Token('RULE', '_testlist_comp'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_tuple_inner', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 443: {'origin': {'name': Token('RULE', '_tuple_inner'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': '__testlist_star_expr_plus_7', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 444: {'origin': {'name': Token('RULE', '_tuple_inner'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': '__testlist_star_expr_plus_7', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 445: {'origin': {'name': Token('RULE', '_tuple_inner'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 446: {'origin': {'name': Token('RULE', 'test_or_star_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 447: {'origin': {'name': Token('RULE', 'test_or_star_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'star_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 448: {'origin': {'name': Token('RULE', 'subscriptlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'subscript', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 449: {'origin': {'name': Token('RULE', 'subscriptlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'subscript', '__type__': 'NonTerminal'}, {'name': '__subscriptlist_plus_28', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'subscript_tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 450: {'origin': {'name': Token('RULE', 'subscriptlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'subscript', '__type__': 'NonTerminal'}, {'name': '__subscriptlist_plus_28', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'subscript_tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 451: {'origin': {'name': Token('RULE', 'subscriptlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'subscript', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'subscript_tuple', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 452: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 453: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'sliceop', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 454: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 455: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'sliceop', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 456: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 457: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}, {'name': 'sliceop', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': [True, False, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 458: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 6, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': [True, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 459: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'sliceop', '__type__': 'NonTerminal'}], 'order': 7, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': [True, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 460: {'origin': {'name': Token('RULE', 'subscript'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 8, 'alias': 'slice', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': [True, False, True, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 461: {'origin': {'name': Token('RULE', 'sliceop'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 462: {'origin': {'name': Token('RULE', 'sliceop'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 463: {'origin': {'name': Token('RULE', 'exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 464: {'origin': {'name': Token('RULE', 'exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'star_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 465: {'origin': {'name': Token('RULE', 'exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': '__exprlist_plus_29', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 466: {'origin': {'name': Token('RULE', 'exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': '__exprlist_plus_29', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 467: {'origin': {'name': Token('RULE', 'exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 468: {'origin': {'name': Token('RULE', 'exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'star_expr', '__type__': 'NonTerminal'}, {'name': '__exprlist_plus_29', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 469: {'origin': {'name': Token('RULE', 'exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'star_expr', '__type__': 'NonTerminal'}, {'name': '__exprlist_plus_29', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 470: {'origin': {'name': Token('RULE', 'exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'star_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 471: {'origin': {'name': Token('RULE', 'testlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 472: {'origin': {'name': Token('RULE', 'testlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'testlist_tuple', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 473: {'origin': {'name': Token('RULE', 'testlist_tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': '__testlist_tuple_plus_30', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 474: {'origin': {'name': Token('RULE', 'testlist_tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': '__testlist_tuple_plus_30', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 475: {'origin': {'name': Token('RULE', 'testlist_tuple'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 476: {'origin': {'name': Token('RULE', '_dict_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'key_value', '__type__': 'NonTerminal'}, {'name': '___dict_exprlist_star_31', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 477: {'origin': {'name': Token('RULE', '_dict_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'key_value', '__type__': 'NonTerminal'}, {'name': '___dict_exprlist_star_31', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 478: {'origin': {'name': Token('RULE', '_dict_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'key_value', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 479: {'origin': {'name': Token('RULE', '_dict_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'key_value', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 480: {'origin': {'name': Token('RULE', '_dict_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': '___dict_exprlist_star_31', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 481: {'origin': {'name': Token('RULE', '_dict_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': '___dict_exprlist_star_31', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 482: {'origin': {'name': Token('RULE', '_dict_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 483: {'origin': {'name': Token('RULE', '_dict_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 484: {'origin': {'name': Token('RULE', 'key_value'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 485: {'origin': {'name': Token('RULE', '_set_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': '__testlist_star_expr_plus_7', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 486: {'origin': {'name': Token('RULE', '_set_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': '__testlist_star_expr_plus_7', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 487: {'origin': {'name': Token('RULE', '_set_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 488: {'origin': {'name': Token('RULE', '_set_exprlist'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 489: {'origin': {'name': Token('RULE', 'classdef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CLASS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arguments', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 490: {'origin': {'name': Token('RULE', 'classdef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CLASS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, True, False, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 491: {'origin': {'name': Token('RULE', 'classdef'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CLASS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'suite', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 492: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argvalue', '__type__': 'NonTerminal'}, {'name': '__arguments_star_32', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'starargs', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 493: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argvalue', '__type__': 'NonTerminal'}, {'name': '__arguments_star_32', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwargs', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 494: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argvalue', '__type__': 'NonTerminal'}, {'name': '__arguments_star_32', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, True, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 495: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argvalue', '__type__': 'NonTerminal'}, {'name': '__arguments_star_32', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 496: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'starargs', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 497: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwargs', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 498: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argvalue', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 499: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'argvalue', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 500: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'starargs', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 501: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'kwargs', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 502: {'origin': {'name': Token('RULE', 'arguments'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'comprehension{test}', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 503: {'origin': {'name': Token('RULE', 'starargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stararg', '__type__': 'NonTerminal'}, {'name': '__starargs_star_33', '__type__': 'NonTerminal'}, {'name': '__arguments_star_32', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwargs', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 504: {'origin': {'name': Token('RULE', 'starargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stararg', '__type__': 'NonTerminal'}, {'name': '__starargs_star_33', '__type__': 'NonTerminal'}, {'name': '__arguments_star_32', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 505: {'origin': {'name': Token('RULE', 'starargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stararg', '__type__': 'NonTerminal'}, {'name': '__starargs_star_33', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwargs', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 506: {'origin': {'name': Token('RULE', 'starargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stararg', '__type__': 'NonTerminal'}, {'name': '__starargs_star_33', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 507: {'origin': {'name': Token('RULE', 'starargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stararg', '__type__': 'NonTerminal'}, {'name': '__arguments_star_32', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwargs', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 508: {'origin': {'name': Token('RULE', 'starargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stararg', '__type__': 'NonTerminal'}, {'name': '__arguments_star_32', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 509: {'origin': {'name': Token('RULE', 'starargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stararg', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'kwargs', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 510: {'origin': {'name': Token('RULE', 'starargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stararg', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 511: {'origin': {'name': Token('RULE', 'stararg'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 512: {'origin': {'name': Token('RULE', 'kwargs'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 513: {'origin': {'name': Token('RULE', 'argvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 514: {'origin': {'name': Token('RULE', 'argvalue'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 515: {'origin': {'name': Token('RULE', 'comp_fors'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__comp_fors_plus_34', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 516: {'origin': {'name': Token('RULE', 'comp_for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ASYNC', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'exprlist', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'or_test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 517: {'origin': {'name': Token('RULE', 'comp_for'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'exprlist', '__type__': 'NonTerminal'}, {'name': 'IN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'or_test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [True, False, False, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 518: {'origin': {'name': Token('RULE', 'comp_if'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test_nocond', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 519: {'origin': {'name': Token('RULE', 'yield_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'YIELD', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'testlist', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 520: {'origin': {'name': Token('RULE', 'yield_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'YIELD', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 521: {'origin': {'name': Token('RULE', 'yield_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'YIELD', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'FROM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'yield_from', 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 522: {'origin': {'name': Token('RULE', 'number'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEC_NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 523: {'origin': {'name': Token('RULE', 'number'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'HEX_NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 524: {'origin': {'name': Token('RULE', 'number'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BIN_NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 525: {'origin': {'name': Token('RULE', 'number'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'OCT_NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 526: {'origin': {'name': Token('RULE', 'number'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FLOAT_NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 527: {'origin': {'name': Token('RULE', 'number'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IMAG_NUMBER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 528: {'origin': {'name': Token('RULE', 'string'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 529: {'origin': {'name': Token('RULE', 'string'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LONG_STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 530: {'origin': {'name': Token('RULE', 'string'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FSTRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 531: {'origin': {'name': Token('RULE', 'string'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LONG_FSTRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 532: {'origin': {'name': Token('RULE', 'string'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'QSTRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 533: {'origin': {'name': Token('RULE', 'string'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'QLONG_STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 534: {'origin': {'name': 'comprehension{test_or_star_expr}', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': 'comp_fors', '__type__': 'NonTerminal'}, {'name': 'comp_if', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': Token('RULE', 'comprehension'), 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 535: {'origin': {'name': 'comprehension{test_or_star_expr}', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test_or_star_expr', '__type__': 'NonTerminal'}, {'name': 'comp_fors', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': Token('RULE', 'comprehension'), 'empty_indices': [False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 536: {'origin': {'name': 'comprehension{key_value}', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'key_value', '__type__': 'NonTerminal'}, {'name': 'comp_fors', '__type__': 'NonTerminal'}, {'name': 'comp_if', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': Token('RULE', 'comprehension'), 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 537: {'origin': {'name': 'comprehension{key_value}', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'key_value', '__type__': 'NonTerminal'}, {'name': 'comp_fors', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': Token('RULE', 'comprehension'), 'empty_indices': [False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 538: {'origin': {'name': 'comprehension{test}', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'comp_fors', '__type__': 'NonTerminal'}, {'name': 'comp_if', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': Token('RULE', 'comprehension'), 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 539: {'origin': {'name': 'comprehension{test}', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'test', '__type__': 'NonTerminal'}, {'name': 'comp_fors', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': Token('RULE', 'comprehension'), 'empty_indices': [False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 540: {'origin': {'name': '__file_input_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 541: {'origin': {'name': '__file_input_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stmt', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 542: {'origin': {'name': '__file_input_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__file_input_star_0', '__type__': 'NonTerminal'}, {'name': '_NEWLINE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 543: {'origin': {'name': '__file_input_star_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__file_input_star_0', '__type__': 'NonTerminal'}, {'name': 'stmt', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 544: {'origin': {'name': '__decorators_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'decorator', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 545: {'origin': {'name': '__decorators_plus_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__decorators_plus_2', '__type__': 'NonTerminal'}, {'name': 'decorator', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 546: {'origin': {'name': '__parameters_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'paramvalue', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 547: {'origin': {'name': '__parameters_star_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__parameters_star_3', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'paramvalue', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 548: {'origin': {'name': '__lambda_params_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 549: {'origin': {'name': '__lambda_params_star_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__lambda_params_star_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'lambda_paramvalue', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 550: {'origin': {'name': '__simple_stmt_star_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'small_stmt', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 551: {'origin': {'name': '__simple_stmt_star_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__simple_stmt_star_5', '__type__': 'NonTerminal'}, {'name': 'SEMICOLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'small_stmt', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 552: {'origin': {'name': '__assign_plus_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'yield_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 553: {'origin': {'name': '__assign_plus_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'testlist_star_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 554: {'origin': {'name': '__assign_plus_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__assign_plus_6', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'yield_expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 555: {'origin': {'name': '__assign_plus_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__assign_plus_6', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'testlist_star_expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 556: {'origin': {'name': '__testlist_star_expr_plus_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test_or_star_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 557: {'origin': {'name': '__testlist_star_expr_plus_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__testlist_star_expr_plus_7', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test_or_star_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 558: {'origin': {'name': '__dots_plus_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DOT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 559: {'origin': {'name': '__dots_plus_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__dots_plus_8', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 560: {'origin': {'name': '__import_as_names_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'import_as_name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 561: {'origin': {'name': '__import_as_names_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__import_as_names_star_9', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'import_as_name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 562: {'origin': {'name': '__dotted_as_names_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dotted_as_name', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 563: {'origin': {'name': '__dotted_as_names_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__dotted_as_names_star_10', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'dotted_as_name', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 564: {'origin': {'name': '__dotted_name_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 565: {'origin': {'name': '__dotted_name_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__dotted_name_star_11', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 566: {'origin': {'name': '__global_stmt_star_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 567: {'origin': {'name': '__global_stmt_star_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__global_stmt_star_12', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'NAME', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 568: {'origin': {'name': '__decl_fields_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'decl_field', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 569: {'origin': {'name': '__decl_fields_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__decl_fields_star_13', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'decl_field', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 570: {'origin': {'name': '__elifs_star_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'elif_', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 571: {'origin': {'name': '__elifs_star_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__elifs_star_14', '__type__': 'NonTerminal'}, {'name': 'elif_', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 572: {'origin': {'name': '__except_clauses_plus_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'except_clause', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 573: {'origin': {'name': '__except_clauses_plus_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__except_clauses_plus_15', '__type__': 'NonTerminal'}, {'name': 'except_clause', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 574: {'origin': {'name': '__with_items_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'with_item', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 575: {'origin': {'name': '__with_items_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__with_items_star_16', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'with_item', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 576: {'origin': {'name': '__suite_plus_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'stmt', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 577: {'origin': {'name': '__suite_plus_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__suite_plus_17', '__type__': 'NonTerminal'}, {'name': 'stmt', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 578: {'origin': {'name': '__or_test_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'OR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'and_test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 579: {'origin': {'name': '__or_test_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__or_test_star_18', '__type__': 'NonTerminal'}, {'name': 'OR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'and_test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 580: {'origin': {'name': '__and_test_star_19', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AND', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'not_test_', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 581: {'origin': {'name': '__and_test_star_19', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__and_test_star_19', '__type__': 'NonTerminal'}, {'name': 'AND', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'not_test_', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 582: {'origin': {'name': '__comparison_star_20', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'comp_op', '__type__': 'NonTerminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 583: {'origin': {'name': '__comparison_star_20', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__comparison_star_20', '__type__': 'NonTerminal'}, {'name': 'comp_op', '__type__': 'NonTerminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 584: {'origin': {'name': '__or_expr_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VBAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'xor_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 585: {'origin': {'name': '__or_expr_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__or_expr_star_21', '__type__': 'NonTerminal'}, {'name': 'VBAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'xor_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 586: {'origin': {'name': '__xor_expr_star_22', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'and_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 587: {'origin': {'name': '__xor_expr_star_22', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__xor_expr_star_22', '__type__': 'NonTerminal'}, {'name': 'CIRCUMFLEX', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'and_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 588: {'origin': {'name': '__and_expr_star_23', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AMPERSAND', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'shift_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 589: {'origin': {'name': '__and_expr_star_23', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__and_expr_star_23', '__type__': 'NonTerminal'}, {'name': 'AMPERSAND', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'shift_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 590: {'origin': {'name': '__shift_expr_star_24', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_shift_op', '__type__': 'NonTerminal'}, {'name': 'arith_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 591: {'origin': {'name': '__shift_expr_star_24', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__shift_expr_star_24', '__type__': 'NonTerminal'}, {'name': '_shift_op', '__type__': 'NonTerminal'}, {'name': 'arith_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 592: {'origin': {'name': '__arith_expr_star_25', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_add_op', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 593: {'origin': {'name': '__arith_expr_star_25', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__arith_expr_star_25', '__type__': 'NonTerminal'}, {'name': '_add_op', '__type__': 'NonTerminal'}, {'name': 'term', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 594: {'origin': {'name': '__term_star_26', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_mul_op', '__type__': 'NonTerminal'}, {'name': 'factor', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 595: {'origin': {'name': '__term_star_26', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__term_star_26', '__type__': 'NonTerminal'}, {'name': '_mul_op', '__type__': 'NonTerminal'}, {'name': 'factor', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 596: {'origin': {'name': '__string_concat_plus_27', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'string', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 597: {'origin': {'name': '__string_concat_plus_27', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__string_concat_plus_27', '__type__': 'NonTerminal'}, {'name': 'string', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 598: {'origin': {'name': '__subscriptlist_plus_28', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'subscript', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 599: {'origin': {'name': '__subscriptlist_plus_28', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__subscriptlist_plus_28', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'subscript', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 600: {'origin': {'name': '__exprlist_plus_29', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 601: {'origin': {'name': '__exprlist_plus_29', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'star_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 602: {'origin': {'name': '__exprlist_plus_29', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__exprlist_plus_29', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 603: {'origin': {'name': '__exprlist_plus_29', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__exprlist_plus_29', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'star_expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 604: {'origin': {'name': '__testlist_tuple_plus_30', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 605: {'origin': {'name': '__testlist_tuple_plus_30', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__testlist_tuple_plus_30', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'test', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 606: {'origin': {'name': '___dict_exprlist_star_31', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'key_value', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 607: {'origin': {'name': '___dict_exprlist_star_31', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 608: {'origin': {'name': '___dict_exprlist_star_31', '__type__': 'NonTerminal'}, 'expansion': [{'name': '___dict_exprlist_star_31', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'key_value', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 609: {'origin': {'name': '___dict_exprlist_star_31', '__type__': 'NonTerminal'}, 'expansion': [{'name': '___dict_exprlist_star_31', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__ANON_1', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 610: {'origin': {'name': '__arguments_star_32', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'argvalue', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 611: {'origin': {'name': '__arguments_star_32', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__arguments_star_32', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'argvalue', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 612: {'origin': {'name': '__starargs_star_33', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'stararg', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 613: {'origin': {'name': '__starargs_star_33', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__starargs_star_33', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'stararg', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 614: {'origin': {'name': '__comp_fors_plus_34', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'comp_for', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 615: {'origin': {'name': '__comp_fors_plus_34', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__comp_fors_plus_34', '__type__': 'NonTerminal'}, {'name': 'comp_for', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
)
Shift = 0
Reduce = 1
def Lark_StandAlone(**kwargs):
  return Lark._load_from_dict(DATA, MEMO, **kwargs)
